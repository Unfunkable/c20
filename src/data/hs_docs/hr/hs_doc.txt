; AVAILABLE FUNCTIONS:

(<passthrough> begin <expression(s)>)
; returns the last expression in a sequence after evaluating the sequence in order.

(<passthrough> begin_random <expression(s)>)
; evaluates the sequence of expressions in random order and returns the last value evaluated.

(<passthrough> begin_count <expression(s)>)
; evaluates the specified number of expressions in a sequence in random order and returns the last value evaluated.

(<passthrough> begin_random_count <expression(s)>)
; evaluates the specified number of expressions in a sequence in random order and returns the last value evaluated.

(<passthrough> if <boolean> <then> [<else>])
; returns one of two values based on the value of a condition.

(<passthrough> cond (<boolean1> <result1>) [(<boolean2> <result2>) [...]])
; returns the value associated with the first true condition.

(<passthrough> set <variable name> <expression>)
; set the value of a global variable.

(<boolean> and <boolean(s)>)
; returns true if all specified expressions are true.

(<boolean> or <boolean(s)>)
; returns true if any specified expressions are true.

(<real> + <number(s)>)
; returns the sum of all specified expressions.

(<real> - <number> <number>)
; returns the difference of two expressions.

(<real> * <number(s)>)
; returns the product of all specified expressions.

(<real> / <number> <number>)
; returns the quotient of two expressions.

(<real> % <number> <number>)
; returns the remainder of the division of two numbers

(<real> min <number(s)>)
; returns the minimum of all specified expressions.

(<real> max <number(s)>)
; returns the maximum of all specified expressions.

(<boolean> = <expression> <expression>)
; returns true if two expressions are equal

(<boolean> != <expression> <expression>)
; returns true if two expressions are not equal

(<boolean> > <number> <number>)
; returns true if the first number is larger than the second.

(<boolean> < <number> <number>)
; returns true if the first number is smaller than the second.

(<boolean> >= <number> <number>)
; returns true if the first number is larger than or equal to the second.

(<boolean> <= <number> <number>)
; returns true if the first number is smaller than or equal to the second.

(<void> sleep <short> [<script>])
; pauses execution of this script (or, optionally, another script) for the specified number of ticks.

(<void> sleep_forever [<script>])
; pauses execution of this script (or, optionally, another script) forever.

(<boolean> sleep_until <boolean> [<short>])
; pauses execution of this script until the specified condition is true, checking once per second unless a different number of ticks is specified.

(<boolean> sleep_until_game_ticks <boolean> [<short>])
; pauses execution of this script until the specified condition is true, checking once per second unless a different number of ticks is specified.

(<void> wake <script name>)
; wakes a sleeping script in the next update.

(<void> cinematic_sleep <short> [<script>])
; cinematic only sleep script call which ignores the 1 frame special case for non 30Hz builds

(<void> inspect <expression>)
; prints the value of an expression to the screen for debugging purposes.

(<void> branch <condition> <script>)
; Stops executing current script when condition met and starts the script indicated in the parameter.

(<unit> unit <object>)
; converts an object to a unit.

(<vehicle> vehicle <object>)
; converts an object to a vehicle.

(<weapon> weapon <object>)
; converts an object to a vehicle.

(<device> device <object>)
; converts an object to a vehicle.

(<scenery> scenery <object>)
; converts an object to a vehicle.

(<effect_scenery> effect_scenery <object>)
; converts an object to a vehicle.

(<void> evaluate <script>)
; Evaluate the given script

(<boolean> not <boolean>)
; returns the opposite of the expression.

(<real> pin <real> <real> <real>)
; returns the first value pinned between the second two

(<void> dummy_function)
; Function that does nothing.

(<void> print <string>)
; prints a string to the console.

(<void> print_if <boolean> <string>)
; prints a string to the console if the condition is true.

(<void> log_print <string>)
; prints a string to the hs log file.

(<void> debug_scripting_show_thread <string> <boolean>)
; shows or hides the display of any thread containing the given substring.

(<void> debug_script_thread <string_id> <boolean>)
; Verbose threads spew to log about script and function calls.

(<void> debug_scripting <boolean>)
; Turn on/off hs script debugging.

(<void> debug_scripting_globals <boolean>)
; Turn on/off hs global debugging.

(<void> debug_scripting_variable <string> <boolean>)
; Turn on/off debugging of a specific global variable; enclose the variable name with single quote characters ('my_variable')

(<void> debug_scripting_variable_all <boolean>)
; Turn on/off debugging of all global variables

(<void> breakpoint <string>)
; If breakpoints are enabled, pause execution when this statement is hit (displaying the given message).

(<void> kill_active_scripts)
; Terminates all currently running threads.

(<long> get_executing_running_thread)
; Retrieves the current executing thread index

(<void> kill_thread <long>)
; Kill the specified thread

(<boolean> script_started <string_id>)
; Returns true if the continuous, dormant or startup script was started.

(<boolean> script_finished <string_id>)
; Returns true if the continuous, dormant or startup script was finished.

(<object_list> local_players)
; returns a list of the living player units on the local machine

(<object_list> players)
; returns a list of the living player units

(<object_list> players_human)
; returns a list of the living spartan player units

(<object_list> players_elite)
; returns a list of the living elite player units

(<unit> player_get <long>)
; Get a player unit by absolute index

(<player> player_in_game_get <long>)
; Get a player by absolute index

(<player> human_player_in_game_get <long>)
; Get a player by absolute index

(<player> elite_player_in_game_get <long>)
; Get a player by absolute index

(<boolean> player_is_in_game <player>)
; Returns true if the player is currently in the game.

(<boolean> editor_mode)
; return if we are currently in the editor

(<void> kill_volume_enable <trigger_volume>)
; enables a kill volume

(<void> kill_volume_disable <trigger_volume>)
; disables a kill volume

(<void> volume_teleport_players_not_inside <trigger_volume> <cutscene_flag>)
; moves all players outside a specified trigger volume to a specified flag.

(<boolean> volume_test_object <trigger_volume> <object>)
; returns true if the specified object is within the specified volume.

(<boolean> volume_test_objects <trigger_volume> <object_list>)
; returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed

(<boolean> volume_test_objects_all <trigger_volume> <object_list>)
; returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed

(<boolean> volume_test_players <trigger_volume>)
; returns true if any players are within the specified volume. trigger volume must have been postprocessed

(<boolean> volume_test_players_all <trigger_volume>)
; returns true if all players are within the specified volume. trigger volume must have been postprocessed

(<object_list> volume_return_objects <trigger_volume>)
; returns list of objects in volume or (max 128).

(<object_list> volume_return_objects_by_type <trigger_volume> <long>)
; returns list of objects in volume or (max 128).

(<object_list> volume_return_objects_by_campaign_type <trigger_volume> <long>)
; returns list of objects of the specified campaign metagame type that is in the volume or (max 128).

(<void> zone_set_trigger_volume_enable <string_id> <boolean>)
; enables/disables the trigger volume(s) with the given name that cause zone set switches

(<object> list_get <object_list> <short>)
; returns an item in an object list.

(<short> list_count <object_list>)
; returns the number of objects in a list

(<short> list_count_not_dead <object_list>)
; returns the number of objects in a list that aren't dead

(<void> effect_new <effect> <cutscene_flag>)
; starts the specified effect at the specified flag.

(<void> effect_new_random <effect> <point_reference>)
; starts the specified effect at one of the points in the given a point set.

(<void> effect_new_random <effect> <point_reference> <real> <real>)
; starts the specified effect at one of the points in the given a point set, with a given yaw/pitch perturbation (in that order)

(<void> effect_new_at_ai_point <effect> <point_reference>)
; starts the specified effect at the specified ai point.

(<void> effect_new_at_point_set_point <effect> <point_reference> <long>)
; starts the specified effect at one of the points in the given a point set.

(<void> effect_new_on_object_marker <effect> <object> <string_id>)
; starts the specified effect on the specified object at the specified marker.

(<void> effect_new_on_object_marker_loop <effect> <object> <string_id>)
; starts the specified effect on the specified object at the specified marker.  Effect loops.

(<void> effect_stop_object_marker <effect> <object> <string_id>)
; Stops a running effect that's on a specified object and marker.

(<void> effect_new_on_ground <effect> <object>)
; starts the specified effect on the ground underneath the object's root.

(<void> damage_new <damage> <cutscene_flag>)
; causes the specified damage at the specified flag.

(<void> damage_object_effect <damage> <object>)
; causes the specified damage at the specified object.

(<void> damage_objects_effect <damage> <object_list>)
; causes the specified damage at the specified object list.

(<void> damage_object <object> <string_id> <real>)
; causes the specified damage at the specified object.

(<void> damage_objects <object_list> <string_id> <real>)
; causes the specified damage at the specified object list.

(<void> damage_players <damage>)
; damages all players with the given damage effect

(<void> soft_ceiling_enable <string_id> <boolean>)
; turn on or off a soft ceiling

(<void> object_create <object_name>)
; creates an object from the scenario.

(<void> object_create_variant <object_name> <string_id>)
; creates an object from the scenario with a given variant.

(<void> object_create_clone <object_name>)
; creates an object, potentially resulting in multiple objects if it already exists.

(<void> object_create_anew <object_name>)
; creates an object, destroying it first if it already exists.

(<void> object_create_if_necessary <object_name>)
; creates an object if it doesn't already exists.

(<void> object_create_folder <folder>)
; creates all the objects in the given folder

(<void> object_create_folder_anew <folder>)
; creates all the objects in the given folder

(<void> object_destroy <object>)
; destroys an object.

(<void> object_destroy_all)
; destroys all non player objects.

(<void> object_destroy_type_mask <long>)
; destroys all objects matching the type mask

(<void> objects_delete_by_definition <object_definition>)
; deletes all objects of type <definition>

(<void> object_destroy_folder <folder>)
; destroys all objects in the given folder.

(<void> object_hide <object> <boolean>)
; hides or shows the object passed in

(<void> object_set_shadowless <object> <boolean>)
; set/reset shadow castingness of object

(<void> object_set_allegiance <object> <team>)
; sets what campaign team the object belongs

(<real> object_buckling_magnitude_get <object>)
; returns the amoount [0-1] that a scarab is buckling

(<void> object_function_set <long> <real>)
; sets a global object function (0-3) to value

(<void> object_set_function_variable <object> <string_id> <real> <real>)
; sets funciton variable for sin-o-matic use

(<void> object_set_cinematic_function_variable <object> <string_id> <real> <real>)
; sets funciton variable for sin-o-matic use
; NETWORK SAFE: Unknown, assumed unsafe

(<void> object_clear_cinematic_function_variable <object> <string_id>)
; clears one funciton variables for sin-o-matic use
; NETWORK SAFE: Unknown, assumed unsafe

(<void> object_clear_all_cinematic_function_variables <object>)
; clears all funciton variables for sin-o-matic use
; NETWORK SAFE: Unknown, assumed unsafe

(<void> object_dynamic_simulation_disable <object> <boolean>)
; disabled dynamic simulation for this object (makes it fixed)

(<void> object_set_phantom_power <object> <boolean>)
; sets phantom power to be latched at 1.0f or 0.0f

(<void> object_wake_physics <object>)
; wakes physics of an object.  For example it would make an usupported crate fall

(<boolean> object_get_at_rest <object>)
; returns whether or not an object's physics is at rest

(<void> object_set_ranged_attack_inhibited <object> <boolean>)
; FALSE prevents object from using ranged attack

(<void> object_set_melee_attack_inhibited <object> <boolean>)
; FALSE prevents object from using melee attack

(<void> objects_dump_memory)
; debugs object memory usage

(<real> object_get_health <object>)
; returns the health [0,1] of the object, returns -1 if the object does not exist

(<real> object_get_shield <object>)
; returns the shield [0,1] of the object, returns -1 if the object does not exist

(<void> object_set_shield_effect <object> <real> <real>)
; sets the shield response effect (not current shield amount) to a given value over the given number of seconds (cinematic use only, remember to call (object_set_shield_effect 0 0) after use!)

(<void> object_set_physics <object> <boolean>)
; prevents an object from running physics or colliding with any other objects

(<object> object_get_parent <object>)
; returns the parent of the given object

(<void> objects_attach <object> <string_id> <object> <string_id>)
; attaches the second object to the first both strings can be empty

(<object> object_at_marker <object> <string_id>)
; returns the object attached to the marker of the given parent object

(<void> objects_detach <object> <object>)
; detaches from the given parent object the given child object

(<void> object_set_scale <object> <real> <short>)
; sets the scale for a given object and interpolates over the given number of frames to achieve that scale

(<void> object_set_velocity <object> <real>)
; Sets the (object-relative) forward velocity of the given object

(<short> object_get_bsp <object>)
; Returns the BSP index that the object is in

(<void> object_set_as_fireteam_target <object> <boolean>)
; sets the object as something that the fireteam selection process is interested in.
; 2/17/10 - See engineering if you need this.  We removed it because it was destroying perf

(<boolean> object_is_reserved <object>)
; checks whether a given object has been reserved by a fireteam 

(<void> object_set_velocity <object> <real> <real> <real>)
; Sets the (object-relative) velocity of the given object

(<void> object_set_deleted_when_deactivated <object>)
; when this object deactivates it will be deleted

(<void> object_copy_player_appearance <object> <long>)
; copy appearance into object from player n (starts counting from 0)

(<boolean> object_model_target_destroyed <object> <string_id>)
; returns TRUE if the specified model target is destroyed

(<short> object_model_targets_destroyed <object> <string_id>)
; returns TRUE if the specified model target is destroyed

(<void> object_enable_damage_section <object> <string_id> <real>)
; enables the specified damage section on the specified object with the specified initial vitality(mostly for debugging purposes)

(<void> object_disable_damage_section <object> <string_id>)
; disables the specified damage section on the specified object (mostly for debugging purposes)

(<void> object_damage_damage_section <object> <string_id> <real>)
; applies damage to a damage section, causing all manner of effects/constraint breakage to occur

(<void> object_cannot_die <object> <boolean>)
; Set whether the object can die from damage or not (as opposed to by scripting)

(<void> object_cannot_die_except_kill_volumes <object> <boolean>)
; Set whether the object can die from damage or not (as opposed to by scripting), except for kill volumes.

(<void> object_ignores_emp <object> <boolean>)
; Sets whether the object will by immune to EMP damage side effects (ie: vehicle disabling)

(<boolean> object_vitality_pinned <object>)
; returns TRUE if the object's vitality is currently pinned at some minimum value because it cannot die.

(<void> garbage_collect_now)
; causes all garbage objects except those visible to a player to be collected immediately

(<void> garbage_collect_unsafe)
; forces all garbage objects to be collected immediately, even those visible to a player (dangerous!)

(<void> garbage_collect_multiplayer)
; runs multiplayer garbage collection

(<void> object_cannot_take_damage <object_list>)
; prevents an object from taking damage

(<real> object_get_recent_body_damage <object>)
; Get object recent body damage

(<real> object_get_recent_shield_damage <object>)
; Get object recent shield damage

(<void> object_can_take_damage <object_list>)
; allows an object to take damage again

(<void> object_immune_to_friendly_damage <object_list> <boolean>)
; controls whether an object takes damage from friendly objects

(<void> object_cinematic_lod <object> <boolean>)
; makes an object use the highest lod for the remainder of the levels' cutscenes.

(<void> object_cinematic_collision <object> <boolean>)
; makes an object not collide with other cinematic collision objects.

(<void> object_cinematic_visibility <object> <boolean>)
; makes an object bypass visibility and always render during cinematics.

(<void> objects_predict <object_list>)
; loads textures/geometry/sounds necessary to present objects that are about to come on-screen

(<void> objects_predict_high <object_list>)
; loads textures/geometry/sounds necessary to present objects that are about to come on-screen

(<void> objects_predict_low <object_list>)
; loads textures/geometry/sounds necessary to present objects that are about to come on-screen

(<void> object_type_predict_high <object_definition>)
; loads textures necessary to draw an object that's about to come on-screen.

(<void> object_type_predict_low <object_definition>)
; loads textures necessary to draw an object that's about to come on-screen.

(<void> object_type_predict <object_definition>)
; loads textures necessary to draw an object that's about to come on-screen.

(<void> object_teleport <object> <cutscene_flag>)
; moves the specified object to the specified flag.

(<void> object_teleport_to_ai_point <object> <point_reference>)
; moves the specified object to the specified ai point.

(<void> object_set_facing <object> <cutscene_flag>)
; turns the specified object in the direction of the specified flag.

(<void> object_set_shield <object> <real>)
; sets the shield vitality of the specified object (between 0 and 1).

(<void> object_set_shield_stun <object> <real>)
; set how long the shield will be stunned for, 0 is unstunned

(<void> object_set_shield_stun_infinite <object>)
; make this objects shield be stunned permanently

(<void> object_set_permutation <object> <string_id> <string_id>)
; sets the desired region (use "" for all regions) to the permutation with the given name, e.g. (object_set_permutation flood "right arm" ~damaged)

(<void> object_set_variant <object> <string_id>)
; sets the specified object to the specified model variant

(<void> object_set_region_state <object> <string_id> <model_state>)
; sets the desired region (use "" for all regions) to the model state with the given name, e.g. (object_set_region_state marine head destroyed)

(<void> object_set_model_state_property <object> <long> <boolean>)
; sets the desired region (use "" for all regions) to the model state with the given name, e.g. (object_set_region_state marine head destroyed)

(<boolean> objects_can_see_object <object_list> <object> <real>)
; returns true if any of the specified units are looking within the specified number of degrees of the object.

(<boolean> objects_can_see_flag <object_list> <cutscene_flag> <real>)
; returns true if any of the specified units are looking within the specified number of degrees of the flag.

(<real> objects_distance_to_object <object_list> <object>)
; returns minimum distance from any of the specified objects to the specified destination object. (returns -1 if there are no objects to check)

(<real> objects_distance_to_flag <object_list> <cutscene_flag>)
; returns minimum distance from any of the specified objects to the specified flag. (returns -1 if there are no objects, or no flag, to check)

(<real> objects_distance_to_point <object_list> <point_reference>)
; returns minimum distance from any of the specified objects to the specified flag. (returns -1 if there are no objects, or no flag, to check)

(<void> map_info)
; prints the map, zone set, active bsps, and current bsp

(<void> position_predict <real> <real> <real>)
; in: x, y, z position. loads textures/geometry/sounds necessary to present locations that are about to come on-screen.

(<void> shader_predict <shader>)
; in: shader name. loads textures necessary for a shader.

(<void> bitmap_predict <bitmap>)
; in: bitmap name. loads all the bitmaps in that bitmap group

(<void> script_recompile)
; recompiles scripts.

(<void> script_doc)
; saves a file called hs_doc.txt with parameters for all script commands.

(<void> help <string>)
; prints a description of the named function.

(<object_list> game_engine_objects)
; returns a list of the special game engine objects

(<short> random_range <short> <short>)
; returns a random value in the range [lower bound, upper bound)

(<real> real_random_range <real> <real>)
; returns a random value in the range [lower bound, upper bound)

(<void> physics_constants_reset)
; resets all physics constants to earthly values

(<void> physics_set_gravity <real>)
; set global gravity acceleration relative to halo standard gravity

(<void> physics_set_velocity_frame <real> <real> <real>)
; sets a local frame of motion for updating physics of things that wish to respect it

(<void> physics_disable_character_ground_adhesion_forces <real>)
; turn off ground adhesion forces so you can play tricks with gravity

(<void> havok_debug_start)
; start up the havok visual debugger
; WARNING: using this function will make the film of this game go out of sync

(<void> havok_debug_stop)
; stops the havok debug capture

(<void> havok_dump_world <string> <boolean>)
; dump the state of the havok world, with our without a movie

(<void> havok_dump_world_close_movie)
; end the capture of a havok dump movie

(<void> havok_profile_start)
; start profiling havok

(<void> havok_profile_stop)
; stop profiling havok, and save the results

(<void> havok_profile_range <long> <long>)
; captures timers and a movie of a specific tick range

(<void> havok_reset_allocated_state)
; strips down and builds back up all allocated havok memory

(<void> breakable_surfaces_enable <boolean>)
; enables or disables breakability of all breakable surfaces on level

(<void> breakable_surfaces_reset)
; restores all breakable surfaces

(<boolean> recording_play <unit> <cutscene_recording>)
; make the specified unit run the specified cutscene recording.

(<boolean> recording_play_and_delete <unit> <cutscene_recording>)
; make the specified unit run the specified cutscene recording, deletes the unit when the animation finishes.

(<boolean> recording_play_and_hover <vehicle> <cutscene_recording>)
; make the specified vehicle run the specified cutscene recording, hovers the vehicle when the animation finishes.

(<void> recording_kill <unit>)
; kill the specified unit's cutscene recording.

(<short> recording_time <unit>)
; return the time remaining in the specified unit's cutscene recording.

(<boolean> render_lights <boolean>)
; enables/disables dynamic lights

(<void> print_light_state)
; outputs text light state

(<void> render_lights_enable_cinematic_shadow <boolean> <object> <string_id> <real>)
; enable/disable the specified unit to receive cinematic shadows where the shadow is focused about a radius around a marker name

(<void> texture_camera_set_object_marker <object> <string_id> <real>)
; sets the render texture camera to a given object marker

(<void> texture_camera_set_position <real> <real> <real>)
; sets the render texture camera position

(<void> texture_camera_set_target <real> <real> <real>)
; sets the render texture camera target

(<void> texture_camera_attach_to_object <object> <string_id>)
; attaches the render texture camera to a given object marker

(<void> texture_camera_target_object <object> <string_id>)
; targets the render texture camera to view a given object marker

(<void> texture_camera_position_world_offset <real> <real> <real>)
; adds a worldspace offset to the current texture camera position

(<void> texture_camera_on)
; turns on the render texture camera

(<void> texture_camera_bink)
; turns on the render texture camera and renders a bink to it

(<void> texture_camera_off)
; turns off the render texture camera

(<void> texture_camera_set_aspect_ratio <real>)
; sets the texture camera aspet ratio

(<void> texture_camera_set_resolution <long> <long>)
; sets the texture camera render resolution

(<void> texture_camera_render_mode <long>)
; switches the texture camera render mode

(<void> texture_camera_set_fov <real>)
; sets the field of view on the texture camera, in degrees

(<void> texture_camera_set_fov_frame_target <real>)
; zooms the field of view to frame the target, with target zoom factor to zoom closer

(<void> texture_camera_enable_dynamic_lights <boolean>)
; toggle rendering of dynamic lights in the texture camera

(<void> hud_camera_on <long>)
; turns on the hud camera

(<void> hud_camera_off <long>)
; turns off the hud camera

(<void> hud_camera_set_position <long> <real> <real> <real>)
; sets the render texture camera position

(<void> hud_camera_set_target <long> <real> <real> <real>)
; sets the render texture camera target

(<void> hud_camera_attach_to_object <long> <object> <string_id>)
; attaches the render texture camera to a given object marker

(<void> hud_camera_target_object <long> <object> <string_id>)
; targets the render texture camera to view a given object marker

(<void> hud_camera_structure <long> <boolean>)
; toggle rendering of structure in the hud camera

(<void> hud_camera_highlight_object <long> <object> <real> <real> <real> <real>)
; highlights an object in the given color

(<void> hud_camera_clear_objects <long>)
; clears all objects

(<void> hud_camera_spin_around <long> <object>)
; makes the hud camera spin around the given object

(<void> hud_camera_from_player_view <long>)
; aligns the hud camera to the player camera

(<void> hud_camera_window <long> <real> <real> <real> <real>)
; sets the render window of the hud camera (0...1)

(<void> render_debug_texture_camera <boolean>)
; toggles displaying the texture camera in the corner of the screen

(<void> render_debug_cheap_particles <boolean>)
; toggles displaying the cheap particle buffer in the corner of the screen

(<void> render_debug_rain_occlusion <boolean>)
; toggles displaying the rain occlusion in the corner of the screen

(<void> render_debug_rain_fog <boolean>)
; toggles rendering rain fog

(<void> debug_rain_toggle)
; toggles rain debug modes

(<void> weather_animate <string_id> <real> <real>)
; turns on the named weather to a specified amount in the given seconds

(<void> weather_animate_force <string_id> <real> <real>)
; turns on the named weather to a specified amount in the given seconds

(<void> debug_structure_cluster <long> <long>)
; specify a structure and cluster to debug

(<void> render_debug_structure_cluster_fog <long>)
; enables cluster fog debugging

(<void> render_debug_structure_fog_plane <long>)
; enables fog plane debugging

(<void> render_debug_structure_fog_plane_infinite_extent <long>)
; enables fog plane debugging

(<void> render_debug_structure_fog_zone <long>)
; enabled fog zone debugging

(<void> render_debug_structure_fog_zone_floodfill <long>)
; enables fog zone debugging

(<void> render_debug_structure_all_fog_planes <boolean>)
; enables fog plane debugging (all)

(<void> render_debug_structure_all_cluster_errors <boolean>)
; enables cluster error debugging (all)

(<void> render_debug_structure_line_opacity <real> <real> <real> <real>)
; sets the opacity (0 is default)

(<void> render_debug_structure_text_opacity <real> <real> <real> <real>)
; sets the opacity (0 is default)

(<void> render_debug_structure_opacity <real> <real> <real> <real>)
; sets the opacity (0 is default)

(<void> render_debug_structure_non_occluded_fog_planes <boolean>)
; controls non-occluded fog plane debugging

(<void> render_debug_structure_lightmaps_use_pervertex)
; sets the lightmap preference to per-vertex, ignores per-pixel if available

(<void> render_debug_structure_lightmaps_use_reset)
; resets the lightmap preference setting and updates the internal lightmap bsp data if necessary

(<void> render_debug_structure_lightmaps_sample_enable)
; enables visualization of match samples if available

(<void> render_debug_structure_lightmaps_sample_disable)
; disables visualization of match samples

(<void> render_debug_query_object_bitmaps <string>)
; substring of object definition name to spew out it's debug usage

(<void> render_debug_query_bsp_resources <long> <boolean>)
; BSP index and whether to spit out all bitmaps used

(<void> render_debug_query_all_object_resources)
; Outputs text of texture and geometry memory usage

(<void> render_debug_text_using_simple_font <boolean>)
; toggles use of the much faster simple_font system for debug text rendering

(<void> render_postprocess_color_tweaking_reset)
; resets hue saturation filters to default

(<void> render_debug_wrinkle_weights_a <real> <real> <real> <real>)
; manually set wrinkle weights for mask a

(<void> render_debug_wrinkle_weights_b <real> <real> <real> <real>)
; manually set wrinkle weights for mask b

(<void> render_debug_wrinkle_weights_from_console <boolean>)
; toggles whether debug wrinkle weights come from animation data or console commands

(<void> scenery_animation_start <scenery> <animation_graph> <string_id>)
; starts a custom animation playing on a piece of scenery

(<void> scenery_animation_start_loop <scenery> <animation_graph> <string_id>)
; starts a custom looping animation playing on a piece of scenery

(<void> scenery_animation_start_relative <scenery> <animation_graph> <string_id> <object>)
; starts a custom animation playing on a piece of scenery relative to a parent object

(<void> scenery_animation_start_relative_loop <scenery> <animation_graph> <string_id> <object>)
; starts a custom looping animation playing on a piece of scenery relative to a parent object

(<void> scenery_animation_start_at_frame <scenery> <animation_graph> <string_id> <short>)
; starts a custom animation playing on a piece of scenery at a specific frame

(<void> scenery_animation_start_relative_at_frame <scenery> <animation_graph> <string_id> <object> <short>)
; starts a custom animation playing on a piece of scenery relative to a specific cutscene flag at a specific frame

(<void> scenery_animation_idle <scenery>)
; starts the idle animation (if any) for a piece of scenery

(<short> scenery_get_animation_time <scenery>)
; returns the number of ticks remaining in a custom animation (or zero, if the animation is over).

(<void> unit_can_blink <unit> <boolean>)
; allows a unit to blink or not (units never blink when they are dead)

(<void> unit_set_active_camo <unit> <boolean> <real>)
; enable or disable active camo for the given unit over the specified number of seconds

(<void> unit_open <unit>)
; opens the hatches on the given unit

(<void> unit_close <unit>)
; closes the hatches on a given unit

(<void> unit_kill <unit>)
; kills a given unit, no saving throw

(<void> unit_kill_silent <unit>)
; kills a given unit silently (doesn't make them play their normal death animation or sound)

(<boolean> unit_is_emitting <unit>)
; returns whether or not the given unit is current emitting an ai

(<boolean> unit_is_emp_stunned <unit>)
; This will return whether the unit is stunned by EMP damage

(<short> unit_get_custom_animation_time <unit>)
; returns the number of ticks remaining in a unit's custom animation (or zero, if the animation is over).

(<void> unit_stop_custom_animation <unit>)
; stops the custom animation running on the given unit.

(<boolean> custom_animation <unit> <animation_graph> <string_id> <boolean>)
; starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)

(<boolean> custom_animation_loop <unit> <animation_graph> <string_id> <boolean>)
; starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)

(<boolean> custom_animation_relative <unit> <animation_graph> <string_id> <boolean> <object>)
; starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)

(<boolean> custom_animation_relative_loop <unit> <animation_graph> <string_id> <boolean> <object>)
; starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)

(<boolean> custom_animation_list <object_list> <animation_graph> <string_id> <boolean>)
; starts a custom animation playing on a unit list (interpolates into animation if last parameter is TRUE)

(<boolean> unit_custom_animation_at_frame <unit> <animation_graph> <string_id> <boolean> <short>)
; starts a custom animation playing on a unit at a specific frame index(interpolates into animation if next to last parameter is TRUE)

(<boolean> unit_custom_animation_relative_at_frame <unit> <animation_graph> <string_id> <string_id> <boolean> <short>)
; starts a custom animation playing on a unit relative to a specific cutscene flag at a specific frame index(interpolates into animation if next to last parameter is TRUE)

(<boolean> unit_is_playing_custom_animation <unit>)
; returns TRUE if the given unit is still playing a custom animation

(<boolean> unit_has_mandibles_hidden <unit>)
; returns TRUE if the given unit needs a mandible replacement

(<void> animation_capture_set_file_name <string>)
; sets the file name used for the animation capture

(<void> animation_capture_set_origin_object_name <string_id>)
; sets the name of the object that will be used as the capture origin

(<void> animation_capture_start_recording)
; starts capturing animation on the object currently possessed by the player

(<void> animation_capture_stop_recording)
; stops capturing animation on the object currently possessed by the player

(<boolean> sync_action_create <unit> <string_id>)
; This will spawn all actors necessary to play a sync action and play it

(<boolean> object_running_sync_action <object> <string_id>)
; Returns true if the given object is running the named sync action

(<void> object_set_custom_animations_hold_on_last_frame <boolean>)
; changes the default behavior for custom animations

(<void> object_set_custom_animations_prevent_lipsync_head_movement <boolean>)
; when true, prevents lipsync from bobbing the head during custom animations. default is true.

(<boolean> preferred_animation_list_add <object> <string_id>)
; adds an animation into the 'preferred list' of animations

(<void> preferred_animation_list_clear)
; clears the 'preferred list' of animations

(<short> unit_get_team_index <unit>)
; returns the team index of the unit, returns -1 if the unit does not have a team

(<void> unit_aim_without_turning <unit> <boolean>)
; allows a unit to aim in place without turning

(<void> unit_set_enterable_by_player <unit> <boolean>)
; can be used to prevent the player from entering a vehicle

(<boolean> unit_get_enterable_by_player <unit>)
; returns true if a player may enter the vehicle

(<void> unit_only_takes_damage_from_players_team <unit> <boolean>)
; used for the tartarus boss fight

(<void> unit_enter_vehicle <unit> <vehicle> <string_id>)
; puts the specified unit in the specified vehicle (in the named seat)

(<void> unit_enter_vehicle_immediate <unit> <vehicle> <string_id>)
; puts the specified unit in the specified vehicle (in the named seat)

(<void> unit_falling_damage_disable <unit> <boolean>)
; disables falling damage on unit

(<boolean> unit_in_vehicle_type <unit> <long>)
; returns true if the unit is in a vehicle that matches the specified vehicle type

(<short> object_get_turret_count <object>)
; returns the number of turrets attached to the given object

(<vehicle> object_get_turret <object> <short>)
; returns the nth turret attached to the given object

(<void> unit_board_vehicle <unit> <string_id>)
; Causes the given unit to attempt to board the named seat

(<void> unit_set_emotion <unit> <long> <real> <real>)
; sets a unit's facial expression (-1 is none, other values depend on unit)

(<void> unit_set_emotion_by_name <unit> <string_id> <real> <real>)
; sets a unit's facial expression by name with weight and transition time

(<void> unit_enable_eye_tracking <unit> <boolean>)
; enable/disable eye aiming on a unit

(<void> unit_set_integrated_flashlight <unit> <boolean>)
; sets a unit's flashlight on or off

(<boolean> unit_in_vehicle <unit>)
; returns true if the given unit is seated on a parent unit

(<vehicle> unit_get_vehicle <unit>)
; returns the parent vehicle if the given unit is seated in one.

(<void> vehicle_set_player_interaction <vehicle> <unit_seat_mapping> <boolean> <boolean>)
; Allows players/units to enter/exit given vehicle seat. Arguments <vehicle> <seat> <player_can_enter> <unit_can_exit>

(<void> vehicle_set_unit_interaction <vehicle> <unit_seat_mapping> <boolean> <boolean>)
; Allows players/units to enter/exit given vehicle seat. Arguments <vehicle> <seat> <player_can_enter> <unit_can_exit>

(<boolean> vehicle_test_seat_unit_list <vehicle> <unit_seat_mapping> <object_list>)
; tests whether the named seat has an object in the object list (use "" to test all seats for any unit in the list)

(<boolean> vehicle_test_seat_unit <vehicle> <unit_seat_mapping> <unit>)
; tests whether the named seat has a specified unit in it (use "" to test all seats for this unit)

(<boolean> vehicle_test_seat <vehicle> <unit_seat_mapping>)
; tests whether the named seat has any unit in it

(<void> unit_set_prefer_tight_camera_track <unit> <boolean>)
; sets the unit to prefer a tight camera track

(<boolean> unit_test_seat <unit> <unit_seat_mapping>)
; tests whether the named seat has any unit in it

(<void> unit_exit_vehicle <unit>)
; makes a unit exit its vehicle

(<void> unit_exit_vehicle <unit> <short>)
; makes a unit exit its vehicle (0 = normal exit to airborne, 1 = ejection, 2 = ejection + death, 3 = exit to ground)

(<void> unit_set_maximum_vitality <unit> <real> <real>)
; sets a unit's maximum body and shield vitality

(<void> units_set_maximum_vitality <object_list> <real> <real>)
; sets a group of units' maximum body and shield vitality

(<void> unit_set_current_vitality <unit> <real> <real>)
; sets a unit's current body and shield vitality

(<void> units_set_current_vitality <object_list> <real> <real>)
; sets a group of units' current body and shield vitality

(<short> vehicle_load_magic <object> <unit_seat_mapping> <object_list>)
; makes a list of units (named or by encounter) magically get into a vehicle, in the substring-specified seats (e.g. CD-passenger... empty string matches all seats)

(<short> vehicle_unload <object> <unit_seat_mapping>)
; makes units get out of an object from the substring-specified seats (e.g. CD-passenger... empty string matches all seats)

(<void> unit_set_animation_mode <unit> <string_id>)
; this unit will assume the named animation mode

(<void> magic_melee_attack)
; causes player's unit to start a melee attack

(<object_list> vehicle_riders <unit>)
; returns a list of all riders in a vehicle

(<unit> vehicle_driver <unit>)
; returns the driver of a vehicle

(<unit> vehicle_gunner <unit>)
; returns the gunner of a vehicle

(<real> unit_get_health <unit>)
; returns the health [0,1] of the unit, returns -1 if the unit does not exist

(<real> unit_get_shield <unit>)
; returns the shield [0,1] of the unit, returns -1 if the unit does not exist

(<short> unit_get_total_grenade_count <unit>)
; returns the total number of grenades for the given unit, 0 if it does not exist

(<boolean> unit_has_weapon <unit> <object_definition>)
; returns TRUE if the <unit> has <object> as a weapon, FALSE otherwise

(<boolean> unit_has_weapon_readied <unit> <object_definition>)
; returns TRUE if the <unit> has <object> as the primary weapon, FALSE otherwise

(<boolean> unit_has_any_equipment <unit>)
; returns TRUE if the <unit> has any equipment, FALSE otherwise

(<boolean> unit_has_equipment <unit> <object_definition>)
; returns TRUE if the <unit> has equipment <object> , FALSE otherwise

(<void> unit_lower_weapon <unit> <short>)
; lower the units weapon over x ticks

(<void> unit_raise_weapon <unit> <short>)
; raises the units weapon over x ticks

(<void> unit_drop_support_weapon <unit>)
; forces the given unit to drop its support weapon, if it is holding one

(<void> unit_spew_action <unit>)
; runs the spew unit action on the specified unit

(<void> unit_force_reload <unit>)
; Force the give unit to reload his weapon

(<void> animation_stats_dump)
; Dump usage information for the animations in the game

(<void> unit_animation_forced_seat <string_id>)
; all units controlled by the player will assume the given seat name (valid values are 'asleep', 'alert', 'stand', 'crouch' and 'flee')

(<void> unit_doesnt_drop_items <object_list>)
; prevents any of the given units from dropping weapons or grenades when they die

(<void> unit_impervious <object_list> <boolean>)
; prevents any of the given units from being knocked around or playing ping animations

(<void> unit_suspended <unit> <boolean>)
; stops gravity from working on the given unit

(<void> unit_add_equipment <unit> <starting_profile> <boolean> <boolean>)
; adds/resets the unit's health, shield, and inventory (weapons and grenades) to the named profile. resets if third parameter is true, adds if false. weapons will be marked as garbage if fourth parameter is true (for respawning equipment).

(<void> weapon_set_primary_barrel_firing <weapon> <boolean>)
; Forcefully fire a weapon

(<void> weapon_hold_trigger <weapon> <long> <boolean>)
; turns the trigger for a weapon  on/off

(<void> weapon_enable_warthog_chaingun_light <boolean>)
; turns the trigger for a weapon  on/off

(<void> device_set_never_appears_locked <device> <boolean>)
; changes a machine's never_appears_locked flag, but only if paul is a bertone

(<void> device_set_power <device> <real>)
; immediately sets the power of a named device to the given value

(<void> device_set_position_transition_time <device> <real>)
; immediately sets the power of a named device to the given value

(<real> device_get_power <device>)
; gets the current power of a named device

(<boolean> device_set_position <device> <real>)
; set the desired position of the given device (used for devices without explicit device groups)

(<real> device_get_position <device>)
; gets the current position of the given device (used for devices without explicit device groups)

(<void> device_set_position_immediate <device> <real>)
; instantaneously changes the position of the given device (used for devices without explicit device groups

(<real> device_group_get <device_group>)
; returns the desired value of the specified device group.

(<boolean> device_group_set <device> <device_group> <real>)
; changes the desired value of the specified device group.

(<void> device_group_set_immediate <device_group> <real>)
; instantaneously changes the value of the specified device group.

(<void> device_one_sided_set <device> <boolean>)
; TRUE makes the given device one-sided (only able to be opened from one direction), FALSE makes it two-sided

(<void> device_ignore_player_set <device> <boolean>)
; TRUE makes the given device ignore the player (won't open for players), FALSE makes it work for the player

(<void> device_operates_automatically_set <device> <boolean>)
; TRUE makes the given device open automatically when any biped is nearby, FALSE makes it not

(<void> device_closes_automatically_set <device> <boolean>)
; TRUE makes the given device close automatically after it has opened, FALSE makes it not

(<void> device_group_change_only_once_more_set <device_group> <boolean>)
; TRUE allows a device to change states only once

(<boolean> device_set_position_track <device> <string_id> <real>)
; set the desired position track animation to use (optional interpolation time onto track)

(<boolean> device_set_overlay_track <device> <string_id>)
; set the desired overlay animation to use

(<void> device_animate_position <device> <real> <real> <real> <real> <boolean>)
; animate the position over time

(<void> device_animate_overlay <device> <real> <real> <real> <real>)
; animate the overlay over time

(<void> cheat_all_weapons)
; drops all weapons near player

(<void> cheat_all_vehicles)
; drops all vehicles on player

(<void> cheat_teleport_to_camera)
; teleports player to camera location

(<void> cheat_active_camouflage <boolean>)
; gives the player active camouflage

(<void> cheat_active_camouflage_by_player <player> <boolean>)
; gives a specific player active camouflage

(<void> cheats_load)
; reloads the cheats.txt file

(<void> drop_safe <any_tag>)
; drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle

(<void> drop <string>)
; drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle

(<void> drop_variant <string> <string>)
; drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle using the specified variant name

(<void> drop_permutation <string> <string>)
; drops the named tag e.g. objects\characters\brute\brute.biped using the specified permutation. permutations are specified as a comma-delimited string of region=permutation pairs (e.g. region1=permutation1,region2=permutation2).

(<void> update_dropped_tag_permutation <string> <string>)
; updates the permutation for a previously dropped tag. permutations are specified as a comma-delimited string of region=permutation pairs (e.g. region1=permutation1,region2=permutation2).

(<void> ai_enable <boolean>)
; turns all AI on or off.

(<boolean> ai_enabled)
; returns whether AI is turned on or off.

(<void> ai_grenades <boolean>)
; turns grenade inventory on or off.

(<void> ai_dialogue_enable <boolean>)
; turn combat dialogue on/off

(<void> ai_dialogue_updating_enable <boolean>)
; enable updating of dialogue tags at runtime, based on stimuli

(<void> ai_player_dialogue_enable <boolean>)
; turn player combat dialogue on/off

(<void> ai_actor_dialogue_enable <ai> <boolean>)
; turn combat dialogue on/off for a particular ai type.

(<void> ai_actor_dialogue_effect_enable <ai> <boolean>)
; turn combat dialogue effects on/off for a particular ai type.

(<void> ai_infection_suppress <long>)
; disable infection for this number of ticks

(<void> ai_fast_and_dumb <boolean>)
; turn on/off perception performance hacks

(<void> ai_lod_full_detail_actors <short>)
; change the number of full detail AI characters we are allowed

(<void> ai_lod_full_detail_actors)
; display the number of full detail AI characters we are allowed

(<void> ai_force_full_lod <ai>)
; force the given AI to full detail LOD

(<void> ai_force_low_lod <ai>)
; force the given AI to low detail LOD

(<void> ai_clear_lod <ai>)
; reset the given AI's LOD overrides

(<void> ai_dialogue_log_reset)
; reset the dialogue log

(<void> ai_dialogue_log_dump <string>)
; dump a file of the given name with csv statistics on vocalizations

(<object> ai_get_object <ai>)
; returns the unit/object corresponding to the given actor

(<unit> ai_get_unit <ai>)
; returns the unit/object corresponding to the given actor

(<ai> ai_get_squad <ai>)
; returns the squad of the given actor. Invalid if the given ai is NOT an actor-type (i.e. is itself a squad or squad group or task

(<ai> ai_get_turret_ai <ai> <short>)
; returns an the ai controlling the Nth turret attached to the given ai (or its vehicle)

(<point_reference> ai_random_smart_point <point_reference> <real> <real> <real>)
; returns a point in the given point set that a player is probably going to be able to see. Args are [point set], [min distance], [max distance], [angle-from-forward], all relative to the player

(<point_reference> ai_nearest_point <object> <point_reference>)
; returns the nearest point in the given point set to the given object

(<long> ai_get_point_count <point_reference>)
; returns the number of points in the given point set

(<point_reference> ai_point_set_get_point <point_reference> <short>)
; returns Nth point in the point set

(<void> ai_debug_dump_behavior_tree <boolean>)
; DEBUG, DONT USE!

(<void> ai_place <ai>)
; places the specified squad on the map.

(<void> ai_place <ai> <short>)
; places the given number of members of the specified squad.

(<void> ai_place_in_limbo <ai>)
; places the specified squad on the map in limbo.

(<void> ai_place_in_limbo <ai> <short>)
; places the given number of members of the specified squad in limbo.

(<void> ai_place_in_vehicle <ai> <ai>)
; places the specified squad (1st arg) on the map in the vehicles belonging to the specified vehicle squad (2nd arg).

(<void> ai_cannot_die <ai> <boolean>)
; AI cannot die from damage (as opposed to by scripting)

(<boolean> ai_vitality_pinned <ai>)
; Returns true if the ai's units are ALL vitality pinned (see object_vitality_pinned)

(<void> ai_place_wave <long> <ai>)
; Places the specified wave name into squads defined as part of the given squad group

(<void> ai_place_wave <long> <ai> <short>)
; Places the given number of squads from the specified wave name into squads defined as part of the given squad group

(<void> ai_place_wave_in_limbo <long> <ai>)
; Places the specified wave name into squads defined as part of the given squad group in limbo

(<void> ai_place_wave_in_limbo <long> <ai> <short>)
; Places the given number of squads from the specified wave name into squads defined as part of the given squad group in limbo

(<void> ai_set_clump <ai> <short>)
; Force the given AI into a specific clump

(<void> ai_designer_clump_perception_range <real>)
; Override the maximum perception range of designer specified clumps

(<void> ai_designer_clump_targeting_group <short>)
; Force the designer specified clumps to only target a targeting group

(<ai> ai_index_from_spawn_formation <ai> <string_id>)
; Create an AI index from the given squad and spawn formation

(<void> ai_resurrect <object>)
; Resurrect the specified mission critical AI character.

(<void> ai_kill <ai>)
; instantly kills the specified encounter and/or squad.

(<void> ai_kill_silent <ai>)
; instantly and silently (no animation or sound played) kills the specified encounter and/or squad.

(<void> ai_kill_no_statistics <ai>)
; instantly and silently (no animation or sound played) kills the specified encounter and/or squad.

(<void> ai_erase <ai>)
; erases the specified encounter and/or squad.

(<void> ai_erase_all)
; erases all AI.

(<void> ai_disposable <ai> <boolean>)
; enables or disables automatic garbage collection for actors in the specified encounter and/or squad.

(<void> ai_select <ai>)
; selects the specified squad.

(<void> ai_deselect)
; clears the selected encounter.

(<void> ai_set_deaf <ai> <boolean>)
; enables or disables hearing for actors in the specified encounter.

(<void> ai_set_blind <ai> <boolean>)
; enables or disables sight for actors in the specified encounter.

(<void> ai_set_weapon_up <ai> <boolean>)
; force actor to hold their weapon up, instead of lowering it when idle. this does NOT cause them to draw their weapon if stowed

(<void> ai_flood_disperse <ai> <ai>)
; Disperese a flood encounter, stimulating the various forms to break down into infections and transition to the new objective

(<void> ai_add_navpoint <ai> <boolean>)
; Add/remove hud navpoint to the actor or squad

(<void> ai_magically_see <ai> <ai>)
; Make one squad magically aware of another.

(<void> ai_magically_see_object <ai> <object>)
; Make a squad magically aware of a particular object.

(<void> ai_set_active_camo <ai> <boolean>)
; Turn on active camoflage on actor/squad/squad-group

(<void> ai_suppress_combat <ai> <boolean>)
; Turn on/off combat suppression on actor/squad/squad-group

(<void> ai_engineer_explode <ai>)
; Register an explosion stimulus with all specified actors, causing engineers to explode

(<void> ai_grunt_kamikaze <ai>)
; Register a kamikaze stimulus with all specified actors, causing grunts to GO WILD

(<void> ai_squad_enumerate_immigrants <ai> <boolean>)
; If someone migrates (or simply changes) into this squad, consider him a full member of the squad

(<void> ai_migrate <ai> <ai>)
; makes all or part of an encounter move to another encounter.

(<void> ai_migrate_persistent <ai> <ai>)
; makes all or part of an encounter move to another encounter, and all script commands will function on the migrated squad

(<void> ai_allegiance <team> <team>)
; creates an allegiance between two teams.

(<void> ai_allegiance_remove <team> <team>)
; destroys an allegiance between two teams.

(<void> ai_allegiance_break <team> <team>)
; fake a betrayal incident between two teams

(<void> ai_braindead <ai> <boolean>)
; makes a group of actors braindead, or restores them to life (in their initial state)

(<void> ai_braindead_by_unit <object_list> <boolean>)
; makes a list of objects braindead, or restores them to life. if you pass in a vehicle index, it makes all actors in that vehicle braindead (including any built-in guns)

(<void> ai_disregard <object_list> <boolean>)
; if TRUE, forces all actors to completely disregard the specified units, otherwise lets them acknowledge the units again

(<void> ai_disregard_orphans <ai>)
; the given AI will discard all orphan props, terminating search

(<void> ai_prefer_target <object_list> <boolean>)
; if TRUE, *ALL* enemies will prefer to attack the specified units. if FALSE, removes the preference.

(<void> ai_prefer_target_team <ai> <team>)
; the given ai will prefer the indicated team.

(<void> ai_prefer_target_ai <ai> <ai> <boolean>)
; the given ai (actor, squad, task, etc.) will prefer the given other ai (actor, squad, task, etc.)

(<void> ai_set_targeting_group <ai> <short>)
; Set the AI to only target other guys of targeting group X

(<void> ai_set_targeting_group <ai> <short> <boolean>)
; Set the AI to only target other guys of targeting group X (true/false whether the player should also be targeted)

(<void> ai_teleport_to_starting_location_if_outside_bsp <ai>)
; PLEASE USE ai_teleport_to_spawn_point_if_outside_bsp INSTEAD

(<void> ai_teleport_to_spawn_point_if_outside_bsp <ai>)
; teleports a group of actors to the spawn points of their current squad(s) if they are currently outside the world.

(<void> ai_teleport <ai> <point_reference>)
; teleports the given squad to the given point.

(<void> ai_bring_forward <object> <real>)
; teleports the given mission critical AI character to the current encounter, if beyond the given range from a player

(<void> ai_renew <ai>)
; refreshes the health and grenade count of a group of actors, so they are as good as new

(<void> ai_force_active <ai> <boolean>)
; forces an encounter to remain active (i.e. not freeze in place) even if there are no players nearby

(<void> ai_force_active_by_unit <unit> <boolean>)
; forces a named actor that is NOT in an encounter to remain active (i.e. not freeze in place) even if there are no players nearby

(<void> ai_exit_limbo <ai>)
; remove the give AI from limbo, generally induced by spawning in limbo

(<void> ai_playfight <ai> <boolean>)
; sets an encounter to be playfighting or not

(<void> ai_reconnect)
; reconnects all AI information to the current structure bsp (use this after you create encounters or command lists in sapien, or place new firing points or command list points)

(<void> ai_berserk <ai> <boolean>)
; forces a group of actors to start or stop berserking

(<void> ai_set_team <ai> <team>)
; makes an encounter change to a new team

(<void> ai_allow_dormant <ai> <boolean>)
; either enables or disables automatic dormancy for a group of actors

(<boolean> ai_is_attacking <ai>)
; returns whether a platoon is in the attacking mode (or if an encounter is specified, returns whether any platoon in that encounter is attacking)

(<short> ai_fighting_count <ai>)
; return the number of actors that are fighting in a squad or squad_group

(<short> ai_living_count <ai>)
; return the number of living actors in the specified encounter and/or squad.

(<real> ai_living_fraction <ai>)
; return the fraction [0-1] of living actors in the specified encounter and/or squad.

(<short> ai_in_vehicle_count <ai>)
; return the number of living actors in the specified encounter and/or squad who are currently in a vehicle.

(<short> ai_body_count <ai>)
; return the number of actors who have died in the completiong of the given objective/task.

(<real> ai_strength <ai>)
; return the current strength (average body vitality from 0-1) of the specified encounter and/or squad.

(<short> ai_swarm_count <ai>)
; return the number of swarm actors in the specified encounter and/or squad.

(<short> ai_nonswarm_count <ai>)
; return the number of non-swarm actors in the specified encounter and/or squad.

(<object_list> ai_actors <ai>)
; converts an ai reference to an object list.

(<boolean> ai_allegiance_broken <team> <team>)
; returns whether two teams have an allegiance that is currently broken by traitorous behavior

(<short> ai_spawn_count <ai>)
; returns the number of actors spawned in the given squad or squad group

(<ai> object_get_ai <object>)
; returns the ai attached to this object, if any

(<boolean> ai_set_task <ai> <string_id> <string_id>)
; Sets the current task of the current task

(<boolean> ai_set_objective <ai> <string_id>)
; Sets the squad's current objective

(<short> ai_task_status <ai>)
; Returns the status of the given objective/task. See ai_task_status_<tab> for return codes.

(<boolean> ai_set_task_condition <ai> <boolean>)
; Latches the task condition true or false

(<boolean> ai_leadership <ai>)
; Returns whether a squad or task has a leader

(<boolean> ai_leadership_all <ai>)
; Returns whether a task or any of its children has a leader

(<short> ai_task_count <ai>)
; Returns the living count of the AI in the given task OR any of its children

(<void> ai_reset_objective <ai>)
; Completely reset the given objective, task or task hierarchy (if passed a gate task).

(<void> ai_squad_patrol_objective_disallow <ai> <boolean>)
; Disallow the selection of an objective by any squad patrol.

(<void> ai_place_cue <string_id>)
; Place the named AI cue

(<void> ai_remove_cue <string_id>)
; Remove the named AI cue

(<boolean> generate_pathfinding)
; Generate pathfinding info for all structure bsps in the current scenario

(<void> ai_render_paths_all)
; Turns on raw, smoothed, avoided paths and avoidance obstacles

(<void> ai_render_evaluations_shading_none)
; Render no FP evaluation shading

(<void> ai_render_evaluations_shading_all)
; Render all FP evaluation shading

(<void> ai_render_evaluations_shading <firing_point_evaluator>)
; Add a specific FP evaluation shading to render

(<void> ai_activity_set <ai> <string_id>)
; Set the given activity running on the given AI(s)

(<void> ai_activity_abort <ai>)
; Aborts the activities running on the given AI(s)

(<void> ai_object_set_team <object> <team>)
; flag an object as being owned by a certain team

(<void> ai_object_set_targeting_bias <object> <real>)
; sets the targeting preference for this object in relation to other equal targets [-1, 1]

(<void> ai_object_set_targeting_ranges <object> <real> <real>)
; sets override weapon ranges for enemies attacking this object <min> <max>

(<void> ai_object_enable_targeting_from_vehicle <object> <boolean>)
; if enabled, actors in vehicles are not allowed to target this object <object> <true/false>

(<void> ai_object_enable_grenade_attack <object> <boolean>)
; if disabled, actors cannot attack the object with grenades <object> <true/false>

(<vehicle> ai_vehicle_get <ai>)
; Returns the vehicle that the given actor is in.

(<vehicle> ai_vehicle_get_from_starting_location <ai>)
; PLEASE START USING ai_vehicle_get_from_spawn_point INSTEAD

(<vehicle> ai_vehicle_get_from_spawn_point <ai>)
; Returns the vehicle that was spawned at the given spawn point

(<short> ai_vehicle_get_squad_count <ai>)
; Returns the number of vehicles in the given squad.

(<vehicle> ai_vehicle_get_from_squad <ai> <short>)
; Returns the nth vehicle from the given squad.

(<boolean> ai_vehicle_reserve_seat <vehicle> <unit_seat_mapping> <boolean>)
; Reserves the given seat on the given vehicle (so that AI may not enter it

(<boolean> ai_vehicle_reserve <vehicle> <boolean>)
; Reserves the given vehicle (so that AI may not enter it

(<ai> ai_player_get_vehicle_squad <unit>)
; Returns the squad (if any) of the vehicle the player is riding in (note, the argument is a UNIT)

(<short> ai_vehicle_count <ai>)
; Returns the number of vehicles being driven / ridden by the actors in the given squad/squad-group/task/etc.

(<boolean> ai_carrying_player <ai>)
; Returns whether any of the given AI are in a vehicle with the player

(<boolean> player_in_vehicle <vehicle>)
; Returns whether any players are in the given vehicle

(<boolean> ai_player_needs_vehicle <player>)
; Returns if the given player needs a vehicle at the moment

(<boolean> ai_player_any_needs_vehicle)
; Returns if any player needs a vehicle at the moment

(<void> ai_vehicle_enter <ai> <unit> <unit_seat_mapping>)
; tells a group of actors to get into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles

(<void> ai_vehicle_enter <ai> <unit>)
; tells a group of actors to get into a vehicle... does not interrupt any actors who are already going to vehicles

(<void> ai_vehicle_enter_immediate <ai> <unit> <unit_seat_mapping>)
; the given group of actors is snapped into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles

(<void> ai_vehicle_enter_immediate <ai> <unit>)
; the given group of actors is snapped into a vehicle

(<short> ai_enter_squad_vehicles <ai>)
; Instructs the ai in the given squad to get in all their vehicles

(<void> ai_vehicle_exit <ai> <unit_seat_mapping>)
; tells a group of actors to get out of any vehicles that they are in (if their seat matches the substring)

(<void> ai_vehicle_exit <ai>)
; tells a group of actors to get out of any vehicles that they are in

(<boolean> vehicle_overturned <vehicle>)
; Returns true if the vehicle is overturned

(<void> vehicle_flip <vehicle>)
; Flips an overturned vehicle

(<ai> ai_squad_group_get_squad <ai> <short>)
; Returns the nth squad from a given squad group.

(<short> ai_squad_group_get_squad_count <ai>)
; Returns the number of squads in a given squad group

(<void> ai_squad_patrol_enable <string_id> <boolean>)
; Enable/disable a squad patrol

(<short> ai_combat_status <ai>)
; Returns the highest integer combat status in the given squad-group/squad/actor

(<void> ai_set_combat_status <ai> <short>)
; Set the combat status for the given AI

(<boolean> flock_start <string_id>)
; The flock starts producing boids

(<boolean> flock_stop <string_id>)
; The flock stops producing boids

(<boolean> flock_create <string_id>)
; Create the given flock

(<boolean> flock_delete <string_id>)
; Delete the given flock

(<boolean> flock_destroy <string_id>)
; Destroy the given flock, killing all members randomly over time.

(<boolean> flock_definition_set <string_id> <any_tag>)
; Set the definition of the given flock to the given tag

(<void> flock_unperch <string_id>)
; Cause the given flock to unperch (if it is perched)

(<void> flock_set_targeting_group <string_id> <short>)
; Set the flock to only target other guys in targeting group X

(<void> flock_destination_set_enabled <string_id> <string_id> <boolean>)
; Sets the enabled flag on the flock destination

(<void> flock_destination_set_position <string_id> <string_id> <point_reference>)
; Sets the position of a flock destination to the location of an ai point

(<void> flock_destination_copy_position <string_id> <string_id> <string_id>)
; Sets the position of one flock destination to the position of another flock destination

(<void> drop_ai <string> <string>)
; Drop an ai with the given weapon at the current camera position

(<boolean> mantini_create_runtime_squad <string>)
; Create a new squad definition entry with the given name. Arg: <squad_name> 

(<boolean> mantini_create_runtime_point_set <string>)
; Enables mantini to create new point sets in memory. ARG: <point_set_name>

(<boolean> mantini_add_runtime_point_to_set <string> <string> <real> <real> <real> <real>)
; Enables mantini to add a point to an in memory point set.  ARG: <point_set_name> <point_name> <x> <y> <yaw> <pitch>

(<boolean> mantini_add_runtime_point_to_set_from_camera <string> <string> <real> <real>)
; Enables mantini to add a point to an in memory point set along the current camera fwd collision point.  ARG: <point_set_name> <point_name> <yaw> <pitch>

(<boolean> mantini_add_starting_location_to_squad <string> <string> <long> <point_reference>)
; Enables mantini to add a spawn point to a squad identified by an AI point.  ARG: <squad_name> <starting loc name> <cell_index> <pointref>

(<boolean> mantini_add_starting_location_to_squad_from_camera <string> <string> <long> <real>)
; Enables mantini to add a spawn point to a squad identified from the camera position.  ARG: <squad_name> <starting loc name> <cell_index> <offset in wus>

(<long> mantini_add_cell_to_runtime_squad <string> <string>)
; Add a character to a runtime squad. Arg: <squad_name> <character tag>

(<long> mantini_get_runtime_squad_cell_count <string>)
; Get the cell count of a runtime squad. Arg: <squad_name> 

(<boolean> mantini_set_squad_team <string> <team>)
; Set the team for a runtime squad. Arg: <squad_name> <team>

(<boolean> mantini_set_spawn_point_weapons <ai> <string> <string>)
; Set primary and secondary weapon for a spawn point. Arg: <spawn_point> <primary weapon tag> <secondary weapon tag>

(<boolean> mantini_set_spawn_point_vehicle <ai> <string>)
; Set vehicle for a spawn point. Arg: <spawn_point> <vehicle tag>

(<boolean> mantini_set_spawn_point_variants <ai> <string_id> <string_id>)
; Set actor and vehicle variants for spawn point. Arg: <spawn_point> <actor variant> <vehicle variant>

(<boolean> mantini_set_squad_cell_spawn_count <string> <long> <long>)
; Set cell spawn count. Arg: <squad name> <cell index> <spawn count>

(<boolean> mantini_clear_runtime_squads)
; Clears all runtime created squads. Returns false if there were none to clear

(<boolean> mantini_remove_pointset <string>)
; Clears all point sets after a pointset that contains the specified substring. Returns false if there were none to clear. Arg: <substring to search for in pointset name>

(<void> ai_verify_tags)
; Verifies state of ai-related tags (e.g. orders, squads, zones, etc.)

(<boolean> ai_wall_lean <ai>)
; Makes the actor lean against a wall RIGHT NOW

(<void> ai_fire_dialogue_event <ai> <string> <object>)
; Runs a dialogue event on actor closest to a player

(<void> ai_play_vocalization <string_id>)
; Runs a dialogue event on actor closest to a player

(<void> ai_play_vocalization_on_team <string_id> <team>)
; Runs a dialogue event on actor closest to a player that's allied with the given team

(<real> ai_play_line <ai> <ai_line>)
; Play the given mission dialogue line on the given ai

(<real> ai_play_line_at_player <ai> <ai_line>)
; Play the given mission dialogue line on the given ai, directing the ai's gaze at the nearest visible player

(<real> ai_play_line_on_object <object> <ai_line>)
; Play the given mission dialogue line on the given object (uses first available variant)

(<real> ai_play_line_on_object_for_team <object> <ai_line> <mp_team>)
; Play the given mission dialogue line on the given object (uses first available variant) if anyone on the local box is on the specified team

(<short> ai_play_line_on_point_set <string_id> <point_reference> <short>)
; Play the given line on the N closest point to players in the given point set

(<short> ai_play_line_on_point_set <string_id> <point_reference> <short> <string_id>)
; Play the given line (with the given 3-letter variant) on the N closest point to players in the given point set

(<void> campaign_metagame_time_pause <boolean>)
; pause meta game time, while paused your completion multiplier stops going down

(<void> campaign_metagame_award_points <player> <long>)
; award bonus metagame points to a player

(<void> campaign_metagame_award_skull <player> <skull>)
; award a skull to a player

(<boolean> campaign_metagame_enabled)
; TRUE if the metagame is enabled

(<boolean> campaign_survival_enabled)
; TRUE if survival mode is enabled

(<void> thespian_performance_test <string_id>)
; Starts a performance with the given name, spawns needed actors

(<void> thespian_folder_activate <folder>)
; Activates inactive performances inside a given folder name, waits for actors

(<void> thespian_folder_deactivate <folder>)
; Deactivates active performances inside a given folder name

(<void> thespian_performance_activate <string_id>)
; Activates an inactive performance with a given name, waits for actors

(<boolean> thespian_performance_setup_and_begin <string_id> <string_id> <real>)
; Finds all of the actors needed for the performance, and then starts the performance

(<long> performance_new <string_id> <boolean>)
; Creates a new instance of a performance given a performance definition name. If last argument true, allows duplicates

(<void> cast_squad_in_performance <long> <ai>)
; Finds and assigns roles for actors in the given squad in a performance

(<void> performance_begin <long>)
; Starts the script for a performance if all of the critical roles have been cast

(<void> thespian_performance_kill_by_name <string_id>)
; Kills any performance with the given name

(<void> thespian_performance_kill_by_ai <ai>)
; Kills any performance that has cast an ai from the given squad

(<void> thespian_fake_task_transition <string_id> <string_id>)
; Unblocks an actor waiting looping animation that's waiting on a task transition

(<void> performance_play_line_by_id <short>)
; play a line (referenced by line id) in the performance.

(<void> performance_play_line <string_id>)
; play a line (referenced by name) in the performance.

(<ai> performance_get_actor_by_index <short>)
; Get the actor in the given participant slot of a performace

(<ai> performance_get_actor <string_id>)
; Get the actor who playing the given named role in a performance

(<short> performance_get_actor_count)
; Get the total number of actors currently in the performance

(<short> performance_get_role_count)
; Get the total number of roles in the performance

(<short> performance_get_line_count)
; Get the total number of lines in the performance

(<short> performance_get_last_played_line_index)
; Get the index of the last line played in the performance

(<boolean> thespian_performance_is_blocked)
; Returns true if a line is executing that is blocking

(<ai> actor_from_performance <long> <string_id>)
; Get a specified actor from a performance given by its runtime index

(<void> ai_player_add_fireteam_squad <unit> <ai>)
; Adds the given squad to the given player's fire team

(<void> ai_player_remove_fireteam_squad <unit> <ai>)
; Removes the given squad from the given player's fire team

(<void> ai_player_set_fireteam_max <unit> <short>)
; Sets the maximum number of actors allowed in the players fire team.

(<void> ai_player_set_fireteam_no_max <unit>)
; Sets the maximum number of actors allowed in the players fire team to unlimited.

(<void> ai_player_set_fireteam_max_squad_absorb_distance <unit> <real>)
; Sets the maximum distance at which this squad can absorb nearby squads.

(<void> ai_set_fireteam_absorber <ai> <boolean>)
; enables or disables fireteam absortion for a given squad in the specified encounter.

(<void> ai_set_fireteam_fallback_squad <unit> <ai>)
; Sets the squad that AI will migrate into if the player dies.

(<boolean> ai_is_in_fireteam <ai>)
; Returns true if the given ai is in a fire team.

(<void> cs_run_command_script <ai> <ai_command_script>)
; Causes the specified actor(s) to start executing a command script immediately (discarding any other command scripts in the queue)

(<void> cs_queue_command_script <ai> <ai_command_script>)
; Add a command script onto the end of an actor's command script queue

(<void> cs_stack_command_script <ai> <ai_command_script>)
; Push a command script to the top of the actor's command script queue

(<boolean> vs_cast <ai> <boolean> <short> <string_id>)
; Cast 1 actor for a vignette (at the given priority, higher = more important)

(<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id>)
; Cast 2 actors for a vignette (at the given priority, higher = more important)

(<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id>)
; Cast 3 actors for a vignette (at the given priority, higher = more important)

(<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id>)
; Cast 4 actors for a vignette (at the given priority, higher = more important)

(<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id> <string_id>)
; Cast 5 actors for a vignette (at the given priority, higher = more important)

(<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id> <string_id> <string_id>)
; Cast 6 actors for a vignette (at the given priority, higher = more important)

(<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id> <string_id> <string_id> <string_id>)
; Cast 7 actors for a vignette (at the given priority, higher = more important)

(<ai> vs_role <short>)
; Returns the given member of the cast (as per more recent vs_cast call)

(<void> cs_abort_on_alert <boolean>)
; Command script ends prematurely when actor's combat status raises to 'alert' or higher

(<void> cs_abort_on_damage <boolean>)
; Command script ends prematurely when actor is damaged

(<void> cs_abort_on_combat_status <short>)
; Command script ends prematurely when actor's combat status rises to given level

(<void> cs_abort_on_vehicle_exit <boolean>)
; Command script ends prematurely when actor gets out of its vehicle

(<void> cs_abort_on_alert <boolean>)
; Command script ends prematurely when given actor's combat status raises to 'alert' or higher

(<void> cs_abort_on_alert <ai> <boolean>)
; Command script ends prematurely when given actor's combat status raises to 'alert' or higher

(<void> cs_abort_on_damage <boolean>)
; Command script ends prematurely when actor is damaged

(<void> cs_abort_on_damage <ai> <boolean>)
; Command script ends prematurely when actor is damaged

(<void> cs_abort_on_combat_status <short>)
; Command script ends prematurely when actor's combat status rises to given level

(<void> cs_abort_on_combat_status <ai> <short>)
; Command script ends prematurely when actor's combat status rises to given level

(<void> cs_abort_on_vehicle_exit <boolean>)
; Command script ends prematurely when actor gets out of its vehicle

(<void> cs_abort_on_vehicle_exit <ai> <boolean>)
; Command script ends prematurely when actor gets out of its vehicle

(<boolean> cs_command_script_running <ai> <ai_command_script>)
; Returns true if the ai is running the command script in question

(<boolean> cs_command_script_attached <ai> <ai_command_script>)
; Returns true if the command script is in the ai's cs queue

(<short> cs_number_queued <ai>)
; Returns the number of queued command scripts

(<boolean> cs_moving)
; Returns TRUE if the actor is currently following a path

(<boolean> cs_moving <ai>)
; Returns TRUE if the actor is currently following a path

(<void> cs_fly_to <point_reference>)
; Flies the actor to the given point

(<void> cs_fly_to <ai> <boolean> <point_reference>)
; Flies the actor to the given point

(<void> cs_fly_to <point_reference> <real>)
; Flies the actor to the given point (within the given tolerance)

(<void> cs_fly_to <ai> <boolean> <point_reference> <real>)
; Flies the actor to the given point (within the given tolerance)

(<void> cs_fly_to_and_face <point_reference> <point_reference>)
; Flies the actor to the given point and orients him in the appropriate direction

(<void> cs_fly_to_and_face <ai> <boolean> <point_reference> <point_reference>)
; Flies the actor to the given point and orients him in the appropriate direction

(<void> cs_fly_to_and_face <point_reference> <point_reference> <real>)
; Flies the actor to the given point and orients him in the appropriate direction (within the given tolerance)

(<void> cs_fly_to_and_face <ai> <boolean> <point_reference> <point_reference> <real>)
; Flies the actor to the given point and orients him in the appropriate direction (within the given tolerance)

(<void> cs_fly_by <point_reference>)
; Flies the actor through the given point

(<void> cs_fly_by <ai> <boolean> <point_reference>)
; Flies the actor through the given point

(<void> cs_fly_by <point_reference> <real>)
; Flies the actor through the given point (within the given tolerance)

(<void> cs_fly_by <ai> <boolean> <point_reference> <real>)
; Flies the actor through the given point (within the given tolerance)

(<void> cs_go_to <point_reference>)
; Moves the actor to a specified point

(<void> cs_go_to <ai> <boolean> <point_reference>)
; Moves the actor to a specified point

(<void> cs_go_to <point_reference> <real>)
; Moves the actor to a specified point, attenuating throttle by the given amount when near the goal

(<void> cs_go_to <ai> <boolean> <point_reference> <real>)
; Moves the actor to a specified point, attenuating throttle by the given amount when near the goal

(<void> cs_go_by <point_reference> <point_reference>)
; Actor moves toward the point, and considers it hit when it breaks the indicated plane

(<void> cs_go_by <ai> <boolean> <point_reference> <point_reference>)
; Actor moves toward the point, and considers it hit when it breaks the indicated plane

(<void> cs_go_by <point_reference> <point_reference> <real>)
; Actor moves toward the point, and considers it hit when it breaks the indicated plane, attenuating throttle by the given amount when near the goal

(<void> cs_go_by <ai> <boolean> <point_reference> <point_reference> <real>)
; Actor moves toward the point, and considers it hit when it breaks the indicated plane, attenuating throttle by the given amount when near the goal

(<void> cs_go_to_and_face <point_reference> <point_reference>)
; Moves the actor to a specified point and has him face the second point

(<void> cs_go_to_and_face <ai> <boolean> <point_reference> <point_reference>)
; Moves the actor to a specified point and has him face the second point

(<void> cs_go_to_and_posture <point_reference> <string_id>)
; Actor moves to the point and performs a posture once there

(<void> cs_go_to_and_posture <ai> <boolean> <point_reference> <string_id>)
; Actor moves to the point and performs a posture once there

(<void> cs_attach_to_spline <string_id>)
; For use in flying vehicles: Set this vehicle to pathfind using the designated spline.

(<void> cs_attach_to_spline <ai> <boolean> <string_id>)
; For use in flying vehicles: Set this vehicle to pathfind using the designated spline.

(<void> cs_go_to_nearest <point_reference>)
; Given a point set, AI goes toward the nearest point

(<void> cs_go_to_nearest <ai> <boolean> <point_reference>)
; Given a point set, AI goes toward the nearest point

(<void> cs_move_in_direction <real> <real> <real>)
; Actor moves at given angle, for the given distance, optionally with the given facing (angle, distance, facing)

(<void> cs_move_in_direction <ai> <boolean> <real> <real> <real>)
; Actor moves at given angle, for the given distance, optionally with the given facing (angle, distance, facing)

(<void> cs_move_towards <object>)
; Move in the direction of the given object

(<void> cs_move_towards <ai> <boolean> <object>)
; Move in the direction of the given object

(<void> cs_move_towards <object> <boolean>)
; Move in the direction of the given object (and melee the target or not)

(<void> cs_move_towards <ai> <boolean> <object> <boolean>)
; Move in the direction of the given object (and melee the target or not)

(<void> cs_move_towards_point <point_reference> <real>)
; Move to within the given radius of the given point

(<void> cs_move_towards_point <ai> <boolean> <point_reference> <real>)
; Move to within the given radius of the given point

(<void> cs_swarm_to <point_reference> <real>)
; A swarm swarms towards the point (or point set) in question, the individual forms stopping when they get within the given radius

(<void> cs_swarm_to <ai> <boolean> <point_reference> <real>)
; A swarm swarms towards the point (or point set) in question, the individual forms stopping when they get within the given radius

(<void> cs_swarm_from <point_reference> <real>)
; A swarm swarms away from the point in question, going at least the given distance

(<void> cs_swarm_from <ai> <boolean> <point_reference> <real>)
; A swarm swarms away from the point in question, going at least the given distance

(<void> cs_pause <real>)
; The actor does nothing for the given number of seconds

(<void> cs_pause <ai> <boolean> <real>)
; The actor does nothing for the given number of seconds

(<void> cs_grenade <point_reference> <short>)
; Actor throws a grenade, either by tossing (arg2=0), lobbing (1) or bouncing (2)

(<void> cs_grenade <ai> <boolean> <point_reference> <short>)
; Actor throws a grenade, either by tossing (arg2=0), lobbing (1) or bouncing (2)

(<void> cs_use_equipment <real>)
; Actor uses their current equipment for the given number of seconds

(<void> cs_use_equipment <ai> <boolean> <real>)
; Actor uses their current equipment for the given number of seconds

(<void> cs_jump <real> <real>)
; Actor jumps in direction of angle at the given velocity (angle, velocity)

(<void> cs_jump <ai> <boolean> <real> <real>)
; Actor jumps in direction of angle at the given velocity (angle, velocity)

(<void> cs_jump_to_point <real> <real>)
; Actor jumps with given horizontal and vertical velocity

(<void> cs_jump_to_point <ai> <boolean> <real> <real>)
; Actor jumps with given horizontal and vertical velocity

(<void> cs_vocalize <short>)
; Actor emits vocalization of given type

(<void> cs_vocalize <ai> <boolean> <short>)
; Actor emits vocalization of given type

(<void> cs_play_sound <sound>)
; Actor plays an impulse sound and the atom blocks until it is complete

(<void> cs_play_sound <ai> <boolean> <sound>)
; Actor plays an impulse sound and the atom blocks until it is complete

(<void> cs_play_sound <sound> <real>)
; Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length

(<void> cs_play_sound <ai> <boolean> <sound> <real>)
; Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length

(<void> cs_play_sound <sound> <real> <real>)
; Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length, at the given volume (0..1)

(<void> cs_play_sound <ai> <boolean> <sound> <real> <real>)
; Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length, at the given volume (0..1)

(<void> cs_action <point_reference> <short>)
; Actor plays an AI action towards the given point. ai_action_<tab> to see action options

(<void> cs_action <ai> <boolean> <point_reference> <short>)
; Actor plays an AI action towards the given point. ai_action_<tab> to see action options

(<void> cs_action_at_object <object> <short>)
; Actor plays an AI action towards the given object. ai_action_<tab> to see action options

(<void> cs_action_at_object <ai> <boolean> <object> <short>)
; Actor plays an AI action towards the given object. ai_action_<tab> to see action options

(<void> cs_action_at_player <short>)
; Actor plays an AI action towards the nearest_player. ai_action_<tab> to see action options

(<void> cs_action_at_player <ai> <boolean> <short>)
; Actor plays an AI action towards the nearest_player. ai_action_<tab> to see action options

(<void> cs_custom_animation <animation_graph> <string_id> <boolean>)
; starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(<void> cs_custom_animation <ai> <boolean> <animation_graph> <string_id> <boolean>)
; starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(<void> cs_custom_animation <animation_graph> <string_id> <boolean> <point_reference>)
; starts a custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE)

(<void> cs_custom_animation <ai> <boolean> <animation_graph> <string_id> <boolean> <point_reference>)
; starts a custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE)

(<void> cs_custom_animation_death <animation_graph> <string_id> <boolean>)
; starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(<void> cs_custom_animation_death <ai> <boolean> <animation_graph> <string_id> <boolean>)
; starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(<void> cs_custom_animation_death <animation_graph> <string_id> <boolean> <point_reference>)
; starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(<void> cs_custom_animation_death <ai> <boolean> <animation_graph> <string_id> <boolean> <point_reference>)
; starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(<void> cs_custom_animation_loop <animation_graph> <string_id> <boolean>)
; starts a looping custom animation playing on the actor (interpolates into animation if last parameter is TRUE) NON-BLOCKING

(<void> cs_custom_animation_loop <ai> <animation_graph> <string_id> <boolean>)
; starts a looping custom animation playing on the actor (interpolates into animation if last parameter is TRUE) NON-BLOCKING

(<void> cs_custom_animation_loop <animation_graph> <string_id> <boolean> <point_reference>)
; starts a looping custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE) NON-BLOCKING

(<void> cs_custom_animation_loop <ai> <animation_graph> <string_id> <boolean> <point_reference>)
; starts a looping custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE) NON-BLOCKING

(<void> cs_play_line <ai_line>)
; Play the named line in the current scene

(<void> cs_play_line <ai> <boolean> <ai_line>)
; Play the named line in the current scene

(<void> cs_die <short>)
; Actor dies in specified manner

(<void> cs_die <ai> <boolean> <short>)
; Actor dies in specified manner

(<void> cs_deploy_turret <point_reference>)
; Deploy a turret at the given script point

(<void> cs_deploy_turret <ai> <boolean> <point_reference>)
; Deploy a turret at the given script point

(<void> cs_approach <object> <real> <real> <real>)
; (approach <object> <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)

(<void> cs_approach <ai> <boolean> <object> <real> <real> <real>)
; (approach <object> <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)

(<void> cs_approach_player <real> <real> <real>)
; (approach player <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)

(<void> cs_approach_player <ai> <boolean> <real> <real> <real>)
; (approach player <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)

(<void> cs_go_to_vehicle <vehicle>)
; Actor gets in the appropriate vehicle

(<void> cs_go_to_vehicle <ai> <boolean> <vehicle>)
; Actor gets in the appropriate vehicle

(<void> cs_go_to_vehicle <vehicle> <unit_seat_mapping>)
; Actor gets in the named seat of the appropriate vehicle

(<void> cs_go_to_vehicle <ai> <boolean> <vehicle> <unit_seat_mapping>)
; Actor gets in the named seat of the appropriate vehicle

(<void> cs_set_style <style>)
; Override the actor's style

(<void> cs_set_style <ai> <style>)
; Override the actor's style

(<void> cs_force_combat_status <short>)
; Force the actor's combat status (0= no override, 1=idle, 2= alert, 3= active)

(<void> cs_force_combat_status <ai> <short>)
; Force the actor's combat status (0= no override, 1=idle, 2= alert, 3= active)

(<void> cs_enable_targeting <boolean>)
; Actor autonomous target selection enabled/disabled.

(<void> cs_enable_targeting <ai> <boolean>)
; Actor autonomous target selection enabled/disabled.

(<void> cs_enable_looking <boolean>)
; Actor autonomous looking enabled/disabled.

(<void> cs_enable_looking <ai> <boolean>)
; Actor autonomous looking enabled/disabled.

(<void> cs_enable_moving <boolean>)
; Actor autonomous moving enabled/disabled.

(<void> cs_enable_moving <ai> <boolean>)
; Actor autonomous moving enabled/disabled.

(<void> cs_enable_dialogue <boolean>)
; Actor combat dialogue enabled/disabled.

(<void> cs_enable_dialogue <ai> <boolean>)
; Actor combat dialogue enabled/disabled.

(<void> cs_suppress_activity_termination <boolean>)
; Autonomous termination of activities is suppressed for the remainder of the command script

(<void> cs_suppress_activity_termination <ai> <boolean>)
; Autonomous termination of activities is suppressed for the remainder of the command script

(<void> cs_suppress_dialogue_global <boolean>)
; Combat dialogue is suppressed for the remainder of the command script

(<void> cs_suppress_dialogue_global <ai> <boolean>)
; Combat dialogue is suppressed for the remainder of the command script

(<void> cs_look <boolean> <point_reference>)
; Actor looks at the point for the remainder of the cs, or until overridden

(<void> cs_look <ai> <boolean> <point_reference>)
; Actor looks at the point for the remainder of the cs, or until overridden

(<void> cs_look_player <boolean>)
; Actor looks at nearest player for the duration of the cs, or until overridden

(<void> cs_look_player <ai> <boolean>)
; Actor looks at nearest player for the duration of the cs, or until overridden

(<void> cs_look_object <boolean> <object>)
; Actor looks at the object for the duration of the cs, or until overridden

(<void> cs_look_object <ai> <boolean> <object>)
; Actor looks at the object for the duration of the cs, or until overridden

(<void> cs_aim <boolean> <point_reference>)
; Actor aims at the point for the remainder of the cs, or until overridden (overrides look)

(<void> cs_aim <ai> <boolean> <point_reference>)
; Actor aims at the point for the remainder of the cs, or until overridden (overrides look)

(<void> cs_aim_player <boolean>)
; Actor aims at nearest player for the duration of the cs, or until overridden (overrides look)

(<void> cs_aim_player <ai> <boolean>)
; Actor aims at nearest player for the duration of the cs, or until overridden (overrides look)

(<void> cs_aim_object <boolean> <object>)
; Actor aims at the object for the duration of the cs, or until overridden (overrides look)

(<void> cs_aim_object <ai> <boolean> <object>)
; Actor aims at the object for the duration of the cs, or until overridden (overrides look)

(<void> cs_face <boolean> <point_reference>)
; Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)

(<void> cs_face <ai> <boolean> <point_reference>)
; Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)

(<void> cs_face_player <boolean>)
; Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)

(<void> cs_face_player <ai> <boolean>)
; Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)

(<void> cs_face_object <boolean> <object>)
; Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)

(<void> cs_face_object <ai> <boolean> <object>)
; Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)

(<void> cs_shoot <boolean>)
; Actor is allowed to shoot at its target or not

(<void> cs_shoot <ai> <boolean>)
; Actor is allowed to shoot at its target or not

(<void> cs_shoot <boolean> <object>)
; Actor shoots at given target

(<void> cs_shoot <ai> <boolean> <object>)
; Actor shoots at given target

(<void> cs_shoot_point <boolean> <point_reference>)
; Actor shoots at given point

(<void> cs_shoot_point <ai> <boolean> <point_reference>)
; Actor shoots at given point

(<void> cs_shoot_secondary_trigger <boolean>)
; Actor uses secondary trigger whenever he shoots

(<void> cs_shoot_secondary_trigger <ai> <boolean>)
; Actor uses secondary trigger whenever he shoots

(<void> cs_lower_weapon <boolean>)
; Actor keeps weapon lowered

(<void> cs_lower_weapon <ai> <boolean>)
; Actor keeps weapon lowered

(<void> cs_vehicle_speed <real>)
; Set the speed at which the actor will drive a vehicle, expressed as a multiplier 0-1

(<void> cs_vehicle_speed <ai> <real>)
; Set the speed at which the actor will drive a vehicle, expressed as a multiplier 0-1

(<void> cs_vehicle_speed_instantaneous <real>)
; Set the instantaneous speed of the vehicle we're driving

(<void> cs_vehicle_speed_instantaneous <ai> <real>)
; Set the instantaneous speed of the vehicle we're driving

(<void> cs_vehicle_boost <boolean>)
; Enables or disables boost

(<void> cs_vehicle_boost <ai> <boolean>)
; Enables or disables boost

(<void> cs_turn_sharpness <boolean> <real>)
; Set the sharpness of a vehicle turn (values 0 -> 1). Only applicable to nondirectional flying vehicles (e.g. dropships)

(<void> cs_turn_sharpness <ai> <boolean> <real>)
; Set the sharpness of a vehicle turn (values 0 -> 1). Only applicable to nondirectional flying vehicles (e.g. dropships)

(<void> cs_enable_pathfinding_failsafe <boolean>)
; Actor blocks until pathfinding calls succeed

(<void> cs_enable_pathfinding_failsafe <ai> <boolean>)
; Actor blocks until pathfinding calls succeed

(<void> cs_set_pathfinding_radius <real>)
; Sets the actor's pathfinding radius (this distance at which a destination is considered to have been reached) for the remainder of the command script

(<void> cs_set_pathfinding_radius <ai> <real>)
; Sets the actor's pathfinding radius (this distance at which a destination is considered to have been reached) for the remainder of the command script

(<void> cs_ignore_obstacles <boolean>)
; Actor does not avoid obstacles when true

(<void> cs_ignore_obstacles <ai> <boolean>)
; Actor does not avoid obstacles when true

(<void> cs_approach_stop)
; Actor stops approaching

(<void> cs_approach_stop <ai>)
; Actor stops approaching

(<void> cs_push_stance <string_id>)
; Actor pushes given stance during this command script

(<void> cs_push_stance <ai> <string_id>)
; Actor pushes given stance during this command script

(<void> cs_crouch <boolean>)
; Actor crouches for the remainder of the command script, or until overridden

(<void> cs_crouch <ai> <boolean>)
; Actor crouches for the remainder of the command script, or until overridden

(<void> cs_crouch <boolean> <real>)
; Actor crouches / uncrouches, transitioning over the given number of seconds

(<void> cs_crouch <ai> <boolean> <real>)
; Actor crouches / uncrouches, transitioning over the given number of seconds

(<void> cs_walk <boolean>)
; Actor walks for the remainder of the command script, or until overridden

(<void> cs_walk <ai> <boolean>)
; Actor walks for the remainder of the command script, or until overridden

(<void> cs_posture_set <string_id> <boolean>)
; Actor enters the given posture (enters immediately rather than plays the entry animation if argument is TRUE)

(<void> cs_posture_set <ai> <string_id> <boolean>)
; Actor enters the given posture (enters immediately rather than plays the entry animation if argument is TRUE)

(<void> cs_posture_exit)
; Actor exits the posture it's in

(<void> cs_posture_exit <ai>)
; Actor exits the posture it's in

(<void> cs_stow <boolean>)
; Actor stows its current weapon, based on the second bool variable

(<void> cs_stow <ai> <boolean>)
; Actor stows its current weapon, based on the second bool variable

(<void> cs_teleport <point_reference> <point_reference>)
; Actor teleports to point1 facing point2

(<void> cs_teleport <ai> <point_reference> <point_reference>)
; Actor teleports to point1 facing point2

(<void> cs_stop_custom_animation)
; Stop running a custom animation

(<void> cs_stop_custom_animation <ai>)
; Stop running a custom animation

(<void> cs_stop_sound <sound>)
; Stops the specified impulse sound.

(<void> cs_stop_sound <ai> <sound>)
; Stops the specified impulse sound.

(<void> cs_player_melee <long>)
; Actor performs player-specific melee

(<void> cs_player_melee <ai> <boolean> <long>)
; Actor performs player-specific melee

(<void> cs_melee_direction <long>)
; Actor performs melee in provided direction (0= front, 1= back, 2= offhand, 3= tackle)

(<void> cs_melee_direction <ai> <boolean> <long>)
; Actor performs melee in provided direction (0= front, 1= back, 2= offhand, 3= tackle)

(<void> cs_smash_direction <long>)
; Actor performs smash in provided direction

(<void> cs_smash_direction <ai> <boolean> <long>)
; Actor performs smash in provided direction

(<void> camera_control <boolean>)
; toggles script control of the camera.

(<void> camera_set <cutscene_camera_point> <short>)
; moves the camera to the specified camera point over the specified number of ticks.

(<void> camera_set_relative <cutscene_camera_point> <short> <object>)
; moves the camera to the specified camera point over the specified number of ticks (position is relative to the specified object).

(<void> camera_set_animation <animation_graph> <string_id>)
; begins a prerecorded camera animation.

(<void> camera_set_animation_relative <animation_graph> <string_id> <unit> <cutscene_flag>)
; begins a prerecorded camera animation synchronized to unit relative to cutscene flag.

(<void> camera_set_animation_with_speed <animation_graph> <string_id> <real>)
; begins a prerecorded camera animation.

(<void> camera_set_animation_relative_with_speed <animation_graph> <string_id> <unit> <cutscene_flag> <real>)
; begins a prerecorded camera animation synchronized to unit relative to cutscene flag.

(<void> camera_set_animation_relative_with_speed_loop <animation_graph> <string_id> <unit> <cutscene_flag> <real> <boolean>)
; begins a prerecorded camera animation synchronized to unit relative to cutscene flag.

(<void> camera_set_animation_relative_with_speed_loop_offset <animation_graph> <string_id> <unit> <cutscene_flag> <real> <boolean> <real>)
; begins a prerecorded camera animation synchronized to unit relative to cutscene flag.

(<void> camera_predict_resources_at_frame <animation_graph> <string_id> <unit> <cutscene_flag> <long>)
; predict resources at a frame in camera animation.

(<void> camera_predict_resources_at_point <cutscene_camera_point>)
; predict resources given a camera point

(<void> camera_set_first_person <unit>)
; makes the scripted camera follow a unit.

(<void> camera_set_cinematic)
; makes the scripted camera follow the path of a cinematic scene.

(<void> camera_set_cinematic_scene <cinematic_scene_definition> <long> <cutscene_flag>)
; sets the scene, shot, and cutscene flag for the cinematic camera (NOTE: camera must be in cinematic mode by calling camera_set_cinematic).

(<void> camera_place_relative <object>)
; all subsequent camera placement in sapien be marked as relative to this object

(<void> camera_place_worldspace)
; all subsequent camera placement in sapien will be marked as worldspace

(<short> camera_time)
; returns the number of ticks remaining in the current camera interpolation.

(<void> camera_set_field_of_view <real> <short>)
; sets the field of view

(<void> cinematic_camera_set_easing_in <real> <real> <real> <real> <real> <real>)
; controls the camera easing from player position

(<void> cinematic_camera_set_easing_out <real>)
; controls the camera easing back to the player position

(<void> cinematic_print <string>)
; Print status lines for cinematic debugging

(<void> camera_set_pan <cutscene_camera_point> <short>)
; moves the camera to the specified camera point over the specified number of ticks with a constant speed.

(<void> camera_pan <cutscene_camera_point> <cutscene_camera_point> <short> <short> <real> <short> <real>)
; camera_pan <start point> <end point> <ticks> <ease-in ticks> <start velocity scale> <ease-out ticks> <end velocity scale>

(<void> debug_camera_save)
; saves the camera position and facing to camera_<map_name>.txt

(<void> debug_camera_load)
; loads the saved camera position and facing from camera_<map_name>.txt

(<void> debug_camera_save_name <string>)
; saves the camera position and facing to <name>_<map_name>.txt

(<void> debug_camera_load_name <string>)
; loads the camera position and facing from <name>_<map_name>.txt

(<void> debug_camera_save_simple_name <string>)
; saves the camera position and facing to camera_<name>.txt

(<void> debug_camera_load_simple_name <string>)
; loads the camera position and facing from camera_<name>.txt

(<void> debug_camera_load_text <string>)
; loads the camera position and facing from a passed in string

(<void> director_debug_camera <boolean>)
; enable/disable camera debugging

(<void> director_print_camera_transform <long>)
; Spews camera transform for the given output user index. For remote tools.

(<void> director_print_deterministic_camera_transform <long>)
; Spews camera transform for the reticule for the given output user index. For remote tools.

(<game_difficulty> game_difficulty_get)
; returns the current difficulty setting, but lies to you and will never return easy, instead returning normal

(<game_difficulty> game_difficulty_get_real)
; returns the actual current difficulty setting without lying

(<short> game_insertion_point_get)
; returns the number of the insertion point the map was started at

(<void> pvs_set_object <object>)
; sets the specified object as the special place that activates everything it sees.

(<void> pvs_set_camera <cutscene_camera_point>)
; sets the specified cutscene camera point as the special place that activates everything it sees.

(<void> pvs_clear)
; removes the special place that activates everything it sees.

(<void> pvs_reset)
; forces pvs to empty then back to full.

(<void> players_unzoom_all)
; resets zoom levels on all players

(<void> player_enable_input <boolean>)
; toggle player input. the player can still free-look, but nothing else.

(<void> player_disable_movement <boolean>)
; toggle player input. the look stick works, but nothing else.

(<void> player_disable_weapon_pickup <boolean>)
; enable/disable all players' ability to pick up weapons

(<boolean> player_night_vision_on)
; returns true if any player has night vision on

(<boolean> unit_night_vision_on <unit>)
; returns true if the unit has a flashlight on

(<boolean> player_active_camouflage_on)
; returns true if any player is active camouflaged

(<boolean> player_camera_control <boolean>)
; enables/disables camera control globally

(<void> player_action_test_reset)
; resets the player action test state so that all tests will return false.

(<boolean> player_action_test_primary_trigger)
; returns true if any player has used primary trigger since the last call to (player_action_test_reset).

(<boolean> player_action_test_grenade_trigger)
; returns true if any player has used grenade trigger since the last call to (player_action_test_reset).

(<boolean> player_action_test_vision_trigger)
; returns true if any player has used vision trigger since the last call to (player_action_test_reset).

(<boolean> player_action_test_rotate_weapons)
; returns true if any player has hit the rotate-weapon button since the last call to (player_action_test_reset).

(<boolean> player_action_test_rotate_grenades)
; returns true if any player has hit the rotate-grenades button since the last call to (player_action_test_reset).

(<boolean> player_action_test_jump)
; returns true if any player has hit the jump button since the last call to (player_action_test_reset).

(<boolean> player_action_test_equipment)
; returns true if any player has hit the equipment button since the last call to (player_action_test_reset).

(<boolean> player_action_test_context_primary)
; returns true if any player has hit the reload button since the last call to (player_action_test_reset).

(<boolean> player_action_test_vehicle_trick_primary)
; returns true if any player has hit the vehicle trick button on the primary trigger side since the last call to (player_action_test_reset).

(<boolean> player_action_test_vehicle_trick_secondary)
; returns true if any player has hit the vehicle trick button on the grenade trigger side since the last call to (player_action_test_reset).

(<boolean> player_action_test_melee)
; returns true if any player has hit the melee button since the last call to (player_action_test_reset).

(<boolean> player_action_test_action)
; returns true if any player has hit the action key since the last call to (player_action_test_reset).

(<boolean> player_action_test_accept)
; returns true if any player has hit accept since the last call to (player_action_test_reset).

(<boolean> player_action_test_cancel)
; returns true if any player has hit cancel key since the last call to (player_action_test_reset).

(<boolean> player_action_test_look_relative_up)
; returns true if any player has looked up since the last call to (player_action_test_reset).

(<boolean> player_action_test_look_relative_down)
; returns true if any player has looked down since the last call to (player_action_test_reset).

(<boolean> player_action_test_look_relative_left)
; returns true if any player has looked left since the last call to (player_action_test_reset).

(<boolean> player_action_test_look_relative_right)
; returns true if any player has looked right since the last call to (player_action_test_reset).

(<boolean> player_action_test_look_relative_all_directions)
; returns true if any player has looked up, down, left, and right since the last call to (player_action_test_reset).

(<boolean> player_action_test_move_relative_all_directions)
; returns true if any player has moved forward, backward, left, and right since the last call to (player_action_test_reset).

(<boolean> player_action_test_cinematic_skip)
; returns true if any player has pressed the cinematic skip button (player_action_test_reset).

(<boolean> player_action_test_start)
; returns true if any player has pressed the start button since the last call to (player_action_test_reset).

(<boolean> player_action_test_back)
; returns true if any player has pressed the back button since the last call to (player_action_test_reset).

(<boolean> player_action_test_dpad_up)
; returns true if any player has pressed dpad up since the last call to (player_action_test_reset).

(<boolean> player_action_test_dpad_down)
; returns true if any player has pressed dpad down since the last call to (player_action_test_reset).

(<boolean> player_action_test_dpad_left)
; returns true if any player has pressed dpad left since the last call to (player_action_test_reset).

(<boolean> player_action_test_dpad_right)
; returns true if any player has pressed dpad right since the last call to (player_action_test_reset).

(<void> unit_action_test_reset <player>)
; resets the player action test state so that all tests will return false.

(<boolean> unit_action_test_primary_trigger <player>)
; returns true if any player has used primary trigger since the last call to (player_action_test_reset).

(<boolean> unit_action_test_grenade_trigger <player>)
; returns true if any player has used grenade trigger since the last call to (player_action_test_reset).

(<boolean> unit_action_test_vision_trigger <player>)
; returns true if any player has used vision trigger since the last call to (player_action_test_reset).

(<boolean> unit_action_test_rotate_weapons <player>)
; returns true if any player has hit the rotate-weapon button since the last call to (player_action_test_reset).

(<boolean> unit_action_test_rotate_grenades <player>)
; returns true if any player has hit the rotate-grenades button since the last call to (player_action_test_reset).

(<boolean> unit_action_test_jump <player>)
; returns true if any player has hit the jump button since the last call to (player_action_test_reset).

(<boolean> unit_action_test_equipment <player>)
; returns true if any player has hit the equipment button since the last call to (player_action_test_reset).

(<boolean> unit_action_test_context_primary <player>)
; returns true if any player has hit the reload button since the last call to (player_action_test_reset).

(<boolean> unit_action_test_vehicle_trick_primary <player>)
; returns true if any player has hit the vehicle trick button on the primary trigger side since the last call to (player_action_test_reset).

(<boolean> unit_action_test_vehicle_trick_secondary <player>)
; returns true if any player has hit the vehicle trick button on the grenade trigger side since the last call to (player_action_test_reset).

(<boolean> unit_action_test_melee <player>)
; returns true if any player has hit the melee button since the last call to (player_action_test_reset).

(<boolean> unit_action_test_action <player>)
; returns true if any player has hit the action key since the last call to (player_action_test_reset).

(<boolean> unit_action_test_accept <player>)
; returns true if any player has hit accept since the last call to (player_action_test_reset).

(<boolean> unit_action_test_cancel <player>)
; returns true if any player has hit cancel key since the last call to (player_action_test_reset).

(<boolean> unit_action_test_look_relative_up <player>)
; returns true if any player has looked up since the last call to (player_action_test_reset).

(<boolean> unit_action_test_look_relative_down <player>)
; returns true if any player has looked down since the last call to (player_action_test_reset).

(<boolean> unit_action_test_look_relative_left <player>)
; returns true if any player has looked left since the last call to (player_action_test_reset).

(<boolean> unit_action_test_look_relative_right <player>)
; returns true if any player has looked right since the last call to (player_action_test_reset).

(<boolean> unit_action_test_look_relative_all_directions <player>)
; returns true if any player has looked up, down, left, and right since the last call to (player_action_test_reset).

(<boolean> unit_action_test_move_relative_all_directions <player>)
; returns true if any player has moved forward, backward, left, and right since the last call to (player_action_test_reset).

(<boolean> unit_action_test_cinematic_skip <player>)
; returns true if any player has pressed the cinematic skip button (player_action_test_reset).

(<boolean> unit_action_test_start <player>)
; returns true if any player has pressed the start button since the last call to (player_action_test_reset).

(<boolean> unit_action_test_back <player>)
; returns true if any player has pressed the back button since the last call to (player_action_test_reset).

(<boolean> unit_action_test_dpad_up <player>)
; returns true if any player has pressed dpad up since the last call to (player_action_test_reset).

(<boolean> unit_action_test_dpad_down <player>)
; returns true if any player has pressed dpad down since the last call to (player_action_test_reset).

(<boolean> unit_action_test_dpad_left <player>)
; returns true if any player has pressed dpad left since the last call to (player_action_test_reset).

(<boolean> unit_action_test_dpad_right <player>)
; returns true if any player has pressed dpad right since the last call to (player_action_test_reset).

(<void> unit_confirm_message <player>)
; Locks the accept button until the player presses accept
; NETWORK SAFE: Unknown, assumed unsafe

(<void> unit_confirm_cancel_message <player>)
; Locks the cancel button until the player presses cancel
; NETWORK SAFE: Unknown, assumed unsafe

(<void> unit_enable_soft_ping_region <unit> <damage_region> <boolean>)
; Enable/disable pain screen damage weight outputs on all units

(<void> unit_print_soft_ping_regions <unit>)
; Print the pain screen state on all the units

(<boolean> player0_looking_up)
; true if the first player is looking up

(<boolean> player0_looking_down)
; true if the first player is looking down

(<void> player_set_pitch <player> <real> <long>)
; sets up player look up test

(<boolean> player_has_female_voice <player>)
; returns true if the player has selected the female voice option

(<boolean> player_action_test_lookstick_forward)
; true if the first player pushed forward on lookstick

(<boolean> player_action_test_lookstick_backward)
; true if the first player pushed backward on lookstick

(<void> debug_teleport_player <unit> <unit>)
; for testing: teleports one player to another's location

(<void> scenario_content_status_reload)
; looks for local tags on disk if they are not already loaded.

(<void> scenario_content_status_force_local)
; forces game to use local tags if available.

(<void> scenario_content_status_force_content)
; forces game to use content tags.

(<void> scenario_content_status_force_clear)
; clears any force on the content status system.

(<void> map_reset)
; starts the map from the beginning.

(<void> map_reset_random)
; starts the map from the beginning with a new random seed.

(<void> switch_zone_set <zone_set>)
; switches to a different zone set

(<void> scenario_print_zone_sets)
; prints out the names of all the zone sets.

(<void> scenario_print_current_zone_set)
; brings out the names of all the bsps in the current zone set.

(<long> current_zone_set)
; returns the current zone set

(<long> current_zone_set_fully_active)
; returns the current zone set

(<void> switch_map_and_zone_set <string> <string>)
; switches to a different scenario and zone set

(<void> crash <string>)
; crashes (for debugging).

(<void> version)
; prints the build version.

(<void> status)
; prints the value of all global status variables.

(<void> record_movie <short> <real> <short> <short>)
; <frame rate> <seconds> <width> <height>

(<void> record_movie_distributed <short> <long> <short> <long> <long>)
; <frame rate> <seconds> <screen size> <mod count> <mod index>

(<void> screenshot <string>)
; takes a screenshot and saves as <name>.tif

(<void> screenshot_big <short> <string>)
; takes an NxN multiple-page screenshot and saves as <name>.tif

(<void> screenshot_big_raw <short> <string>)
; takes an NxN multiple-page screenshot and saves as an HDR <name>.tif

(<void> screenshot_size <short> <short> <string>)
; takes a <width> x <height> screenshot and saves as an HDR <name>.tif

(<void> screenshot_simple <string>)
; takes a simple screenshot and saves as <name>.tif

(<void> screenshot_cubemap <string>)
; takes a cubemap screenshot and saves as <name>.tif

(<void> screenshot_webmap <string>)
; takes two special screenshots and saves them, along with the camera information, as <name>.tif, <name>_secondary.tif and <name>_camera.txt

(<void> cubemap_dynamic_generate)
; generates a dynamic cubemap and saves in the cubemaps directory

(<void> object_snapshot <long> <string>)
; takes a set of snapshot of object and saves as <snapshot\name>.tif

(<void> structure_instance_snapshot <long>)
; takes snapshot of all the instances in this bsp

(<void> object_thumbnail <string> <string> <string>)
; takes snapshots of objects to be used as thumnail previews

(<void> main_menu)
; goes back to the main menu

(<void> main_halt <string>)
; goes to a halted pregame state

(<void> map_name <string>)
; the same as game_start: launches a game for debugging purposes

(<void> game_multiplayer <string>)
; debug map launching: sets the multiplayer engine for the next map.

(<void> game_campaign)
; debug map launching: sets the next map to run in campaign mode.

(<void> game_survival)
; debug map launching: sets the next map to run in survival mode.

(<void> game_player_count <long>)
; debug map launching: sets the number of splitscreen players for the next map; does NOT set game mode (campaign vs. multiplayer).

(<void> game_set_variant <string>)
; Launches a game variant a on a map

(<void> game_splitscreen <long>)
; debug map launching: sets the number of multiplayer splitscreen players for the next map.

(<void> game_difficulty <game_difficulty>)
; debug map launching: sets the difficulty of the next map.

(<void> game_active_skulls <long>)
; debug map launching: sets the active skulls of the next map.

(<void> game_coop_players <long>)
; debug map launching: sets the number of coop players for the next map.

(<void> game_initial_zone_set <string>)
; debug map launching: sets the initial bsp for the next map.

(<void> game_tick_rate <long>)
; debug map launching: sets the tick rate for the next map.

(<void> game_start <string>)
; debug map launching: starts a game on the specified map.

(<void> game_start_when_ready)
; nicely starts the current game once the pregame lobby is stable

(<void> game_start_when_joined <long>)
; nicely starts a game when the specified number of users are in the lobby

(<void> game_rate <real> <real> <real>)
; changes game update rate (DANGER: only use if you know what you're doing!)

(<void> texture_cache_flush)
; don't make me kick your grunt

(<void> geometry_cache_flush)
; we fear change

(<void> sound_cache_flush)
; i'm a rebel!

(<void> animation_cache_flush)
; it's just sooooo wrong

(<void> font_cache_flush)

(<void> language_set <string>)
; change the language for localization

(<void> texture_cache_test_malloc)

(<void> debug_memory)
; dumps memory leaks.

(<void> debug_memory_by_file)
; dumps memory leaks by source file.

(<void> debug_memory_for_file <string>)
; dumps memory leaks from the specified source file.

(<void> debug_tags)
; writes all memory being used by tag files into tag_memory_dump.txt

(<void> debug_single_tag)
; inspect a single tag for programmer within visual studio

(<void> tags_verify_all)
; verifies usage of infidel fields is correct

(<void> trace_next_frame <long>)
; creates a tracedump of the next frame

(<void> trace_next_frame_to_file <long> <string>)
; creates a tracedump of the next frame in a specific file

(<void> trace_tick <long>)
; creates a tracedump of a specific game tick

(<void> collision_log_enable <boolean>)
; enables or disables collision logging.

(<void> damage_control_get <string>)
; gets a damage control setting by string

(<void> damage_control_set <string> <boolean>)
; sets a damage control setting by string

(<void> ai_lines)
; cycles through AI line-spray modes

(<void> ai_dialogue_break_on_vocalization <string_id>)
; break when the following vocalization is chosen for utterance

(<void> fade_in <real> <real> <real> <short>)
; does a screen fade in from a particular color

(<void> fade_out <real> <real> <real> <short>)
; does a screen fade out to a particular color

(<void> fade_in_for_player <player>)
; fade in a player's screen from black

(<void> fade_out_for_player <player>)
; fade out a player's screen to black

(<short> cinematic_tag_fade_out_from_game <string_id>)
; executes the fade settings setup in the cinematics tag for fading out from the game
; returns the user set sleep time in hs_ticks

(<short> cinematic_tag_fade_in_to_cinematic <string_id>)
; executes the fade settings setup in the cinematics tag for fading in to the cinematic
; returns the user set sleep time in hs_ticks

(<short> cinematic_tag_fade_out_from_cinematic <string_id>)
; executes the fade settings setup in the cinematics tag for fading out from the cinematic
; returns the user set sleep time in hs_ticks

(<short> cinematic_tag_fade_in_to_game <string_id>)
; executes the fade settings setup in the cinematics tag for fading in to the game
; returns the user set sleep time in hs_ticks

(<short> cinematic_transition_fade_out_from_game <cinematic_transition_definition>)
; executes the fade settings setup in the cinematic transition for fading out from the game
; returns the user set sleep time in hs_ticks

(<short> cinematic_transition_fade_in_to_cinematic <cinematic_transition_definition>)
; executes the fade settings setup in the cinematic transition for fading in to the cinematic
; returns the user set sleep time in hs_ticks

(<short> cinematic_transition_fade_out_from_cinematic <cinematic_transition_definition>)
; executes the fade settings setup in the cinematic transition for fading out from the cinematic
; returns the user set sleep time in hs_ticks

(<short> cinematic_transition_fade_in_to_game <cinematic_transition_definition>)
; executes the fade settings setup in the cinematic transition for fading in to the game
; returns the user set sleep time in hs_ticks

(<void> cinematic_run_script_by_name <string_id>)
; runs a cinematic script by name

(<void> cinematic_start)
; initializes game to start a cinematic (interruptive) cutscene

(<void> cinematic_stop)
; initializes the game to end a cinematic (interruptive) cutscene

(<void> cinematic_skip_start_internal)

(<void> cinematic_skip_stop_internal)

(<void> cinematic_show_letterbox <boolean>)
; sets or removes the letterbox bars

(<void> cinematic_show_letterbox_immediate <boolean>)
; sets or removes the letterbox bars

(<void> cinematic_set_title <cutscene_title>)
; activates the chapter title

(<void> cinematic_set_title_delayed <cutscene_title> <real>)
; activates the chapter title, delayed by <real> seconds

(<void> cinematic_suppress_bsp_object_creation <boolean>)
; suppresses or enables the automatic creation of objects during cutscenes due to a bsp switch

(<void> cinematic_subtitle <string_id> <real>)
; displays the named subtitle for <real> seconds

(<void> cinematic_set <cinematic_definition>)
; sets the cinematic name for the current cinematic.

(<void> cinematic_set_shot <cinematic_scene_definition> <long>)
; sets the scene and shot for the current cinematic.

(<void> cinematic_get_shot)
; Print the stored scene and shot information to the screen

(<void> cinematic_set_early_exit <long>)
; Used to store the state of skippable cinematics

(<long> cinematic_get_early_exit)
; Used to retrieve the state of skippable cinematics

(<void> cinematic_set_active_camera <string_id>)
; Used to change the rasterizer to display one of the texture cameras

(<void> cinematic_object_create <string_id>)
; Creates an object for use by cinematics

(<void> cinematic_object_create_cinematic_anchor <cutscene_flag>)
; Creates a cinematic anchor object for use by cinematics

(<void> cinematic_object_destroy <string_id>)
; Destroys an object created by cinematic_object_create

(<void> cinematic_objects_destroy_all)
; Destroys all objects created by cinematic_object_create

(<void> cinematic_destroy)
; Releases everything created by the cinematics system

(<boolean> cinematic_in_progress)
; Tests if a cinematic is in progress

(<boolean> cinematic_can_be_skipped)
; Tests if a cinematic can be skipped

(<void> cinematic_clips_initialize_for_shot <long>)
; intializes the cinematic clip planes for the given shot of the current cinematic

(<void> cinematic_clips_destroy)
; destroys any existing cinematic clip planes for the current cinematic

(<void> cinematic_lights_initialize_for_shot <long>)
; intializes the cinematic lighting for the given shot of the current cinematic

(<void> cinematic_lights_destroy)
; destroys any existing cinematic lights for the current cinematic

(<void> cinematic_lights_destroy_shot)
; destroys any non-persistent existing cinematic lights for the current shot

(<void> cinematic_light_object <object> <string_id> <cinematic_lightprobe> <cutscene_camera_point>)
; attaches cinematic lights to <object> at <marker> using scenario cinematic lighting palette entry <scenario-cinematic-lighting-name> from point of view of camera reference <camera>

(<void> cinematic_light_object_off <object>)
; Turn off cinematic lighting for the object.

(<void> cinematic_lighting_rebuild_all)
; Rebuild all cinematic lighting (SH only)

(<void> cinematic_lighting_update_dynamic_light_direction <string> <long> <real> <real> <real>)
; Updates the direction of a loaded cinematic dynamic light

(<void> cinematic_lighting_update_vmf_light <string> <real> <real> <real> <real> <real> <real> <real>)
; Updates the vmf light

(<void> cinematic_lighting_update_analytical_light <string> <real> <real> <real> <real> <real> <real>)
; Updates the analytical light

(<void> cinematic_lighting_update_ambient_light <string> <real> <real> <real> <real>)
; Updates the ambient light

(<void> cinematic_lighting_update_scales <string> <real> <real> <real> <real>)
; Updates the weights

(<object> cinematic_object_get <string_id>)
; Returns an object created by cinematic_object_create

(<unit> cinematic_unit_get <string_id>)
; Returns a unit created by cinematic_object_create

(<weapon> cinematic_weapon_get <string_id>)
; Returns a weapon created by cinematic_object_create

(<void> cinematic_reset)
; Resets the cinematics internal state

(<void> camera_set_briefing <boolean>)
; Used for briefing cinematics

(<cinematic_definition> cinematic_tag_reference_get_cinematic <long>)
; Retrieve a cinematic tag from the cinematic system

(<cinematic_scene_definition> cinematic_tag_reference_get_scene <long>)
; Retrieve a cinematic tag from the cinematic system

(<effect> cinematic_tag_reference_get_effect <long> <long> <long> <long>)
; Retrieve an effect tag from the cinematic system

(<sound> cinematic_tag_reference_get_dialogue <long> <long> <long> <long>)
; Retrieve a sound tag from the cinematic system

(<sound> cinematic_tag_reference_get_music <long> <long> <long> <long>)
; Retrieve a sound tag from the cinematic system

(<looping_sound> cinematic_tag_reference_get_music_looping <long> <long> <long> <long>)
; Retrieve a looping sound tag from the cinematic system

(<animation_graph> cinematic_tag_reference_get_animation <long> <long> <long>)
; Retrieve a looping sound tag from the cinematic system

(<boolean> cinematic_scripting_object_coop_flags_valid <long> <long>)
; Evaluate if a cinematic object should be displayed for the current coop flags

(<void> cinematic_scripting_fade_out <real> <real> <real> <short>)
; Fade out at the end of the cinematic

(<void> cinematic_scripting_create_object <long> <long>)
; Create a manually placed cinematic object

(<void> cinematic_scripting_create_cinematic_object <long> <long>)
; Create a manually placed cinematic object

(<void> cinematic_scripting_start_animation <long> <long> <string_id>)
; Animate a manually placed cinematic object

(<void> cinematic_scripting_destroy_object <long> <long>)
; Destroy a cinematic object

(<void> cinematic_scripting_destroy_objects <long>)
; Destroys all cinematic object

(<void> cinematic_scripting_create_scene <long>)
; Creates cinematic scene

(<void> cinematic_scripting_destroy_scene <long>)
; Destroys cinematic scene

(<void> cinematic_scripting_start_effect <long> <long> <long> <object>)
; Play a cinematic effect

(<void> cinematic_scripting_start_music <long> <long> <long>)
; Play a cinematic music

(<void> cinematic_scripting_start_dialogue <long> <long> <long> <object>)
; Play a cinematic dialogue

(<void> cinematic_scripting_stop_music <long> <long> <long>)
; Stops a cinematic music

(<void> cinematic_scripting_start_screen_effect <long> <long> <long>)
; Play a cinematic screen effect

(<void> cinematic_scripting_stop_screen_effect <long> <long> <long>)
; Stop the associated area screen effect.
; NETWORKING SAFE: Unknown, assumed unsafe

(<void> cinematic_scripting_create_and_animate_object <long> <long> <long> <string_id> <boolean>)
; Create and Animate a cinematic object.

(<void> cinematic_scripting_create_and_animate_cinematic_object <long> <long> <long> <string_id> <boolean>)
; Create and Animate a cinematic object.

(<void> cinematic_scripting_create_and_animate_object_no_animation <long> <long> <long> <boolean>)
; Create and Animate a cinematic object.

(<void> cinematic_scripting_create_and_animate_cinematic_object_no_animation <long> <long> <long> <boolean>)
; Create and Animate a cinematic object.

(<void> cinematic_scripting_set_user_input_constraints <long> <long> <long>)
; Set user input constraints from a cinematic tag

(<void> game_won)
; causes the player to successfully finish the current level and move to the next

(<void> game_lost <boolean>)
; marks the game as lost or not lost

(<void> game_revert)
; causes the player to revert to his previous saved game (for testing and cinematic skipping only please!)

(<void> game_award_level_complete_achievements)
; awards end of level progress to players

(<boolean> game_is_cooperative)
; returns TRUE if the game is cooperative

(<boolean> game_is_playtest)
; returns the hs global boolean 'global_playtest_mode' which can be set in your init.txt

(<void> game_can_use_flashlights <boolean>)
; allows or disallows the user of player flashlights

(<void> game_save_and_quit)
; save & quit to the main menu

(<void> game_save_unsafe)
; saves right now, even if the game is in an immediate-loss state (NEVER USE THIS! EVER!)

(<void> game_insertion_point_unlock <short>)
; unlocks the given insertion point for the current map for all players

(<void> game_insertion_point_lock <short>)
; unlocks the given insertion point for the current map for all players

(<void> game_insertion_point_set <short>)
; debug map launching: sets the map insertion_point

(<void> saved_games_delete_campaign_save <controller>)
; delete the campaign saved game file for a controller

(<void> saved_games_autosave_free_up_space)
; tell the autosave queue to run its cleanup routine for each content type

(<void> achievement_grant_to_player <player> <string_id>)
; award named achievement to player

(<void> achievement_grant_to_controller <controller> <string_id>)
; award named achievement to player

(<void> achievement_grant_to_all_players <string_id>)
; award named achievement to all players

(<void> achievements_enable <boolean>)
; enable or disable the awarding of achievements

(<void> achievements_skip_validation_checks <boolean>)
; toggle the disabling of validation checks on achievement awarding

(<void> debug_spawning_influencers <boolean>)
; toggle debugging of any & all dynamic respawn influencers

(<void> debug_spawning_respawn_zones <boolean>)
; debugs respawn zone influences

(<void> debug_spawning_proximity_forbid <boolean>)
; debugs enemy proximity forbid influences

(<void> debug_spawning_moving_vehicle <boolean>)
; debugs moving vehicle danger influences

(<void> debug_spawning_weapon_influences <boolean>)
; debugs enemy weapon danger influences

(<void> debug_spawning_dangerous_projectiles <boolean>)
; debugs dangerous projectile influences

(<void> debug_spawning_deployed_equipment <boolean>)
; debugs deployed equipment influences

(<void> debug_spawning_proximity_enemy <boolean>)
; debugs enemy proximity bias influences

(<void> debug_spawning_teammates <boolean>)
; debugs teammate proximity bias influences

(<void> debug_spawning_dead_teammates <boolean>)
; debug dead teammate influencers

(<void> debug_spawning_random_influence <boolean>)
; toggles display of random influence contribution

(<void> debug_spawning_nominal_weight <boolean>)
; toggles display of the nominal weight influence contribution

(<void> debug_spawning_natural_weight <boolean>)
; toggles display of the natural weight influence contribution

(<void> debug_spawning_target <string>)
; sets target player for respawn influencer debugging display

(<void> debug_spawning_use_history <long>)
; sets the saved respawn state for respawn influencer debugging display

(<void> debug_initial_spawn_point_objects <boolean>)
; toggles debug cycling through multiplayer initial spawn points objects

(<void> debug_respawn_point_objects <boolean>)
; toggles debug cycling through multiplayer respawn points objects

(<void> game_export_variant_settings <string>)
; export the current game engine variant settings to the specified text file

(<void> game_engine_event_test_general <long>)
; test game engine general event

(<void> game_engine_event_test_flavor <long>)
; test game engine flavor event

(<void> core_load)
; loads debug game state from core\core.bin

(<void> core_load_name <string>)
; loads debug game state from core\<path>

(<void> core_save)
; saves debug game state to core\core.bin

(<void> core_save_name <string>)
; saves debug game state to core\<path>

(<void> core_load_game)
; loads level and game state from core\core.bin

(<void> core_load_game_name <string>)
; loads level and game state from core\<path>

(<void> core_regular_upload_to_debug_server <boolean>)
; toggle periodic core uploading to debug server

(<void> core_set_upload_option <string>)
; sets options for game state uploading (current options are 'default', 'repro', and 'stress'

(<void> core_force_immediate_save_on_core_load <boolean>)
; Forces film core loads to trigger game_save_immediate() on load (which mimics the game save that occurs on core load in stress jobs).

(<void> force_debugger_not_present <boolean>)
; forces is_debugger_present() to return false

(<void> force_debugger_always_present <boolean>)
; forces is_debugger_present() to return true

(<boolean> game_safe_to_save)
; returns FALSE if it would be a bad idea to save the player's game right now

(<boolean> game_safe_to_speak)
; returns FALSE if it would be a bad idea to play mission dialog right now

(<boolean> game_all_quiet)
; returns FALSE if there are bad guys around, projectiles in the air, etc.

(<void> game_save)
; checks to see if it is safe to save game, then saves (gives up after 8 seconds)

(<void> game_save_cancel)
; cancels any pending game_save, timeout or not

(<void> game_save_no_timeout)
; checks to see if it is safe to save game, then saves (this version never gives up)

(<void> game_save_immediate)
; disregards player's current situation and saves (BE VERY CAREFUL!)

(<boolean> game_saving)
; checks to see if the game is trying to save the map.

(<boolean> game_reverted)
; don't use this for anything, you black-hearted jerks.

(<void> survival_mode_respawn_dead_players)
; respawns all dead players even if no lives are left

(<long> survival_mode_lives_get <team>)
; get the number of lives left in survival mode

(<void> survival_mode_lives_set <team> <long>)
; set the number of lives left in survival mode

(<long> survival_mode_get_mp_round_count)
; get the number of mp rounds

(<long> survival_mode_get_mp_round_current)
; get the current mp round index

(<short> survival_mode_set_get)
; get the current set index for survival mode

(<short> survival_mode_round_get)
; get the current round index for survival mode

(<short> survival_mode_waves_per_round)
; get the number of waves per round for survival mode

(<short> survival_mode_rounds_per_set)
; get the number of rounds per set for survival mode

(<short> survival_mode_wave_get)
; get the current wave index for survival mode

(<real> survival_mode_set_multiplier_get)
; get the current wave index for survival mode

(<void> survival_mode_set_multiplier_set <real>)
; set the current wave index for survival mode

(<real> survival_mode_bonus_multiplier_get)
; get the current wave index for survival mode

(<void> survival_mode_bonus_multiplier_set <real>)
; set the current wave index for survival mode

(<long> survival_mode_get_wave_squad)
; returns the name of the squad template for the current wave

(<boolean> survival_mode_current_wave_is_initial)
; returns true if the current wave is the first of the round

(<boolean> survival_mode_current_wave_is_boss)
; returns true if the current wave is the final of the round

(<boolean> survival_mode_current_wave_is_bonus)
; returns true if the current wave is the bonus round

(<boolean> survival_mode_current_wave_is_last_in_set)
; returns true if the currect wave is the last wave before the end of the set

(<void> survival_mode_begin_new_set)
; Starts a new set

(<void> survival_mode_begin_new_wave)
; Starts a new wave

(<void> survival_mode_end_set)
; Ends a set

(<void> survival_mode_end_wave)
; Ends a wave

(<void> survival_mode_award_hero_medal)
; lets the engine award the hero medal

(<void> survival_mode_incident_new <string_id>)
; fires a start new set game event

(<void> chud_bonus_round_show_timer <boolean>)
; show the bonus timer

(<void> chud_bonus_round_start_timer <boolean>)
; tick the bonus timer

(<void> chud_bonus_round_set_timer <real>)
; set the bonus timer

(<boolean> survival_mode_meets_set_start_requirements)
; Determines whether the requirements to commence a set are met

(<void> survival_mode_set_pregame <boolean>)
; Sets pregame flag for survival mode.

(<boolean> survival_mode_is_pregame)
; Gets pregame flag for survival mode.

(<long> survival_mode_get_time_limit)
; Get the survival mode time limit from the game variant

(<long> survival_mode_get_set_count)
; Get the survival mode set count from the game variant

(<long> survival_mode_get_bonus_lives_awarded)
; Get the survival mode bonus lives from the game variant

(<long> survival_mode_get_bonus_target)
; Get the survival mode bonus target from the game variant

(<long> survival_mode_get_shared_team_life_count)
; Get the survival mode spartan life count from the game variant

(<long> survival_mode_get_elite_life_count)
; Get the survival mode elite life count from the game variant

(<long> survival_mode_max_lives)
; Get the survival mode max lives from the game variant

(<long> survival_mode_generator_count)
; Get the survival mode generator count from the game variant

(<long> survival_mode_bonus_lives_elite_death)
; Get the survival mode bonus lives for killing an elite player from the game variant

(<boolean> survival_mode_scenario_extras_enable)
; Get the survival mode scenario hazards enabled property from the game variant

(<boolean> survival_mode_weapon_drops_enable)
; Get the survival mode weapon drops enabled property from the game variant

(<boolean> survival_mode_ammo_crates_enable)
; Get the survival mode ammo crates enabled property from the game variant

(<boolean> survival_mode_waves_disabled)
; Get the survival mode waves disabled property from the game variant

(<boolean> survival_mode_generator_defend_all)
; Get the survival mode generator defend all property from the game variant

(<boolean> survival_mode_generator_random_spawn)
; Get the survival mode generator random spawn property from the game variant

(<boolean> survival_mode_current_wave_uses_dropship)
; Get the survival mode current wave uses a dropship property from the game variant

(<short> survival_mode_get_current_wave_time_limit)
; Get the survival mode duration property for the current wave from the game variant

(<long> survival_mode_get_respawn_time_seconds <mp_team>)
; Respawn time for a team

(<boolean> survival_mode_team_respawns_on_wave <team>)
; Does this team respawn only when waves complete?

(<void> survival_mode_sudden_death <boolean>)
; Start or stop sudden death for survival mode

(<void> survival_increment_human_score <player>)
; Increments the player's score by one.

(<void> survival_increment_elite_score <player>)
; Increments the player's score by one.

(<void> survival_mode_set_spartan_license_plate <long> <long> <string_id> <string_id> <string_id>)
; Shows the license plate for Spartans: Variant Icon, Designator Icon, Variant Text, Description Text, Designator Text

(<void> survival_mode_set_elite_license_plate <long> <long> <string_id> <string_id> <string_id>)
; Shows the license plate for Elites: Variant Icon, Designator Icon, Variant Text, Description Text, Designator Text

(<long> survival_mode_player_count_by_team <team>)
; given a team index, returns the player count of that team

(<object_list> survival_mode_players_by_team <team>)
; given a team index, returns an object list containing all living player objects belonging to that team

(<void> sound_impulse_predict <sound>)
; your mom part 2.

(<void> sound_impulse_trigger <sound> <object> <real> <long>)
; plays an impulse sound from the specified source object (or "none"), with the specified scale.

(<void> sound_impulse_start <sound> <object> <real>)
; plays an impulse sound from the specified source object (or "none"), with the specified scale.

(<void> sound_impulse_start_cinematic <sound> <object> <real> <real> <real>)
; <sound> <object> <scale> <3d gain> <first person gain> plays an impulse sound from the specified source object.

(<void> sound_impulse_start_effect <sound> <object> <real> <string_id>)
; plays an impulse sound from the specified source object (or "none"), with the specified scale and effect.

(<void> sound_impulse_start_with_subtitle <sound> <object> <real> <string_id> <string_id>)
; plays an impulse sound from the specified source object (or "none"), with the specified scale and displays a subtitle.

(<long> sound_impulse_time <sound>)
; returns the time remaining for the specified impulse sound.

(<long> sound_impulse_time <sound> <long>)
; <sound> <total playing time> returns the time remaining for the specified impulse sound based on <total playing time>.

(<long> sound_impulse_language_time <sound>)
; returns the time remaining for the specified impulse sound. DO NOT CALL IN CUTSCENES.

(<void> sound_impulse_stop <sound>)
; stops the specified impulse sound.

(<void> sound_impulse_start_3d <sound> <real> <real>)
; <sound> <azimuth> <scale> at the sound's minimum distance

(<void> sound_impulse_mark_as_outro <sound>)
; marks a sound as outro (meaning it plays past an unskipped cinematic).

(<void> sound_impulse_start_naked <sound> <string_id> <string_id>)
; <sound> <pitch range name> <permutation index name> through the speakers it was encoded for

(<void> sound_preload_dialogue_sounds <string>)
; <dialogue> preloads the dialogue tag so the sounds it refer to don't hitch in the dialog view.

(<void> sound_looping_predict <looping_sound>)
; your mom.

(<void> sound_looping_start_with_effect <looping_sound> <object> <real> <string_id>)
; plays a looping sound from the specified source object (or "none"), with the specified scale and playback effect.

(<void> sound_looping_start <looping_sound> <object> <real>)
; plays a looping sound from the specified source object (or "none"), with the specified scale.

(<void> sound_looping_resume <looping_sound> <object> <real>)
; plays a looping sound from the specified source object (or "none"), with the specified scale without playing the intro.

(<void> sound_looping_stop <looping_sound>)
; stops the specified looping sound.

(<void> sound_looping_stop_immediately <looping_sound>)
; stops the specified looping sound immediately.

(<void> sound_looping_set_scale <looping_sound> <real>)
; changes the scale of the sound (which should affect the volume) within the range 0 to 1.

(<void> sound_looping_set_alternate <looping_sound> <boolean>)
; enables or disables the alternate loop/alternate end for a looping sound.

(<void> sound_looping_activate_layer <looping_sound> <long>)
; activates a looping sound layer (1-4).

(<void> sound_looping_deactivate_layer <looping_sound> <long>)
; deactivates a looping sound layer (1-4).

(<void> sound_loop_spam)
; start all loaded looping sounds

(<void> sound_class_show_channel <string> <boolean>)
; shows/hides sound classes w/ substring in debug_sound_channels view

(<void> sound_class_debug_sound_start <string> <boolean>)
; shows/hides when sounds of sound classes w/ substring start

(<void> debug_sounds_enable <string> <boolean>)
; enables or disables all sound classes matching the substring.

(<void> sound_class_set_gain <string> <real> <short>)
; changes the gain on the specified sound class(es) to the specified gain over the specified number of ticks.

(<void> sound_class_set_gain_db <string> <real> <short>)
; changes the gain on the specified sound class(es) to the specified gain(dB) over the specified number of ticks.

(<void> sound_class_enable_ducker <string> <boolean>)
; enables or disables the ducker on all sound classes matching the substring.

(<void> debug_sound_environment_parameter <long> <real>)

(<void> sound_start_global_effect <string_id> <real>)
; start a global effect

(<void> sound_start_timed_global_effect <string_id> <real> <real>)
; start a global sound effect for a given amount of time

(<void> sound_stop_global_effect <string_id>)
; stop a global effect

(<void> sound_enable_acoustic_palette <string_id>)
; reenable a disabled acoustic palette

(<void> sound_disable_acoustic_palette <string_id>)
; disable an acoustic palette

(<void> vehicle_force_alternate_state <vehicle> <boolean>)
; Forces alternate state for selected vehicle (like deploying a wolverine

(<void> vehicle_auto_turret <vehicle> <trigger_volume> <real> <real> <real>)
; Sets the specified trigger volume and parameters for an auto turret

(<void> vehicle_hover <vehicle> <boolean>)
; stops the vehicle from running real physics and runs fake hovering physics instead.

(<long> vehicle_count_bipeds_killed <vehicle>)
; returns how many people this vehicle has killed

(<void> biped_ragdoll <unit>)
; given a dead biped, turns on ragdoll

(<void> water_float_reset <object>)
; allows an object to continue floating

(<void> hud_show_training_text <boolean>)
; true turns on scripted training text

(<void> hud_set_training_text <string_id>)
; sets the string id fo the scripted training text

(<void> hud_enable_training <boolean>)
; true turns training on, false turns it off.

(<void> player_training_activate_night_vision)
; guess

(<void> player_training_activate_crouch)
; guess

(<void> player_training_activate_stealth)
; guess

(<void> player_training_activate_equipment)
; guess

(<void> player_training_activate_jump)
; guess

(<void> player_training_reset <controller>)
; Resets all player training data

(<void> chud_texture_cam <boolean>)
; turns the chud texturecam on/off

(<void> chud_show <boolean>)
; hides/shows the entire chud

(<void> chud_show_weapon_stats <boolean>)
; hides/shows the weapon huds

(<void> chud_show_crosshair <boolean>)
; hides/shows the crosshair

(<void> chud_show_shield <boolean>)
; hides/shows the shield

(<void> chud_show_grenades <boolean>)
; hides/shows the grenade hud

(<void> chud_show_messages <boolean>)
; hides/shows the chud messages

(<void> chud_show_motion_sensor <boolean>)
; hides/shows the motion sensor chud

(<void> chud_show_cinematics <boolean>)
; hides/shows the cinematics huds

(<void> chud_fade_weapon_stats_for_player <player> <real> <long>)
; fade out the hud to <real> opacity over <integer> ticks

(<void> chud_fade_crosshair_for_player <player> <real> <long>)
; fade out the hud to <real> opacity over <integer> ticks

(<void> chud_fade_shield_for_player <player> <real> <long>)
; fade out the hud to <real> opacity over <integer> ticks

(<void> chud_fade_grenades_for_player <player> <real> <long>)
; fade out the hud to <real> opacity over <integer> ticks

(<void> chud_fade_messages_for_player <player> <real> <long>)
; fade out the hud to <real> opacity over <integer> ticks

(<void> chud_fade_motion_sensor_for_player <player> <real> <long>)
; fade out the hud to <real> opacity over <integer> ticks

(<void> chud_fade_chapter_title_for_player <player> <real> <long>)
; fade out the hud to <real> opacity over <integer> ticks

(<void> chud_fade_cinematics_for_player <player> <real> <long>)
; fade out the hud to <real> opacity over <integer> ticks

(<void> chud_cinematic_fade <real> <real>)
; parameter 1 is how, parameter 2 is when

(<void> chud_track_object <object> <boolean>)
; turns on/off the navpoint and display text of the specified object

(<void> chud_track_object_with_priority <object> <long>)
; turns on the navpoint and display text of the specified object

(<void> chud_track_object_with_priority <object> <long> <string_id>)
; turns on the navpoint and display text of the specified object

(<void> chud_track_flag <cutscene_flag> <boolean>)
; turns on/off the navpoint and display text of the specified flag

(<void> chud_track_flag_with_priority <cutscene_flag> <long>)
; turns on the navpoint and display text of the specified flag

(<void> chud_track_flag_with_priority <cutscene_flag> <long> <string_id>)
; turns on the navpoint and display text of the specified flag

(<void> chud_track_object_for_player <player> <object> <boolean>)
; turns on/off the navpoint and display text of the specified object

(<void> chud_track_object_for_player_with_priority <player> <object> <long>)
; turns on the navpoint and display text of the specified object

(<void> chud_track_object_for_player_with_priority <player> <object> <long> <string_id>)
; turns on the navpoint and display text of the specified object

(<void> chud_track_flag_for_player <player> <cutscene_flag> <boolean>)
; turns on/off the navpoint and display text of the specified flag

(<void> chud_track_flag_for_player_with_priority <player> <cutscene_flag> <long>)
; turns on the navpoint and display text of the specified flag

(<void> chud_track_flag_for_player_with_priority <player> <cutscene_flag> <long> <string_id>)
; turns on the navpoint and display text of the specified flag

(<void> chud_track_object_set_vertical_offset <object> <real>)
; set the vertical offset in world units for a chud_track_object object

(<void> chud_track_cutscene_flag_set_vertical_offset <cutscene_flag> <real>)
; set the vertical offset in world units for a chud_track_cutscene_flag

(<void> chud_breadcrumbs_track_flag <cutscene_flag> <boolean>)
; turns on/off the improved navpoint and display text of the specified flag

(<void> chud_breadcrumbs_track_flag_with_priority <cutscene_flag> <long>)
; turns on the improved navpoint and display text of the specified flag

(<void> chud_breadcrumbs_track_object <object> <boolean>)
; turns on/off the improved navpoint and display text of the specified object

(<void> chud_breadcrumbs_track_position <real> <real> <real> <string> <boolean>)
; turns on/off the improved navpoint in the specified position

(<void> chud_breadcrumbs_track_position_with_priority <real> <real> <real> <string> <long> <boolean>)
; turns on/off the improved navpoint in the specified position

(<void> chud_breadcrumbs_track_object_with_priority <object> <long>)
; turns on the improved navpoint and display text of the specified object

(<void> chud_breadcrumbs_track_object_with_priority <object> <long> <string_id>)
; turns on the improved navpoint and display text of the specified object

(<void> chud_breadcrumbs_track_object_set_vertical_offset <object> <real>)
; set the vertical offset in world units for a chud_breadcrumbs_track_object object

(<boolean> chud_breadcrumbs_using_revised_nav_points)
; checks wether revised navpoints are active
; NETWORK SAFE: Unknown, assumed unsafe

(<void> chud_post_message_HACK <string>)
; posts a string to the given user's HUD.  Use NONE for all users
; this is for prototyping only, don't use this and expect to ship with it

(<void> chud_post_message <player> <string_id>)
; posts a string to the given player's HUD.

(<void> chud_post_medal <player> <string_id>)
; posts a medal to the given player's HUD.

(<void> chud_set_static_hs_variable <player> <long> <real>)
; Sets a CHUD variable

(<void> chud_set_countdown_hs_variable <player> <long> <real>)
; Sets a CHUD variable that counts down to 0

(<void> chud_set_countup_hs_variable <player> <long> <real>)
; Sets a CHUD variable that counts up forever

(<void> chud_clear_hs_variable <player> <long>)
; Clear a CHUD variable

(<void> chud_get_hs_variable <real> <player>)
; Get the value of a CHUD variable

(<void> chud_show_arbiter_ai_navpoint <boolean>)
; hides/shows the entire chud

(<void> chud_show_screen_objective <string_id>)
; hides/shows the objective tip in the chud

(<void> chud_show_screen_chapter_title <string_id>)
; hides/shows the chapter title in the chud

(<void> chud_show_screen_training <player> <string_id>)
; hides/shows the training tip in the chud

(<void> cls)
; clears console text from the screen

(<void> events_spam_suppression_enable <boolean>)
; enables or disables the suppression of event spamming

(<void> error_geometry_show <string>)
; highlights all error geometry with a name that includes the given substring

(<void> error_geometry_hide <string>)
; hides all error geometry with a name that includes the given substring

(<void> error_geometry_show_all)
; highlights all error geometry

(<void> error_geometry_hide_all)
; hides all error geometry

(<void> error_geometry_list)
; prints out a list of all error geometry types and counts

(<void> player_effect_set_max_translation <real> <real> <real>)
; <x> <y> <z>

(<void> player_effect_set_max_rotation <real> <real> <real>)
; <yaw> <pitch> <roll>

(<void> player_effect_set_max_rumble <real> <real>)
; <left> <right>

(<void> player_effect_start <real> <real>)
; <max_intensity> <attack time>

(<void> player_effect_stop <real>)
; <decay>

(<void> player_effect_set_max_translation_for_player <player> <real> <real> <real>)
; <x> <y> <z>

(<void> player_effect_set_max_rotation_for_player <player> <real> <real> <real>)
; <yaw> <pitch> <roll>

(<void> player_effect_set_max_rumble_for_player <player> <real> <real>)
; <left> <right>

(<void> player_effect_start_for_player <player> <real> <real>)
; <max_intensity> <attack time>

(<void> player_effect_stop_for_player <player> <real>)
; <decay>

(<void> time_code_show <boolean>)
; shows the time code timer

(<void> time_code_start <boolean>)
; starts/stops the time code timer

(<void> time_code_reset)
; resets the time code timer

(<void> render_atmosphere_fog <boolean>)
; enable/disable atmosphere fog

(<void> motion_blur <boolean>)
; enable/disable motion blur

(<void> antialias_blur <boolean>)
; enable/disable antialias blur

(<void> render_weather <boolean>)
; enable/disable atmosphere fog

(<void> render_patchy_fog <boolean>)
; enable/disable patchy fog

(<void> render_ssao <boolean>)
; enable/disable ssao

(<void> render_planar_fog <boolean>)
; enable/disable planar fog

(<boolean> motion_blur_enabled)
; check if motion blur is enabled

(<void> render_disable_vsync <boolean>)
; enable/disable vsync

(<boolean> player_has_skills)
; Are you the best?

(<void> player_has_mad_secret_skills <long>)
; You are the best!

(<void> controller_invert_look)
; invert look on all attached controllers

(<void> controller_look_speed <short>)
; set look speed for all attached controllers

(<void> player_invert_look <player>)
; invert player's look inversion setting

(<long> user_interface_controller_get_last_level_played <short>)
; returns index of last completed solo level for profile index passed in

(<void> controller_set_look_inverted <controller> <boolean>)
; set look inversion for specified controller

(<void> controller_set_vibration_enabled <controller> <boolean>)
; set vibration for specified controller

(<void> controller_set_flight_stick_aircraft_controls <controller> <boolean>)
; set airrcraft flight stick controls for specified controller

(<void> controller_set_auto_center_look <controller> <boolean>)
; set auto center look for specified controller

(<void> controller_set_crouch_lock <controller> <boolean>)
; set crouch lock for specified controller

(<void> controller_set_southpaw <controller> <boolean>)
; set southpaw for specified controller

(<void> controller_set_clench_protection <controller> <boolean>)
; set clench protection look for specified controller

(<void> controller_set_button_preset <controller> <button_preset>)
; set button preset for specified controller

(<void> controller_set_custom_button <controller> <long> <long>)
; set custom button for specified controller

(<void> controller_set_joystick_preset <controller> <joystick_preset>)
; set joystick preset for specified controller

(<void> controller_set_look_sensitivity <controller> <short>)
; set look sensitivity for specified controller

(<void> controller_unlock_single_player_levels <controller>)
; <controller> unlock all single player levels for specified controller

(<void> controller_lock_single_player_levels <controller>)
; <controller> lock all single player levels for specified controller

(<void> controller_unlock_skulls <controller>)
; <controller> unlock all campaign skulls for specified controller

(<void> controller_lock_skulls <controller>)
; <controller> lock all campaign skulls for specified controller

(<void> controller_unlock_models <controller>)
; <controller> unlock all model permutations for specified controller

(<void> controller_lock_models <controller>)
; <controller> lock all model permutations for specified controller

(<void> controller_set_single_player_level_completed <controller> <long> <boolean> <game_difficulty> <boolean>)
; <controller> <level index> <co-op> <difficulty> <completed> set the single player levels completed state for specified controller

(<void> controller_set_primary_change_color <controller> <player_color>)
; set primary change color for specified controller

(<void> controller_set_secondary_change_color <controller> <player_color>)
; set secondary change color for specified controller

(<void> controller_set_tertiary_change_color <controller> <player_color>)
; set tertiary color for specified controller

(<void> controller_set_primary_emblem_color <controller> <player_color>)
; set primary change color for specified controller

(<void> controller_set_secondary_emblem_color <controller> <player_color>)
; set secondary change color for specified controller

(<void> controller_set_background_emblem_color <controller> <player_color>)
; set tertiary color for specified controller

(<void> controller_set_player_character_type <controller> <player_model_choice>)
; set player character type for specified controller

(<void> controller_set_emblem_info <controller> <short> <short>)
; set emblem for specified controller

(<void> controller_set_voice_output_setting <controller> <voice_output_setting>)
; set voice output setting for specified controller

(<void> controller_set_subtitle_setting <controller> <subtitle_setting>)
; set subtitle setting for specified controller

(<void> controller_set_nag_message_data <controller> <long> <long> <long> <long>)
; <controller> <last global nag msg id> <last per user nag msg id> <last global nag msg view count> <last per-user nag msg view count>

(<void> controller_temporary_users_always_attached <boolean>)
; toggle pretending that temporary users' controllers are always attached

(<void> controller_set_new_user_experience <controller> <boolean>)
; <controller> set if this controller will get the new user experience

(<void> controller_set_initial_bonus_toast <controller> <boolean>)
; <controller> set if this controller has seen the 5000 initial credits toast

(<void> controller_set_loyalty_bonus_toast <controller> <short>)
; <controller> <credits> act as if this controller was awarded loyalty credits from the LSP

(<void> controller_set_generic_bonus_toast <controller> <short>)
; <controller> <credits> act as if this controller was awarded bonus credits from the LSP

(<void> controller_set_unsignedin_user <controller> <boolean>)
; Toggle controller as unsigned-in user

(<void> controller_display_storage_device_selection <controller>)
; display storage device selection ui for the specified controller

(<void> font_cache_bitmap_save <string>)
; save font cache bitmap to targa file

(<void> ui_debug_load_main_menu)
; loads the main menu screen

(<void> ui_debug_text_bounds <boolean>)
; toggle rendering of ui text boundaries

(<void> ui_debug_text_font <boolean>)
; toggle display of ui text font

(<void> ui_debug_show_title_safe_bounds <boolean>)
; toggle display of title safe boundary

(<void> ui_debug_element_bounds <boolean>)
; toggle rendering of widget tag block bounds

(<void> ui_memory_dump <string>)
; dump the UI memory tracked allocations to a specified file

(<void> ui_time_scale_step <real>)
; move the ui time forward by a specified amount on next tick

(<void> xoverlapped_debug_render <boolean>)
; toggle display a list of active xoverlapped tasks

(<void> shader_compile_target_platform <string>)
; set target platform for shader compiling

(<void> shader_compile_shader_pipeline <string>)
; set valid part of pipeline for compiling

(<void> shader_compile_filter_shader_type <string>)
; skip compiling for one specifical type of templated shader

(<void> shader_compile_filter_category_option <string> <string>)
; skip compiling for one specifical combination of category and option for templated shader

(<void> gui_load_screen <string_id>)
; load the named screen

(<void> gui_reset)
; cleans out the halox ui screens and errors

(<void> gui_start)
; tells the window location manager to resume

(<void> gui_stop)
; tells the window location manager to stop bringing up screens on its own

(<void> gui_error_post <string_id> <long> <boolean>)
; <error_code> <controller_index> <must_be_cleared> sets an error condition in the ui

(<void> gui_error_post_toast <string_id> <long> <boolean>)
; <error_code> <controller_index> <must_be_cleared> sets an error condition in the ui

(<void> gui_error_resolve <string_id> <long>)
; <error_name> <controller_index> resolves an error condition in the ui

(<void> gui_error_clear <string_id> <long>)
; <error_name> <controller_index> clears an error condition in the ui

(<void> gui_dialog_show <string_id>)
; <dialog name>

(<void> gui_debug_music_state <boolean>)
; Toggle display of UI music state

(<void> cc_enable <boolean>)
; toggle closed captions

(<void> cc_test <boolean>)
; test a line of cc text

(<void> objectives_clear)
; clears the mission objectives.

(<void> objectives_show_up_to <long>)
; show primary campaign objectives 0..n

(<void> objectives_finish_up_to <long>)
; mark primary campaign objectives 0..n as complete

(<void> objectives_show <long>)
; show secondary campaign objective N
; NETWORK SAFE: Unknown, assumed unsafe

(<void> objectives_finish <long>)
; mark secondary campaign objective N as complete
; NETWORK SAFE: Unknown, assumed unsafe

(<void> objectives_unavailable <long>)
; mark secondary campaign objective N as unavailable
; NETWORK SAFE: Unknown, assumed unsafe

(<void> objectives_secondary_show <long>)
; show secondary campaign objective N

(<void> objectives_secondary_finish <long>)
; mark secondary campaign objective N as complete

(<void> objectives_secondary_unavailable <long>)
; mark secondary campaign objective N as unavailable

(<void> objectives_set_string <long> <string_id>)
; set the primary campaign objective string into the objectives text

(<void> objectives_secondary_set_string <long> <string_id>)
; set the secondary campaign objective string into the objectives text

(<void> objectives_show_string <string_id>)
; show secondary campaign objective
; NETWORK SAFE: Unknown, assumed unsafe

(<void> objectives_finish_string <string_id>)
; mark secondary campaign objective as complete
; NETWORK SAFE: Unknown, assumed unsafe

(<void> objectives_unavailable_string <string_id>)
; mark secondary campaign objective as unavailable
; NETWORK SAFE: Unknown, assumed unsafe

(<void> objectives_secondary_show_string <string_id>)
; show secondary campaign objective

(<void> objectives_secondary_finish_string <string_id>)
; mark secondary campaign objective as complete

(<void> objectives_secondary_unavailable_string <string_id>)
; mark secondary campaign objective as unavailable

(<void> input_suppress_rumble <boolean>)
; disable the friggin' rumble

(<void> input_disable_claw_button_combos <boolean>)
; disabe the Claw button combos (for monkey testing)

(<void> update_remote_camera)
; force synchronization of remote machine camera

(<void> net_build_network_config)
; writes a new network configuration file

(<void> net_build_game_variant <boolean> <string>)
; writes the current game variant to a file

(<void> net_verify_game_variant <string>)
; verifies the contents of a packed game variant file

(<void> net_load_and_use_game_variant <string>)
; loads the contents of a packed game variant file and submits to networking for use in the current game

(<void> net_use_hopper_directory <string>)
; set which hopper directory to use

(<void> net_quality_dump)
; dump all network quality statistics

(<void> net_quality_clear)
; clear all network quality statistics

(<void> net_quality_set_connection_badness_history <boolean> <short>)
; set connection history, true/false, # of bits to set

(<void> net_quality_set_squad_host_badness_history <boolean> <short>)
; set host badness history, true/false, # of bits to set

(<void> net_quality_set_squad_client_badness_history <boolean> <short>)
; set client badness history, true/false, # of bits to set

(<void> net_quality_set_squad_speculative_migration_badness_history <boolean> <short>)
; true/false, # of bits to set

(<void> net_quality_set_squad_bridging_badness_history <boolean> <short>)
; true/false, # of bits to set

(<void> net_quality_set_group_host_badness_history <boolean> <short>)
; set host badness history, true/false, # of bits to set

(<void> net_quality_set_group_client_badness_history <boolean> <short>)
; set client badness history, true/false, # of bits to set

(<void> net_quality_set_group_speculative_migration_badness_history <boolean> <short>)
; true/false, # of bits to set

(<void> net_quality_set_group_bridging_badness_history <boolean> <short>)
; true/false, # of bits to set

(<void> net_status_filter <string>)
; filters the set of network status to display

(<void> net_test_ping)
; network test: sends a ping

(<void> net_test_channel_delete)
; network test: deletes all channels

(<void> net_test_delegate_host <long>)
; network test: delegate host to the specified player

(<void> net_test_delegate_leader <long>)
; network test: delegate leadership to the specified player

(<void> net_test_map_name <string>)
; network test: sets the name of the scenario to play

(<void> net_test_variant <string_id>)
; network test: sets the game variant to play

(<void> net_test_campaign_difficulty <short>)
; network test: sets the difficulty of the campaign game to play

(<void> net_test_player_color <long>)
; network test: temporarily sets the color for all local players

(<void> net_test_reset_objects)
; network test: resets all objects on the map

(<void> net_test_fatal_error)
; creates a fatal simulation error

(<void> events_enabled <boolean>)
; enable/disable all events

(<void> events_suppression <boolean>)
; enable/disable event suppression

(<void> events_suppress_display <boolean>)
; disables console display for events

(<void> events_global_display <event>)
; sets the global event console display level

(<void> events_global_log <event>)
; sets the global event log level

(<void> events_global_debugger <event>)
; sets the global event debugger display level

(<void> events_global_datamine <event>)
; sets the global event datamine level

(<void> events_category_display <string> <event>)
; sets the console display level for a named category of network events

(<void> events_category_force_display <string> <event>)
; sets the forced console display level for a named category of network events

(<void> events_category_log <string> <event>)
; sets the log level for a named category of network events

(<void> events_category_debugger <string> <event>)
; sets the debugger display level for a named category of network events

(<void> events_category_debugger_break <string> <event>)
; sets the debugger break level for a named category of network events

(<void> events_category_halt <string> <event>)
; sets the halt (assert/crash) level for a named category of network events

(<void> events_category_datamine <string> <event>)
; sets the datamine level for a named category of network events

(<void> events_list_categories <string>)
; lists all categories that exist under a particular category string

(<void> event_logs_snapshot)
; copy error files to the error snapshot folder

(<void> events_disable_suppression <boolean>)
; DEPRECATED(use events_suppression): disable/enable event suppression

(<void> event_global_display_category <event>)
; DEPRECATED(use events_global_display): sets the global event console display level

(<void> event_global_log_category <event>)
; DEPRECATED(use events_global_log): sets the global event log level

(<void> event_global_remote_log_category <event>)
; DEPRECATED(use events_global_datamine): sets the global event datamine level

(<void> event_display_category <string> <event>)
; DEPRECATED(use events_category_display): sets the console display level for a named category of network events

(<void> event_force_display_category <string> <event>)
; DEPRECATED(use events_category_force_display): sets the forced console display level for a named category of network events

(<void> event_debugger_break_category <string> <event>)
; DEPRECATED(use events_category_debugger_break): sets the debugger break level for a named category of network events

(<void> event_halt_category <string> <event>)
; DEPRECATED(use events_category_halt): sets the halt (assert/crash) level for a named category of network events

(<void> event_list_categories <string>)
; DEPRECATED(use events_list_categories): lists all categories that exist under a particular category string

(<void> events_suppress_console_display <boolean>)
; DEPRECATED(use events_suppress_display): disables console display for events

(<void> play_bink_movie <string>)
; um...

(<void> play_bink_movie_from_tag <bink_definition>)
; play a bink movie from a tag

(<void> play_credits_skip_to_menu)
; plays credits movie, pressing any button will stop credits and launch main menu

(<long> bink_time)
; uh...

(<void> set_global_doppler_factor <real>)
; new doppler factor: <real>

(<void> set_global_mixbin_headroom <long> <long>)
; blah

(<void> debug_sound_environment_source_parameter <long> <real>)
; blah

(<void> data_mine_set_mission_segment <string>)
; sets the mission segment for single player data mine events

(<void> data_mine_insert <string>)
; insert text and camera position in the data mine

(<void> data_mine_upload)
; upload all data mining data files to debug server

(<void> data_mine_enable <boolean>)
; enable/disable data mining

(<void> data_mine_flush)
; flush any pending data mine data to disk

(<void> data_mine_debug_menu_setting <string>)
; close debug menu and set user experience setting to string

(<void> data_mine_open_debug_menu)
; open debug menu

(<void> data_mine_set_display_mission_segment <boolean>)
; toggle display of data mine mission segment

(<void> data_mine_set_header_flag <long> <boolean>)
; sets the source flags of the data mine header (used for backend bucketing)

(<void> test_memory_allocators <long> <short> <short> <short> <long>)
; performs tests on different memory allocators

(<void> test_memory_allocators <long> <short> <short> <short> <long> <string>)
; performs tests on different memory allocators and saves the results

(<void> test_xcr_monkey_enable <boolean>)
; enable/disable controller monkeys for all in game players

(<void> test_show_guide_status)
; prints the guide status as automation events.

(<void> test_show_users_xuids)
; prints the signed in users' xuids as automation events.

(<void> test_show_are_users_friends <long> <string>)
; prints whether the current controller and specified xuid are friends as automation events

(<void> test_invite_friend <long> <string>)
; shows the guide send friend invite ui from the current controller to the specified xuid

(<void> test_get_squad_session_id)
; get the current squad session id

(<void> cui_get_active_screens <long>)
; <arbitrary int> list the current cui screens

(<void> cui_get_screen_components <long> <long>)
; <arbitrary int> <window index> lists widgets in a screen

(<void> cui_get_component_properties <long> <long> <string_id>)
; <arbitrary int> <window index> <component_name> lists a component's property names, types and values

(<void> cui_send_button_press <long> <long> <long> <string>)
; <arbitrary int> <window index> <controller index> <button name> sends the button press to the screen.  Use controller index -1 for automatically guessing the right controller.

(<void> cui_invoke_list_item_by_string_id <long> <long> <string_id> <string_id> <string_id> <string_id>)
; <command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one

(<void> cui_invoke_list_item_by_long <long> <long> <string_id> <string_id> <string_id> <long>)
; <command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one

(<void> cui_invoke_list_item_by_boolean <long> <long> <string_id> <string_id> <string_id> <boolean>)
; <command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one

(<void> cui_invoke_list_item_by_text <long> <long> <string_id> <string_id> <string_id> <string>)
; <command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one

(<void> test_download_storage_file <string> <string>)
; <url> <filename> downloads a file from LSP to the client

(<void> test_game_results_save_to_file <string>)
; <filename> save game results to a file.

(<void> test_game_results_load_from_file <string>)
; <filename> load game results into memory for use in the carnage report.  the format may change build to build causing this to fail or weird results to come up.

(<void> test_game_results_make_random)
; makes random game results using the current variant

(<void> test_fragment_utility_drive <long> <long> <long>)
; <file_count> <growth_repetitions> <growth_size> writes files of varying sizes to the utiltiy drive in an effort to fragment it really badly

(<void> flag_new <string> <string>)
; <name> <description>

(<void> flag_new_at_look <string> <string>)
; <name> <description>

(<void> flags_clear)
; erases all comment flags when not in editor (sapien)

(<void> flags_default_name <string>)
; <default comment flag name>

(<void> flags_default_comment <string>)
; <default comment flag description>

(<void> flags_set_filter <string>)
; <flag name filter>

(<void> bug_now <string>)
; uploads files for bug <name>

(<void> bug_now_lite <string>)
; uploads files (w/ no minidump) for bug <name>

(<void> bug_now_auto <boolean>)
; uploads bug files, auto named <include_minidump>

(<void> bug_now_on_next_kill <string>)
; uploads files for a bug <name> for the next kill that could produce an incident

(<object_list> object_list_children <object> <object_definition>)
; returns list of child objects by definition.

(<void> ai_selected_actor_jump <real> <real>)
; Makes the currently selected actor jump x wus forward and y wus up

(<void> dump_loaded_tags)
; dump a list of open tags to tag_dump_<map_name>.txt

(<void> interpolator_start <string_id>)
; <name> starts up the specified interpolator - uses the name of the interpolator defined in tags, NOT scenario_interpolatorXX!

(<void> interpolator_stop <string_id>)
; <name> stops the progression of the specified interpolator - uses the name of the interpolator defined in tags, NOT scenario_interpolatorXX!

(<void> interpolator_stop_all)
; stops all interpolators

(<void> interpolator_dump <string_id>)
; <name> prints out the status of the specified interpolator

(<void> interpolator_dump_all)
; prints out the status of all defined interpolators in the scenario

(<void> set_pc_runtime_language <string>)
; sets the pc language from a string

(<void> animation_cache_stats_reset)

(<void> cinematic_clone_players_weapon <object> <string_id> <string_id>)
; clone the first player's most reasonable weapon and attach it to the specified object's marker

(<void> cinematic_move_attached_objects <object> <string_id> <string_id> <string_id>)
; move the object's children attached to the first marker to the second marker

(<void> vehicle_enable_ghost_effects <boolean>)

(<void> set_global_sound_environment <real> <real> <real> <real> <long> <real>)
; this is your brain on drugs

(<void> game_save_cinematic_skip)
; don't use this, except in one place.

(<void> cinematic_outro_start)
; flag this cutscene as an outro cutscene

(<void> cinematic_enable_ambience_details <boolean>)
; enable/disable ambience details in cinematics

(<void> cache_block_for_one_frame)
; call this to force texture and geometry cache to block until satiated

(<void> sound_suppress_ambience_update_on_revert)
; call this when transitioning between two cinematics so ambience won't fade in between the skips

(<void> render_autoexposure_enable <boolean>)
; toggle autoexposure

(<void> render_exposure_full <real> <real> <real> <real> <real>)
; animate exposure from <initial> to <final> stops using <initial> to <final> opacity in <seconds>

(<void> render_exposure_fade_in <real> <real>)
; fade to animated exposure <stops> in <seconds>

(<void> render_exposure_fade_out <real>)
; fade to default exposure settings in <seconds>

(<void> render_exposure <real> <real>)
; fade to animated exposure <stops> in <seconds>

(<void> render_autoexposure_instant <long>)
; instantly adopt auto exposure values in the next N frames

(<void> render_exposure_set_environment_darken <real>)
; set environmental darkening

(<void> render_depth_of_field_enable <boolean>)
; turns depth of field on and off

(<void> render_depth_of_field <real> <real> <real> <real>)
; animate depth of field, in focus from <near> to <far>, with depth of field <depth>, in <ticks>

(<void> render_dof_focus_depth <real>)
; interpolate depth of field to <depth>

(<void> render_dof_blur_animate <real> <real>)
; interpolate depth of field maximum blur to <blur> in <ticks>

(<void> predict_animation <animation_graph> <string_id>)
; begin loading an animation for the graph provided

(<long> mp_player_count_by_team <mp_team>)
; given a team index, returns an object list containing all living player objects belonging to that team

(<object_list> mp_players_by_team <mp_team>)
; given a team index, returns an object list containing all living player objects belonging to that team

(<long> mp_active_player_count_by_team <mp_team>)
; given a team index, returns an object list containing all living player objects belonging to that team

(<void> deterministic_end_game)
; end game deterministically, by inserting a simulation queue event

(<void> mp_game_won <mp_team>)
; given a team index, declares the game a victory for that team and a loss for all others

(<void> mp_respawn_override_timers <mp_team>)
; causes all players on the specified team waiting to respawn (due to timer) to respawn immediately

(<void> mp_ai_allegiance <team> <mp_team>)
; causes an allegiance to be formed between an AI squad team and a multiplayer team

(<void> mp_allegiance <mp_team> <mp_team>)
; create an allegiance between two multiplayer teams

(<boolean> mp_round_started)
; used to determine if the mp game is in the active-round phase or not

(<void> mp_round_end_with_winning_player <player>)
; ends the current round with a winning player

(<void> mp_round_end_with_winning_team <mp_team>)
; ends the current round with a winning team

(<void> mp_round_end)
; ends the current round with no winning team

(<void> mp_scripts_reset)
; on the host in a distributed game, resets the scripts (but not internal hs globals)

(<void> tag_file_set_backend <string>)
; override the tag file system backend

(<void> mp_debug_goal_object_boundary_geometry <boolean>)
; toggle debug geometry for multiplayer goal objects

(<void> mp_dump_candy_monitor_state)
; dumps the current candy monitor state to a file on disk

(<void> determinism_debug_manager_enable_logging <boolean>)
; enable/disable determinism logging

(<void> determinism_debug_manager_set_trace_flags <long>)
; set which determinism debugging traces should be turned on

(<void> determinism_debug_manager_enable_game_state_checksum <boolean>)
; enable/disable determinism checkpoints

(<void> determinism_debug_manager_enable_trace <boolean>)
; enable determinism tracing

(<void> determinism_debug_manager_set_consumer_sample_level <string> <long>)
; sets sample level for a consumer

(<void> determinism_log_compare_log_files <string> <string>)
; comares determinism log files

(<void> determinism_debug_manager_enable_log_file_comparision_on_oos <boolean>)
; enables/disables determinism log file comparision on oos

(<void> saved_film_play <controller> <string>)
; plays a saved film for given controller

(<void> saved_film_play_last)
; play back last recorded saved film for given controller

(<void> saved_film_disable_version_checking <boolean>)
; disable saved film version checking

(<void> saved_film_toggle_debug_saving <boolean>)
; toggle saving of last film to the debug output directory automatically after each game level

(<void> saved_films_show_timestamp <boolean>)
; toggle showing timestamp for saved film playback

(<boolean> mover_set_program <object> <short>)
; Set the motor program of the given mover object

(<void> floating_point_exceptions_enable <boolean>)
; enables/disables floating point exceptions

(<void> tag_reload_force <string>)
; rather than force a painful xsync to test xsync, allow me to fake a tag_reload

(<void> tag_unload_force <string>)
; call tag_unload

(<void> tag_load_force <string>)
; call tag_load

(<void> predict_bink_movie <string>)
; um2...

(<void> predict_bink_movie_from_tag <bink_definition>)
; um2...

(<void> profiler_dump_history)
; dump profile history.

(<void> camera_set_mode <unit> <long>)
; <unit_index> <mode_index> sets user's camera perspective

(<void> camera_set_flying_cam_at_point <unit> <cutscene_camera_point>)
; <unit_index> <camera_point> sets a flying camera perspective

(<void> camera_set_target <unit> <object>)
; <unit_index> <object_index> sets the current camera's target

(<void> camera_set_orbiting_cam_at_target_relative_point <unit> <string_id> <real> <real> <real>)
; <unit_index> <target_marker_name> <relative_x_position> <relative_y_position> <relative_z_position> sets an orbiting camera pointing at a given marker from an object relative point 

(<void> director_cycle_debug_camera <long>)
; <user index>

(<long> game_coop_player_count)
; returns the number of coop players active in game

(<void> player_force_mode <string_id>)
; force your will upon the player

(<void> profiler_output_pulse)
; dump profile stats to telnet console.

(<void> string_id_name <long>)
; prints the name of the string id to the console

(<void> find <string>)
; prints any hs command matching the string passed in

(<void> add_recycling_volume <trigger_volume> <long> <long>)
; removes garbage in specified trigger volume to a max count over n seconds

(<void> add_recycling_volume_by_type <trigger_volume> <long> <long> <long>)
; removes garbage objects matching the type mask in the specified trigger volume to a max count over n seconds. 1=biped, 2=vehicle, 4=weapon, 8=equipment, and 1024=crate. Add values together for combos, zero means all types Syntax: <trigger_volume> <max_count> <time_to_collect> <type_mask> 

(<void> tag_resources_set_per_frame_publish <boolean>)
; turns on/off per frame resource publish (stress testing)

(<void> object_recycling_clear_history)
; clear object recycling history

(<void> dump_cinematics_script)
; dump the cinematic script to cinematic_dump.txt

(<void> dump_tag_stats)
; dump tag group memory usage stats into tag_groups_memory_usage_stats.txt

(<void> global_preferences_clear)
; clears all game preference information

(<void> network_storage_set_storage_subdirectory <string>)
; <subdirectory> The default is the build number or 'untracked'

(<void> network_storage_set_storage_user <string>)
; <user> Use the network file stored on untracked\<user>.

(<void> network_storage_run_locally <boolean>)
; run off local storage files e:\reach\storage\title\<title_id>\...

(<void> status_line_dump)
; dumps active status_lines to system_log.txt

(<long> game_tick_get)
; returns current game tick

(<void> loop_it <string>)
; runs the expression at most once per tick

(<void> loop_clear)
; runs the expression at most once per tick

(<void> status_lines_enable <string>)
; enables status_lines that were initialized with identifiers that match the input substring

(<void> status_lines_disable <string>)
; disables status_lines that were initialized with identifiers that match the input substring

(<boolean> on_target_platform)
; returns true if the game thinks it's running on the target platform

(<void> f7_profiler_enable <boolean>)
; toggles the profile collection on/off - use to eliminate 95% of f7 profiler CPU overhead if desired for testing.

(<void> f7_profiler_substring_activate <string>)
; activates profile sections based on a substring. Supports * wildcard. Use profiler_activate "" to reset filtering.

(<void> f7_profiler_substring_deactivate <string>)
; deactivates profile sections based on a substring. Supports * wildcard. Use profiler_deactivate "" to reset filtering.

(<void> net_get_game_id)
; prints the id of the game to the console

(<void> saved_film_set_playback_game_speed <real>)
; set the saved film playback speed

(<void> noguchis_mystery_tour <string>)
; set the additional music directory to dump into the cache file

(<void> designer_zone_sync)
; synchronizes global objects with loaded designer zones

(<void> dump_designer_zone <designer_zone>)
; dump interesting info about a designer zone

(<void> designer_zone_activate <designer_zone>)
; activate designer zone

(<void> designer_zone_deactivate <designer_zone>)
; deactivates designer zone, deletes objects that were part of that designer zone

(<void> object_set_always_active <object> <boolean>)
; sets/unsets the object always active flag to ignore pvs changes

(<void> saved_film_seek_to_film_tick <long>)
; seeks to a film tick

(<void> saved_film_seek_to_film_timestamp <real>)
; seeks to a film time

(<boolean> tag_is_active <any_tag_not_resolving>)
; returns true/false if you can create this tag with the active zones

(<void> tag_resources_set_incremental_publish <boolean>)
; turns on/off incremental resource publish (prediction)

(<void> tag_resources_enable_optional_caching <boolean>)
; turns on/off optional resource prediction

(<void> dump_active_resources)
; blah

(<void> object_set_persistent <object> <boolean>)
; <object_index> <true/false> prevent this object from being garbage collected

(<void> display_zone_size_estimates <boolean>)
; display zone size estimates HUD

(<void> report_zone_size_estimates)
; dump zone size estimates to design report log

(<void> net_test_disconnect_squad)
; disconnects the squad session

(<void> net_test_disconnect_group)
; disconnects the group session

(<void> net_test_clear_squad_session_parameter <long>)
; clears a squad session parameter

(<void> net_test_clear_group_session_parameter <long>)
; clears a group session parameter

(<void> net_test_life_cycle_pause <string> <boolean>)
; pauses the life cycle in the specified state

(<void> net_test_life_cycle_display_states)
; display the life cycle states

(<void> overlapped_display_task_descriptions)
; displays all tasks

(<void> overlapped_task_inject_error <string> <boolean>)
; inject error for tasks

(<void> test_sapien_crash)

(<void> output_window_add_category <string>)
; Add an event category to be watched in the output window.

(<void> output_window_remove_category <string>)
; Remove an event category from being watched in the output window.

(<void> output_window_list_categories)
; List all the event categories being watched in the output window.

(<void> decorators_split <long> <real>)
; duplicates decorator set <index> and moves <percentage> of the decorators into it

(<void> bandwidth_profiler_enable <boolean>)
; enables bandwidth profiler

(<void> bandwidth_profiler_set_context <boolean>)
; sets bandwidth profiler context

(<void> simulation_priority_display_set_enabled <boolean>)
; enable/disable the priority display system

(<void> simulation_priority_display_set_object_names <boolean>)
; enable/disable object name display

(<void> simulation_priority_display_set_machine_filter)
; set machine filter to output user 0's currently watched player (selected via follow cam in film)

(<void> simulation_priority_display_set_priority_scope_tick)
; coder feature

(<void> simulation_priority_display_set_priority_scope_second_worst)
; coder feature

(<void> simulation_priority_display_set_priority_scope_second_best)
; coder feature

(<void> simulation_priority_display_set_color_by_relevance)
; coder feature

(<void> simulation_priority_display_set_color_by_update_period)
; coder feature

(<void> simulation_priority_display_set_color_by_final_priority)
; coder feature

(<void> overlapped_task_pause <string> <boolean>)
; pause tasks

(<void> net_build_map_variant <boolean> <string>)
; writes the current map variant to a file in .bin format (same as .mvar)

(<void> net_verify_map_variant <string>)
; verifies the contents of a packed map variant file

(<void> net_load_and_use_map_variant <string>)
; reads a built map variant and slams it into the squad session.

(<void> write_current_map_variant <boolean> <string>)
; writes the current map variant to a file in .mvar format (same as .bin). See map_variants subdirectory on your devkit.

(<void> read_map_variant_and_make_current <string>)
; Reads a map variant from a .mvar file in the map_variants subdirectory and slams it into the squad session.  Can be executed in the lobby.

(<void> async_set_thread_work_delay_milliseconds <long> <long>)
; set an artificial delay time for a specific async thread to test the performance of any asynchronous task work

(<void> tag_resources_set_demand_throttle_to_io <boolean>)
; turns on/off demand throttling based on io

(<void> tag_resources_flush_optional)
; flushes optional resources

(<void> set_performance_throttle <string> <long> <real>)
; sets a default value for a performance throttle for a given number of players

(<real> get_performance_throttle <string> <long>)
; gets the value of a performance throttle for a given number of players

(<void> cinematic_zone_activate <long>)
; activates scenario cinematic zone (automatically generated script function!)

(<void> cinematic_zone_deactivate <long>)
; deactivates scenario cinematic zone (automatically generated script function!)

(<void> cinematic_zone_activate_from_editor <any_tag>)
; activates cinematic zone from tag (automatically generated script function!)

(<void> cinematic_zone_deactivate_from_editor <any_tag>)
; deactivates cinematic zone from tag (automatically generated script function!)

(<long> tiling_current)
; returns the actual tiling configuration (could have been overridden from the requested configuration)

(<void> unit_limit_lipsync_to_mouth_only <unit> <boolean>)
; cinematic lipsync means you can't use all the facial bones, just the mouth

(<void> dump_active_zone_tags)
; blah

(<void> tag_resources_enable_fast_prediction <boolean>)
; turns on/off faster prediction, in case I messed up something

(<boolean> unit_start_first_person_custom_animation <unit> <animation_graph> <string_id> <boolean>)
; starts a custom animation playing on a unit (puts away weapon if last parameter is TRUE)

(<boolean> unit_is_playing_custom_first_person_animation <unit>)
; returns TRUE if the given unit is still playing a custom animation in first person

(<void> unit_stop_first_person_custom_animation <unit>)
; ends any custom first person animation running on the unit

(<void> prepare_to_switch_to_zone_set <zone_set>)
; prepare for switch to zone set

(<void> cinematic_zone_activate_for_debugging <long>)
; activates scenario cinematic zone for debugging (automatically generated script function!)

(<void> unit_play_random_ping <unit>)
; plays a random ping on the unit

(<void> player_control_fade_out_all_input <real>)
; fade out all play control over x seconds

(<void> player_control_fade_in_all_input <real>)
; fade in all play control over x seconds

(<void> player_control_lock_gaze <player> <point_reference> <real>)
; player turn to face point with max velocity degrees/second

(<void> player_control_unlock_gaze <player>)
; unlock player from any gaze point

(<void> player_control_scale_all_input <real> <real>)
; scale input to x strength over y seconds

(<void> profiler_auto_core_save <boolean>)
; profiler dumps a core for each encounter

(<bink_definition> cinematic_tag_reference_get_bink <long>)
; Retrieve the bink tag from the cinematic system

(<void> object_set_custom_animation_speed <object> <real>)
; if the object is playing a custom animation, scale it to n playback speed

(<void> scenery_animation_start_at_frame_loop <scenery> <animation_graph> <string_id> <short>)
; starts a custom animation playing on a piece of scenery at a specific frame and then loops

(<void> saved_film_set_repro_mode <boolean>)
; set the saved film into repro mode (splitscreen users are created based on the number of splitscreen players that recorded the film)

(<void> font_set_emergency)
; sets the font system into emergency mode

(<void> biped_force_ground_fitting_on <unit> <boolean>)
; force ground fitting on, even during custom animations or movement

(<void> cinematic_set_chud_objective <cutscene_title>)
; activates the chapter title

(<void> chud_show_cinematic_title <player> <cutscene_title>)
; activates the chapter title

(<weapon> unit_get_primary_weapon <unit>)
; return the primary weapon of the specified unit

(<animation_graph> budget_resource_get_animation_graph <animation_budget_reference>)
; Get a non resolving reference to a model animation graph budget reference

(<looping_sound> budget_resource_get_looping_sound <looping_sound_budget_reference>)
; Get a non resolving reference to a looping sound budget reference

(<void> game_safe_to_respawn <boolean>)

(<void> game_safe_to_respawn <boolean> <player>)

(<void> ai_migrate_infanty <ai> <ai>)
; migrates the infantry in an encounter into a different squad.

(<void> render_cinematic_motion_blur <boolean>)
; enable/disable cinematic motion blur

(<void> ai_dont_do_avoidance <ai> <boolean>)
; set the AI to not do any vector avoidance when flying

(<void> cinematic_scripting_clean_up <long>)
; Unload the scenario cinematic zone

(<void> ai_erase_inactive <ai> <short>)
; Erase inactive actors in the given ai index, and any of those actors who become inactive within the next designated ticks

(<void> ai_survival_cleanup <ai> <boolean> <boolean>)
; Activate cure isolation death for the given AI, and optionally delete inactive actors in that group too (ai, on/off, kill inactive)

(<void> ai_enable_stuck_flying_kill <ai> <boolean>)
; Enable/disable suicide condition for flying vehicles who are 'stuck'

(<void> ai_set_stuck_velocity_threshold <ai> <real>)
; Change the velocity threshold at which we will detect 'stuck' directional flying movement

(<void> stop_bink_movie)
; Stops all bink movie playback

(<void> play_credits_unskippable)
; plays credits movie, no button press detection (you can still use cinematic skipping around this)

(<sound> budget_resource_get_sound <sound_budget_reference>)
; Get a non resolving reference to a looping sound budget reference

(<void> controller_set_single_player_level_unlocked <controller> <short> <boolean>)
; <controller> <level index> <bool locked> set single player level locked state for specified controller

(<void> physical_memory_dump)
; dumps a record of all physical memory allocations

(<void> tag_resources_validate_all_pages <boolean>)
; resource validation every main_loop_body call

(<void> cinematic_set_debug_mode <boolean>)
; Puts all cinematic playback into debug mode (automatically generated script function!)

(<object> cinematic_scripting_get_object <long> <long>)
; Get an object used in a cinematic

(<void> player_override_team <long> <team>)
; sets the team for a specified player

(<void> unit_set_stance <unit> <string_id>)
; Specify the desired stance for this unit

(<void> player_set_stance <string_id>)
; Specify the stance for all players currently in the game

(<void> sound_impulse_start_editor <sound> <object> <real>)
; plays an impulse sound from the specified source object (or "none"), with the specified scale.

(<void> sound_impulse_start_effect_editor <sound> <object> <real> <string_id>)
; plays an impulse sound from the specified source object (or "none"), with the specified scale and effect.

(<void> sound_impulse_start_3d_editor <sound> <real> <real>)
; <sound> <azimuth> <scale> at the sound's minimum distance

(<void> sound_looping_start_editor <looping_sound> <object> <real>)
; plays a looping sound from the specified source object (or "none"), with the specified scale.

(<void> debug_sound_channels_log_start)
; starts the sound channel debugger log

(<void> debug_sound_channels_log_start_named <string>)
; starts the sound channel debugger log with the specified file name

(<void> debug_sound_channels_log_stop)
; stops the sound channel debugger log

(<void> simulation_profiler_enable)
; Turns on the simulation/bandwidth profiler and configures it for high level use (similar to the old screen-text-based bandwidth profiler).

(<void> saved_film_insert_marker <string>)
; Inserts a film marker.

(<void> saved_film_seek_to_marker <long>)
; Seeks to a film marker.

(<void> net_simulation_set_stream_bandwidth <long>)
; Adjusts the per-stream bandwidth cap and forces all streams to limit themselves to that cap immediately.

(<void> debug_sound_fadeout_time <real>)
; set fadeout time for sound channel debugger

(<void> render_model_marker_name_filter <string>)
; sets a substring to search for when rendering model markers

(<void> skull_enable <skull> <boolean>)
; enable/disable the given skull

(<void> allow_object_to_be_lased <object> <boolean>)
; enable/disable object laser designation for prototyping purposes.

(<boolean> is_object_being_lased <object>)
; Check whether an object is being lased by a player.

(<long> simulation_profiler_detail_level <long>)
; set detail level of simulation profiler capture on the host (affects perf & saved film size).  0-9 are valid, else clamped.

(<boolean> simulation_profiler_enable_downstream_processing <boolean>)
; enable/disable the processing of downstream data by the simulation profiler database (default is disabled, so if you want to examine downstream, you need to turn this on at display time.  Does not affect recording!)

(<long> campaign_metagame_get_player_score <player>)
; Calculates the score for an individual player

(<void> collision_debug_lightmaps_print)
; Prints the collision_debug_lightmaps text to the console

(<void> load_binary_game_engine <string>)
; load a compiled megalo engine

(<void> network_storage_files_display_file_names)
; displays files network storage is tracking

(<void> network_storage_files_force_download <string>)
; forces the download of a network file

(<void> debug_lightmap_inspect)
; show the lightmap status

(<void> render_debug_colorbars <long>)
; show the lightmap status

(<void> voice_force_global_repeater_use <boolean>)
; Forces maximum repeater use, with randomly shuffling repeater assignments every few seconds.
; Must be invoked on all peers in a game at the same time to work properly.

(<void> levels_add_campaign_map_with_id <long> <string>)
; <map id> <scenario> add scenario to levels array

(<void> levels_add_campaign_map <string>)
; <scenario> add a single scenario to levels array

(<void> levels_add_multiplayer_map <string>)
; <scenario> add a single scenario to mp level datum array

(<void> network_team_picker_unit_test)
; run team picker unit tests

(<void> debug_objects_unit_seats_filter <string>)
; set the filter for unit seat debugging.  Set to empty string to clear

(<void> debug_lock_enforcement <boolean>)
; enable or disable assertions in the synchronization manager lock hierarchy

(<long> rewards_get_cookie_total <controller>)
; Fetches the specified controller's lifetime cookie earn total (not his currently available cookies!)

(<void> cui_set_screen_name_override_prefix <string>)
; set prefix for cui screen name overrides

(<void> cui_load_screen <cui_screen_definition>)
; loads a cui screen from a definition tag

(<void> cui_load_themed_screen <cui_screen_definition> <string_id>)
; loads a cui screen from a definition tag

(<void> player_profile_clear_to_default_values <controller>)
; Slam the specified controller to default profile values.

(<void> submit_incident <string_id>)
; Fire a global incident for all players

(<void> submit_incident_with_cause_player <string_id> <player>)
; Fire an incident for a player

(<void> submit_incident_with_cause_team <string_id> <mp_team>)
; Fire an incident for a team

(<void> submit_incident_with_cause_player_and_effect_player <string_id> <player> <player>)
; Fire an incident

(<void> submit_incident_with_cause_player_and_effect_team <string_id> <player> <mp_team>)
; Fire an incident

(<void> submit_incident_with_cause_team_and_effect_player <string_id> <mp_team> <player>)
; Fire an incident

(<void> submit_incident_with_cause_team_and_effect_team <string_id> <mp_team> <mp_team>)
; Fire an incident

(<void> submit_incident_with_cause_campaign_team <string_id> <team>)
; Loops over all players on the campaign team and calls submit_incident_with_cause_player

(<void> net_set_campaign_insertion_point <short>)
; set the campaign insertion point squad session parameter

(<void> hs_make_interactive_scripts_deterministic <boolean>)
; Enable or disable the routing of interactive script execution through the simulation system for determinism.  You can also use "determinize <normal script call>" to determinize a single script call.

(<void> threadlib_runtests)
; runs the unit tests for threadlib

(<void> player_set_respawn_vehicle <player> <object_definition>)
; sets a vehicle definition for a player to spawn in - the player will continue to spawn in this vehicle until you set it to none

(<boolean> teleport_players_into_vehicle <unit>)
; tries to teleport all alive players into the specified vehicle, returns true if all players ended up in the vehicle.

(<void> command_buffer_cache_playback_enable <boolean>)
; Enable/disable command buffer playback

(<void> player_set_spartan_loadout <player>)
; Set player loadout palette to spartan

(<void> player_set_elite_loadout <player>)
; Set player loadout palette to elite

(<void> auto_graph <string>)
; Toggle graphing of some string quantity (ask a coder to graph the stuff and give you the strings).

(<void> auto_graph_reset)
; Turn off all graphs.

(<void> auto_graph_enable_list <boolean>)
; Start tracking available graphs.

(<void> auto_graph_filter_list <string>)
; Set a substring filter for available graph tracking.

(<void> auto_graph_list)
; Display the current set of (filtered) available graphs.

(<void> auto_graph_hide)
; Hide all graphs temporarily (without losing the active set or disabling the graphing behind the scenes).  Just to see past them.

(<void> location_names_print)
; Print all valid location names for the current scenario.

(<void> net_force_host <string>)
; Force a particular box (by machine name) to be host whenever possible.  
; Running this command on box A will also run the same logic on all peers that are in sessions with box A.  This can be overridden by any of the more specific per-session force_host commands.

(<void> net_force_host_squad <string>)
; Force a particular box (by machine name) to be host whenever possible.  
; Running this command on box A will also run the same logic on all peers that are in a squad session with box A.

(<void> net_force_host_posse <string>)
; Force a particular box (by machine name) to be host whenever possible.  
; Running this command on box A will also run the same logic on all peers that are in a posse session with box A.

(<void> net_force_host_group <string>)
; Force a particular box (by machine name) to be host whenever possible.  
; Running this command on box A will also run the same logic on all peers that are in a group session with box A.

(<void> net_dump_network_statistics)
; Dump the current local network statistics structure to a file (same blob that is uploaded to MachineUpdateNetworkStats.ashx).

(<void> net_enable_block_detection <long>)
; If non-zero, turns on network block detection w/ the provided ms threshold.

(<void> main_enable_block_detection <long>)
; If non-zero, turns on main loop block detection w/ the provided ms threshold.

(<void> main_synchronous_networking_request_vblank_slip)
; Force the main loop to slip an extra vblank during its next sleep to try to get to a more stable place relative to the incoming game tick stream.

(<void> debug_button_action_mapping_set <long> <long>)
; Allows remapping of individual actions in custom button preset, contact a programmer for a list of what each parameter corresponds to

(<void> player_appearance_force_model_area <long> <string_id>)
; Force every player to spawn with a particular selection for a particular area

(<void> player_appearance_force_model_area_disable <long>)
; Disable forcing every player to spawn with a particular selection for a particular area

(<void> debug_instanced_geometry_names_filter <string>)
; filters instance debugging by name (substring included, set to emptry string to clear)

(<void> stream_manager_load_core <string>)
; slam the network stream manager state with a saved core

(<void> stream_manager_save_cores <long>)
; begin dumping cores every X seconds

(<void> controller_set_waypoint_flags <controller> <long> <boolean>)
; Set a waypoint flag in the profile (outgoing to waypoint)

(<void> waypoint_set_unlock_flag <controller> <long> <boolean>)
; Set a waypoint flag in the profile (incoming from waypoint)

(<void> async_test_hang <real> <long> <long>)
; Create and async task that hangs for the specified number of seconds with the specified async category and priority.

(<void> incidents_force_campaign)
; Force all incidents to report as campaign

(<void> incidents_force_firefight)
; Force all incidents to report as firefight

(<void> incidents_force_multiplayer)
; Force all incidents to report as multiplayer

(<void> incidents_force_matchmaking)
; Force all incidents to report as matchmaking

(<void> incidents_force_custom_games)
; Force all incidents to report as custom games

(<void> incidents_force_solo)
; Force all incidents to report as solo

(<void> incidents_force_coop)
; Force all incidents to report as coop

(<void> incidents_force_four_player_coop)
; Force all incidents to report as 4 player coop

(<void> game_sound_stress_test_message_queue)
; Generate a bunch of messages to fill up the message queue.

(<void> net_log_channel_message_queue_state <long> <boolean>)
; Turn on/off logging of message queue state every time a message is sent for the specified channel index.

(<void> global_preferences_set_campaign_state <long>)
; sets the global preferences campaign state

(<void> lightmap_memory_inspect)
; output the lightmap memory

(<void> game_set_random_holiday)
; Set the game to a random holiday (used by stress to verify that setting boxes to random holidays on boot doesn't cause films to go out of sync).

(<void> airstrike_enable <boolean>)
; enable/disable airstrikes

(<boolean> airstrike_weapons_exist)
; returns whether there is a player enable/disable airstrikes.

(<void> airstrike_set_launches <long>)
; sets the number of available airstrikes.

(<void> cui_debug_add_global_property_watch <string>)
; add global property watch

(<void> cui_debug_add_property_watch <string>)
; add property watch for active screen

(<void> cui_debug_remove_global_property_watch <string>)
; remove global property watch

(<void> cui_debug_remove_property_watch <string>)
; remove property watch for active screen

(<void> cui_debug_clear_global_property_watches)
; remove all global property watches

(<void> cui_debug_clear_property_watches)
; remove all property watches for active screen

(<void> cui_debug_add_global_binding_watch <string>)
; add global binding watch

(<void> cui_debug_add_binding_watch <string>)
; add binding watch for active screen

(<void> cui_debug_remove_global_binding_watch <string>)
; remove global binding watch

(<void> cui_debug_remove_binding_watch <string>)
; remove binding watch for active screen

(<void> cui_debug_clear_global_binding_watches)
; remove all global binding watches

(<void> cui_debug_clear_binding_watches)
; remove all binding watches for active screen

(<void> cui_debug_clear_global)
; clear all global state

(<void> cui_debug_clear)
; clear all state for active screen

(<void> game_grief_record_custom_penalty <player> <real>)
; Add griefing points to a player

(<void> game_grief_reset)
; Reset griefing system for xbox

(<void> game_grief_force_social_matchmaking)
; Force the griefing system to believe that it is social matchmaking

(<void> game_grief_force_ranked_matchmaking)
; Force the griefing system to believe that it is ranked matchmaking

(<void> game_grief_set_ranked_matchmaking_multiplier <real>)
; Set the ranked matchmaking multiplier

(<void> game_grief_set_social_matchmaking_multiplier <real>)
; Set the ranked matchmaking multiplier

(<void> game_grief_set_custom_game_multiplier <real>)
; Force the griefing system to believe it is a custom game

(<void> game_grief_set_objects_in_sphere_radius <real>)
; Set the maximum distance for nearby enemey players/ai

(<void> game_grief_set_ai_multiplier <real>)
; Set the multiplier for ai

(<void> game_grief_set_enemy_ai_nearby_multiplier <real>)
; Set the multiplier when an enemy ai is nearby the betrayed

(<void> game_grief_set_enemy_player_nearby_multiplier <real>)
; Set the multiplier when an enemy player is nearby the betrayed

(<void> game_grief_set_same_squad_multiplier <real>)
; Set the multiplier when both the betrayed and betrayer are in the same matchmaking party

(<void> game_grief_set_shield_damage_base_penalty <real>)
; Set the shield damage base penalty

(<void> game_grief_set_body_damage_base_penalty <real>)
; Set the body damage base penalty

(<void> game_grief_set_betrayal_base_penalty <real>)
; Set the betrayal base penalty

(<void> game_grief_set_betrayal_boot_cutoff <real>)
; Set the betrayal boot cutoff

(<void> game_grief_set_ejection_cutoff <real>)
; Set the ejection cutoff

(<void> game_grief_set_betrayal_decay_seconds <real>)
; Set the seconds it takes to decay a griefing point

(<void> game_grief_set_eject_decay_seconds <real>)
; Set the seconds it takes to decay an ejection point

(<void> net_disconnect_and_reconnect_all_channels)
; for reproing omaha bug 26715, allows you to instantly unilaterally reset a machine's network message queues, bringing a danger of misinterpreting incoming fragments.

(<void> player_set_profile <starting_profile>)
; sets the profile for all players to spawn/respawn with.

(<void> player_set_profile <starting_profile> <player>)
; sets the profile for this player to spawn/respawn with.

(<void> network_session_security_set_challenge_response <string> <boolean> <long>)
; change challenge responses

(<void> network_session_security_set_challenge_failure_on_timeout <boolean>)
; enable/disable failures on timeouts

(<void> network_session_security_set_challenge_force_fail <boolean>)
; force challenge response failures

(<void> network_session_security_disable_challenges <boolean>)
; disables security challenges

(<void> test_player_appearance_encode_for_sneakernet)
; creates an encoded player appearance suitable for sneakernet from the first signed in controller

(<void> test_player_appearance_decode_from_sneakernet <string>)
; applies a sneakernet encoded player appearance to the first signed in controller

(<void> ui_content_resize_cache <long>)
; set UI content cache size

(<void> motl_dump_bitvector_for_scenario)
; dumps the multiplayer object type bitvector for the current loaded scenario

(<void> motl_verify_mapinfo_for_scenario)
; checks the current level's mapinfo motl bitvector against what is actually loaded

(<void> TestPrintBool <string> <boolean>)
; Prints the specified boolean with the format '<string> = '<boolean>' to the Shell.

(<void> TestPrintReal <string> <real>)
; Prints the specified real with the format '<string> = '<real>' to the Shell.

(<void> EnableWeaponTTEDebug <boolean>)
; enable/disable player weapon fire rate debug info

(<void> ForceFullAutoMagnum <boolean>)
; force magnum into full auto mode?

(<void> ForceAllFullAuto <boolean>)
; force all weapons into full auto mode?

(<void> DisablePauseOnDefocus <boolean>)
; disable the pause on defocus behaviour - can be used to speed up tag load whilst doing other work

(<void> EnablePlayerBarrelStateDebug <boolean>)
; enable/disable player weapon barrel state debug info

(<void> DisableWeaponTimingFeatures)
; Disable all weapon debug features

(<boolean> unit_action_test_secondary_trigger <player>)
; returns true if any player has used weapon secondary trigger since the last call to (player_action_test_reset).

(<boolean> player_action_test_secondary_trigger)
; returns true if any player has used secondary trigger since the last call to (player_action_test_reset).

(<void> debug_key_evaluate <string> <boolean>)
; toggles the rendering of the first active user's weapon debugging

(<boolean> player_machinima_camera_enable_toggle)
; Returns true if it is now enabled or not

(<void> debug_menu_rebuild)
; Reparses the debug menu from the text file.

; AVAILABLE EXTERNAL GLOBALS:

(<boolean> enable_melee_action)

(<boolean> debug_no_drawing)

(<boolean> debug_force_all_player_views_to_default_player)

(<long> debug_force_player_view_count)

(<boolean> debug_render_freeze)

(<boolean> debug_render_player_freeze)

(<boolean> debug_render_horizontal_splitscreen)

(<boolean> debug_load_panic_to_main_menu)

(<boolean> display_framerate)

(<boolean> display_pulse_rates)

(<boolean> display_throttle_rates)

(<boolean> display_lag_times)

(<boolean> display_frame_deltas)

(<boolean> console_status_string_render)

(<boolean> console_pauses_game)

(<boolean> framerate_infinite)

(<boolean> framerate_debug)

(<boolean> framerate_use_system_time)

(<boolean> framerate_stabilization)

(<boolean> g_animation_debug_rendering_on)

(<long> g_animation_debug_view_type_selected)

(<long> g_animation_debug_current_target)

(<boolean> debug_controller_latency)

(<boolean> terminal_render)

(<boolean> events_debug_spam_render)

(<boolean> console_dump_to_debug_display)

(<real> camera_fov)

(<real> camera_yaw_scale)

(<real> camera_pitch_scale)

(<real> camera_forward_scale)

(<real> camera_side_scale)

(<real> camera_up_scale)

(<real> flying_camera_maximum_boost_speed)

(<real> flying_camera_movement_delay)

(<boolean> flying_camera_has_collision)

(<boolean> flying_camera_use_old_controls)

(<boolean> editor_director_mouse_wheel_speed_enabled)

(<boolean> CameraObserverAllowNonrecorderFirstPerson)

(<boolean> async_display_statistics)

(<boolean> suppress_upload_debug)

(<boolean> lightmap_pointsample)

(<boolean> debug_no_frustum_clip)

(<boolean> debug_camera_projection)

(<boolean> debug_bink)

(<boolean> game_paused)

(<real> game_speed)

(<boolean> game_time_lock)

(<boolean> game_time_statistics)

(<boolean> map_info_debug)

(<boolean> debug_game_save)

(<boolean> recover_saved_games_hack)

(<boolean> game_state_verify_on_write)

(<boolean> game_state_verify_on_read)

(<boolean> debug_verify_game_variant_settings)

(<boolean> debug_globals_empty)

(<boolean> dont_load_material_effects)

(<boolean> editor_strip_dialogue_sounds)

(<boolean> scenario_load_fast)

(<boolean> scenario_load_fast_and_playable)

(<boolean> prune_global_use_empty)

(<boolean> prune_global_material_effects)

(<boolean> prune_scenario_lightmaps)

(<boolean> prune_scenario_add_single_bsp_zones)

(<boolean> prune_scenario_force_single_bsp_zone_set)

(<boolean> prune_scenario_for_environment_editing)

(<boolean> prune_scenario_for_environment_finishing)

(<boolean> prune_scenario_for_environment_pathfinding)

(<boolean> prune_scenario_for_environment_editing_keep_cinematics)

(<boolean> prune_scenario_for_environment_editing_keep_scenery)

(<boolean> prune_scenario_use_gray_shader)

(<boolean> prune_global_dialog_sounds)

(<boolean> prune_facial_animation_data)

(<boolean> prune_error_geometry)

(<boolean> pruning_keep_scripts)

(<boolean> prune_global)

(<boolean> prune_global_keep_playable)

(<boolean> variant_culling_enabled)

(<boolean> material_culling_enabled)

(<boolean> display_precache_progress)

(<boolean> log_precache_progress)

(<long> fake_precache_percentage)

(<boolean> force_aligned_utility_drive)

(<boolean> debug_object_garbage_collection)

(<boolean> debug_object_dump_log)

(<boolean> allow_all_sounds_on_player)

(<boolean> disable_player_rotation)

(<real> player_rotation_scale)

(<boolean> debug_player_respawn)

(<boolean> debug_survival_mode)

(<boolean> survival_performance_mode)

(<boolean> debug_survival_mode_infinite_lives)

(<boolean> debug_survival_mode_respawn_if_iron)

(<long> g_synchronous_client_maximum_catchup_chunk_size)

(<real> g_editor_maximum_edited_object_speed)

(<real> g_editor_edited_object_spring_constant)

(<real> g_editor_maximum_rotation_speed)

(<boolean> chud_enabled)

(<boolean> chud_debug_grid)

(<boolean> chud_debug_messages)

(<boolean> chud_debug_crosshair)

(<boolean> chud_debug_metagame)

(<real> chud_debug_reticle_radius)

(<object> chud_debug_highlight_object)

(<real> chud_debug_highlight_object_color_red)

(<real> chud_debug_highlight_object_color_green)

(<real> chud_debug_highlight_object_color_blue)

(<real> chud_debug_highlight_object_color_alpha)

(<real> chud_debug_animation_speed)

(<string_id> debug_animation_override_blend_channel_input)

(<boolean> debug_animation_blend_test_parent_relative)

(<real> debug_animation_blend_test_horizontal)

(<real> debug_animation_blend_test_vertical)

(<boolean> debug_animation_snap_nearest_pose_blend)

(<boolean> debug_animation_object_space_offset_disable)

(<boolean> debug_animation_fik_correction_enable)

(<boolean> debug_animation_fik_subframe_precision_enable)

(<boolean> debug_animation_object_space_offset_draw)

(<boolean> debug_animation_ik_chains_disable)

(<boolean> debug_animation_footlock_disable)

(<boolean> debug_animation_footlock_locking_disable)

(<boolean> debug_animation_precomputed_velocity_boundaries_disable)

(<boolean> debug_animation_ik_sets_disable)

(<boolean> debug_animation_gait_preserve_frame_ratio)

(<boolean> debug_animation_move_preserve_frame_ratio)

(<boolean> debug_animation_root_offset_disable)

(<boolean> debug_animation_camera_offset_disable)

(<boolean> debug_animation_unsafe_debug_enable)

(<long> debug_animation_maximum_channels_displayed)

(<boolean> debug_animation_footlock_draw)

(<boolean> debug_animation_footlock_draw_raw)

(<boolean> debug_animation_footlock_draw_turned)

(<boolean> debug_animation_footlock_draw_fitted)

(<boolean> debug_animation_footlock_draw_turn_sampling)

(<boolean> debug_animation_footlock_draw_grid_sampling)

(<boolean> debug_animation_footlock_draw_raycast)

(<boolean> debug_animation_footlock_draw_contact)

(<boolean> debug_animation_footlock_draw_displacement)

(<boolean> debug_animation_turn_radius_draw)

(<boolean> debug_animation_assassination_selection)

(<boolean> debug_animation_phonebooth_test_draw)

(<real> debug_animation_phonebooth_draw_time)

(<boolean> debug_pose_overlay_force_interpolation_across_sphere)

(<boolean> debug_enable_press_to_assassinate)

(<boolean> debug_enable_same_team_assassinate)

(<boolean> debug_enable_force_phonebooth_assassinate)

(<boolean> debug_unit_all_animations)

(<boolean> debug_unit_animations)

(<boolean> debug_unit_illumination)

(<real> debug_unit_active_camo_frequency_modulator)

(<real> debug_unit_active_camo_frequency_modulator_bias)

(<boolean> debug_player_melee_attack)

(<boolean> debug_boarding_force_enemy)

(<boolean> enable_animation_decompression_cache)

(<boolean> enable_animation_influenced_flight)

(<boolean> enable_flight_noise)

(<boolean> enable_player_transitions)

(<boolean> enable_pain_screen_aim_fixup)

(<boolean> disable_node_interpolation)

(<boolean> disable_analog_movement)

(<boolean> disable_transition_animations)

(<boolean> disable_animated_source_interpolation)

(<boolean> debug_enable_easy_weapon_down_claw)

(<string_id> debug_vehicle_animated_trick_animation_name)

(<string_id> debug_vehicle_animated_trick_camera_name)

(<real> debug_orbiting_camera_maximum_distance_override)

(<boolean> cheat_deathless_player)

(<boolean> cheat_valhalla)

(<boolean> cheat_jetpack)

(<boolean> cheat_infinite_ammo)

(<boolean> cheat_bottomless_clip)

(<boolean> cheat_bump_possession)

(<boolean> cheat_super_jump)

(<boolean> cheat_reflexive_damage_effects)

(<boolean> cheat_medusa)

(<boolean> cheat_omnipotent)

(<boolean> cheat_controller)

(<boolean> cheat_chevy)

(<boolean> cheat_porcupine)

(<boolean> cheat_infinite_equipment_energy)

(<boolean> effects_corpse_nonviolent)

(<boolean> debug_effects_nonviolent)

(<boolean> debug_effects_locations)

(<boolean> effects_enable)

(<boolean> debug_effects_allocation)

(<boolean> debug_effects_play_distances)

(<boolean> debug_effects_lightprobe_sampling)

(<boolean> player_effects_enabled)

(<boolean> g_animation_statistic_accumulator_enabled)

(<real> sound_global_room_gain)

(<real> sound_direct_path_gain)

(<real> sound_reverb_path_gain)

(<real> sound_reverb_wet_dry_mix)

(<boolean> enable_pc_sound)

(<boolean> debug_sound)

(<boolean> debug_looping_sound)

(<boolean> debug_sound_channels)

(<boolean> debug_sound_channels_fadeout)

(<boolean> debug_sound_spatialized)

(<boolean> debug_sound_spatialized_fadeout)

(<boolean> debug_platform_sound_channels)

(<boolean> debug_sound_reverb)

(<boolean> sound_cache_list)

(<boolean> debug_speaker_output_peak)

(<boolean> debug_speaker_output_rms)

(<boolean> debug_display_levels_data)

(<boolean> debug_display_preformance_data)

(<boolean> debug_display_sources_data_state)

(<boolean> debug_display_sources_data)

(<boolean> debug_display_mix_data)

(<boolean> debug_display_reverb_data)

(<boolean> debug_sound_mute_effect_final_mix)

(<boolean> debug_sound_mute_effect_sub_mix)

(<boolean> debug_sound_mute_effect_occlusion)

(<boolean> debug_sound_mute_effect_obstruction)

(<boolean> debug_sound_mute_effect_radio)

(<boolean> debug_sound_mute_effect_reverb_first)

(<boolean> debug_sound_mute_effect_reverb_second)

(<boolean> debug_sound_mute_music)

(<boolean> debug_sound_mute_dialog)

(<boolean> debug_sound_mute_ambient)

(<boolean> debug_sound_mute_vehicles)

(<boolean> debug_sound_mute_weapons)

(<boolean> debug_sound_mute_mix_dry)

(<boolean> debug_sound_mute_mix_dry_obstruction)

(<boolean> debug_sound_mute_mix_wet)

(<boolean> debug_sound_mute_mix_wet_occlusion)

(<boolean> debug_sound_mute_mix_radio)

(<boolean> debug_duckers)

(<boolean> debug_sound_listeners)

(<boolean> debug_disable_music_channel)

(<boolean> debug_disable_dialog_channel)

(<boolean> debug_disable_cinematic_channel)

(<boolean> debug_disable_ambiant_channel)

(<boolean> debug_disable_vehicle_channel)

(<boolean> debug_disable_weapon_channel)

(<boolean> debug_disable_other_channel)

(<boolean> debug_disable_looping_channels)

(<boolean> debug_disable_nonlooping_channels)

(<boolean> debug_sound_force_first_person_listener)

(<boolean> debug_sound_reference_counts)

(<boolean> debug_sound_environment_parameters)

(<boolean> debug_sound_channel_overflow)

(<boolean> debug_sound_impulse_time)

(<boolean> debug_sound_impulse_spam)

(<boolean> debug_sound_stabbed)

(<boolean> sound_enable_expensive_obstruction)

(<boolean> sound_enable_new_obstruction_collision)

(<boolean> debug_sound_enable_multithreaded)

(<boolean> debug_acoustics)

(<boolean> light_local_basis)

(<boolean> collision_log_render)

(<boolean> collision_log_detailed)

(<boolean> collision_log_extended)

(<boolean> collision_log_totals_only)

(<boolean> collision_log_time)

(<real> havok_collision_tolerance)

(<long> havok_debug_mode)

(<long> havok_thread_count)

(<long> havok_environment_type)

(<real> havok_shape_radius)

(<boolean> havok_jumping_beans)

(<boolean> havok_disable_deactivation)

(<real> havok_deactivation_reference_distance)

(<boolean> havok_weld_environment)

(<boolean> havok_batch_add_entities_disabled)

(<boolean> havok_shape_cache)

(<boolean> havok_shape_cache_debug)

(<boolean> havok_enable_back_stepping)

(<boolean> havok_enable_sweep_shapes)

(<boolean> havok_display_stats)

(<boolean> havok_initialize_profiling)

(<boolean> impacts_debug)

(<boolean> proxies_debug)

(<boolean> collision_damage_debug)

(<boolean> havok_play_impact_effects)

(<boolean> havok_play_biped_impact_effects)

(<boolean> physics_debug)

(<boolean> havok_cleanup_inactive_agents)

(<boolean> havok_render_environment_queries)

(<boolean> havok_pause_time_on_find_initial_contact_points)

(<boolean> disable_expensive_physics_rebuilding)

(<real> minimum_havok_object_acceleration)

(<real> minimum_havok_biped_object_acceleration)

(<boolean> debug_object_scheduler)

(<boolean> render_debug_turn_on_cache_state)

(<boolean> debug_use_black_for_missing_instances)

(<boolean> render_environment)

(<boolean> render_structure)

(<boolean> render_per_vertex_lit_environment)

(<boolean> render_per_pixel_lit_enviroment)

(<boolean> render_single_probe_lit_environment)

(<boolean> render_cluster_enabled)

(<boolean> render_objects)

(<boolean> render_lightmap_shadows)

(<boolean> render_rain)

(<boolean> render_rain_particles)

(<boolean> render_light_volume_rain_particles)

(<boolean> render_light_volume_rain_sheets)

(<boolean> render_rain_from_design_tag)

(<boolean> render_rain_occluder_as_normal_object)

(<boolean> render_debug_enable_first_person_squish)

(<boolean> render_tessellated_mesh)

(<boolean> render_lightmap_shadows_apply)

(<boolean> render_lights)

(<boolean> render_water_tessellated)

(<boolean> render_water_wireframe)

(<boolean> render_water_interaction)

(<boolean> render_water)

(<boolean> render_water_refraction)

(<long> render_debug_occlusion_bsp_index)

(<long> render_debug_occlusion_instance_index)

(<boolean> render_tessellated_wireframe)

(<boolean> render_first_person)

(<short> render_debug_mode)

(<boolean> render_debug_safe_frame_bounds)

(<real> render_debug_aspect_ratio_scale)

(<boolean> render_debug_force_4x3_aspect_ratio)

(<boolean> render_debug_transparents)

(<boolean> render_debug_slow_transparents)

(<boolean> render_transparents)

(<boolean> render_low_res_transparents)

(<boolean> render_debug_transparent_cull)

(<boolean> render_debug_transparent_cull_flip)

(<short> render_debug_transparent_sort_method)

(<boolean> render_debug_lens_flares)

(<boolean> render_debug_shield_instrumentation)

(<boolean> render_instanced_geometry)

(<boolean> render_sky)

(<boolean> render_lens_flares)

(<boolean> render_decals)

(<boolean> neuticle_render)

(<boolean> neuticle_update)

(<boolean> neuticle_spawn)

(<boolean> render_decorators)

(<boolean> render_infinite_decorators)

(<long> render_decorators_lod_mask)

(<real> render_decorators_decimation_test)

(<boolean> light_decorators)

(<boolean> render_decorator_bounds)

(<boolean> render_decorator_spheres)

(<boolean> render_decorator_descriptions)

(<boolean> render_debug_force_cinematic_lights)

(<boolean> render_debug_pix_events)

(<boolean> render_atmosphere_cluster_blend_data)

(<boolean> render_debug_display_command_buffer_data)

(<boolean> render_cloud_texture)

(<boolean> render_debug_enable_z_prepass)

(<boolean> render_debug_instance_occlusion)

(<boolean> render_debug_screen_shaders)

(<boolean> render_debug_screen_effects)

(<boolean> render_screen_effects)

(<boolean> render_debug_acoustic_sectors)

(<boolean> render_debug_weather_dumplings)

(<boolean> render_debug_atmosphere_dumplings)

(<real> render_debug_min_single_pass_rendering_distance)

(<boolean> render_pc_specular)

(<boolean> render_pc_albedo_lighting)

(<long> render_debug_save_surface)

(<boolean> render_screen_flashes)

(<real> texture_camera_near_plane)

(<real> texture_camera_exposure)

(<real> texture_camera_illum_scale)

(<real> render_near_clip_distance)

(<real> render_far_clip_distance)

(<real> render_exposure_stops)

(<boolean> display_exposure)

(<real> render_HDR_target_stops)

(<long> render_surface_LDR_mode)

(<long> render_surface_HDR_mode)

(<real> render_first_person_fov_scale)

(<long> rasterizer_triliner_threshold)

(<long> rasterizer_present_immediate_threshold)

(<long> tiling)

(<long> render_screen_res)

(<long> render_tiling_resolve_fragment_index)

(<real> render_tiling_viewport_offset_x)

(<real> render_tiling_viewport_offset_y)

(<long> render_alpha_test_reference)

(<boolean> render_true_gamma)

(<boolean> render_shadow_bounds)

(<boolean> render_shadow_bounds_solid)

(<boolean> render_shadow_opaque)

(<boolean> render_shadow_screenspace)

(<boolean> render_shadow_histencil)

(<boolean> render_shadow_hires)

(<boolean> render_shadow_objectspace_stencil_clip)

(<boolean> render_shadow_force_fancy)

(<boolean> render_shadow_force_old)

(<boolean> render_postprocess)

(<long> render_accum)

(<long> render_bloom_source)

(<long> render_bloom)

(<long> render_downsample)

(<long> render_show_alpha)

(<real> render_postprocess_exposure)

(<long> render_accum_filter)

(<boolean> render_tone_curve)

(<real> render_tone_curve_white)

(<boolean> render_exposure_lock)

(<long> fxaa_mode)

(<real> render_postprocess_hue)

(<real> render_postprocess_saturation)

(<real> render_postprocess_red_filter)

(<real> render_postprocess_green_filter)

(<real> render_postprocess_blue_filter)

(<real> render_screenspace_center)

(<real> render_bounce_light_intensity)

(<boolean> render_bounce_light_only)

(<boolean> render_disable_prt)

(<boolean> force_render_lightmap_mesh)

(<boolean> render_use_single_pass_rendering)

(<boolean> render_force_single_pass_rendering)

(<boolean> render_debug_foliage_enable)

(<boolean> render_debug_enable_pc_transparents)

(<long> screenshot_anisotropic_level)

(<real> screenshot_gamma)

(<real> render_light_intensity)

(<long> render_light_clip_planes)

(<boolean> render_light_opaque)

(<boolean> cubemap_debug)

(<boolean> render_debug_cloth)

(<boolean> render_debug_antennas)

(<boolean> render_debug_leaf_systems)

(<boolean> render_debug_object_lighting)

(<boolean> render_debug_object_lighting_refresh)

(<boolean> render_debug_use_cholocate_mountain)

(<boolean> render_debug_use_contrast_adjustment)

(<boolean> render_debug_use_min_luminance)

(<boolean> render_debug_use_bounce_to_ambient)

(<boolean> render_debug_object_lighting_use_scenery_probe)

(<boolean> render_debug_object_lighting_use_device_probe)

(<boolean> render_debug_object_lighting_use_air_probe)

(<boolean> render_debug_show_air_probes)

(<boolean> render_debug_infinite_framerate)

(<long> render_debug_toggle_default_lightmaps_texaccum)

(<real> render_debug_object_lighting_interpolation_difference_factor)

(<long> render_debug_depth_render)

(<real> render_debug_depth_render_scale_r)

(<real> render_debug_depth_render_scale_g)

(<real> render_debug_depth_render_scale_b)

(<boolean> render_debug_show_4x3_bounds)

(<boolean> render_weather_bounds)

(<boolean> render_debug_object_imposter)

(<boolean> render_debug_object_imposter_always)

(<boolean> render_debug_object_imposter_never)

(<boolean> render_debug_instance_imposters)

(<boolean> render_debug_instance_imposter_always)

(<boolean> render_debug_instance_imposter_never)

(<boolean> render_debug_instance_imposter_hide_rainbows)

(<boolean> render_debug_enable_imposter_alpha_blend)

(<boolean> build_instance_imposters)

(<boolean> render_debug_cinematic_clip)

(<real> render_buffer_gamma)

(<real> render_screen_gamma)

(<long> render_buffer_gamma_curve)

(<real> render_color_balance_red)

(<real> render_color_balance_green)

(<real> render_color_balance_blue)

(<real> render_black_level_red)

(<real> render_black_level_green)

(<real> render_black_level_blue)

(<boolean> debug_volume_samples)

(<boolean> decal_create)

(<boolean> decal_frame_advance)

(<boolean> decal_render)

(<boolean> decal_render_preplaced)

(<boolean> decal_render_debug)

(<boolean> decal_render_debug_info)

(<boolean> decal_render_latest_debug)

(<boolean> decal_cull)

(<boolean> decal_fade)

(<boolean> decal_dump)

(<boolean> particle_create)

(<boolean> particle_frame_advance)

(<boolean> particle_render)

(<boolean> particle_render_debug)

(<boolean> particle_collision_debug)

(<boolean> particle_collision_debug_priority)

(<boolean> particle_render_debug_spheres)

(<boolean> particle_cull)

(<boolean> particle_dump)

(<boolean> particle_force_cpu)

(<boolean> particle_force_gpu)

(<long> effect_priority_cutoff)

(<boolean> render_debug_effect_text)

(<boolean> render_debug_effect_distance_from_camera)

(<boolean> render_debug_effect_name)

(<boolean> render_debug_effect_active_emitter_counts)

(<boolean> render_debug_effect_particle_counts)

(<boolean> render_debug_effect_light_volume_counts)

(<boolean> render_debug_effect_contrail_counts)

(<boolean> render_debug_effect_beam_counts)

(<boolean> render_debug_effect_bounding_speres)

(<boolean> render_debug_effect_emitter_shape)

(<long> render_debug_effect_toggle_particle_mode)

(<long> render_debug_effect_toggle_light_mode)

(<long> render_debug_effect_toggle_contrail_mode)

(<long> render_debug_effect_toggle_beam_mode)

(<real> weather_occlusion_max_height)

(<real> render_debug_viewport_scale)

(<long> render_debug_light_probes)

(<boolean> effect_property_culling)

(<boolean> contrail_create)

(<boolean> contrail_pulse)

(<boolean> contrail_frame_advance)

(<boolean> contrail_submit)

(<boolean> contrail_dump)

(<boolean> light_volume_create)

(<boolean> light_volume_frame_advance)

(<boolean> light_volume_submit)

(<boolean> light_volume_dump)

(<boolean> beam_create)

(<boolean> beam_frame_advance)

(<boolean> beam_submit)

(<boolean> beam_dump)

(<boolean> debug_pvs)

(<boolean> debug_pvs_render_all)

(<boolean> debug_pvs_activation)

(<boolean> pvs_building_disabled)

(<boolean> debug_pvs_editor_mode)

(<boolean> render_debug_full_bsp)

(<boolean> render_default_lighting)

(<boolean> render_debug_analytical_lightmap_light_enabled)

(<boolean> render_debug_vmf_lightmap_light_enabled)

(<boolean> render_debug_bounce_light_enabled)

(<boolean> visibility_debug_portals_2d)

(<boolean> visibility_debug_portals_2d_verbose)

(<boolean> visibility_debug_portals_3d)

(<boolean> visibility_debug_visible_cluster_portals_3d)

(<boolean> visibility_debug_all_portals_3d)

(<boolean> visibility_disable_conditional_portals)

(<boolean> visibility_debug_visible_clusters)

(<long> visibility_debug_portals_structure_bsp_index)

(<long> visibility_debug_portals_cluster_index)

(<boolean> visibility_debug_select_bsp_instance_visible)

(<long> visibility_debug_select_bsp_instance_bsp_index)

(<long> visibility_debug_select_bsp_instance_index)

(<boolean> visibility_enable_occlusion)

(<boolean> visibility_enable_multithreading)

(<boolean> error_geometry_draw_names)

(<long> error_geometry_tangent_space)

(<long> error_geometry_lightmap_lights)

(<boolean> debug_objects)

(<boolean> debug_objects_position_velocity)

(<boolean> debug_objects_origin)

(<boolean> debug_objects_root_node)

(<boolean> debug_objects_bounding_spheres)

(<boolean> debug_objects_attached_aabbs)

(<boolean> debug_objects_light_overlaps)

(<boolean> debug_objects_attached_bounding_spheres)

(<boolean> debug_objects_dynamic_render_bounding_spheres)

(<boolean> debug_objects_render_models)

(<boolean> debug_objects_collision_models)

(<boolean> debug_objects_cookie_cutters)

(<boolean> debug_objects_early_movers)

(<boolean> debug_objects_contact_points)

(<boolean> debug_objects_constraints)

(<boolean> debug_objects_vehicle_physics)

(<boolean> debug_objects_vehicle_effects)

(<boolean> debug_objects_vehicle_engines)

(<boolean> debug_objects_jetwash)

(<boolean> debug_objects_mass)

(<boolean> debug_objects_size)

(<boolean> debug_objects_speed)

(<boolean> debug_objects_havok_group)

(<boolean> debug_objects_physics_models)

(<boolean> debug_objects_expensive_physics)

(<boolean> debug_objects_water_physics)

(<real> water_physics_velocity_minimum)

(<real> water_physics_velocity_maximum)

(<boolean> debug_objects_names)

(<boolean> debug_objects_collision_hierarchy)

(<boolean> debug_objects_names_full)

(<boolean> debug_objects_indices)

(<boolean> debug_objects_indices_decimal)

(<boolean> debug_objects_functions)

(<boolean> debug_objects_functions_all)

(<boolean> debug_objects_model_targets)

(<boolean> debug_objects_pathfinding)

(<boolean> debug_objects_node_bounds)

(<boolean> debug_objects_unit_vectors)

(<boolean> debug_objects_unit_boost)

(<boolean> debug_objects_unit_seats)

(<boolean> debug_objects_unit_mouth_apeture)

(<boolean> debug_objects_unit_firing)

(<boolean> debug_objects_unit_lipsync)

(<boolean> debug_objects_unit_lipsync_verbose)

(<boolean> debug_objects_unit_emotion)

(<boolean> debug_objects_unit_acceleration)

(<boolean> debug_objects_unit_camera)

(<boolean> debug_objects_biped_autoaim_pills)

(<boolean> debug_objects_physics_control_node)

(<boolean> debug_objects_ground_plane)

(<boolean> debug_objects_movement_mode)

(<boolean> debug_objects_unit_pathfinding_surface)

(<boolean> debug_objects_devices)

(<boolean> debug_objects_machines)

(<boolean> debug_objects_garbage)

(<long> debug_objects_type_mask)

(<boolean> debug_objects_sound_spheres)

(<boolean> debug_objects_active_nodes)

(<boolean> debug_objects_unit_soft_ping_damage_regions)

(<boolean> debug_objects_animation_times)

(<boolean> debug_objects_animation)

(<boolean> debug_objects_spawn_timers)

(<boolean> debug_objects_freeze_ragdolls)

(<boolean> debug_objects_disable_relaxation)

(<boolean> debug_objects_sentinel_physics_ignore_lag)

(<boolean> debug_objects_ignore_node_masks)

(<boolean> objects_move_multithreading_enabled)

(<boolean> objects_compute_node_orientation_multithreading_enabled)

(<boolean> objects_assert_on_job_inconsistancy)

(<boolean> debug_objects_force_awake)

(<boolean> debug_objects_disable_node_animation)

(<boolean> debug_objects_dump_memory_stats)

(<object> debug_objects_object)

(<long> debug_objects_by_index)

(<boolean> debug_objects_player_only)

(<boolean> debug_objects_vehicle_suspension)

(<boolean> debug_objects_skeletons)

(<boolean> debug_objects_cluster_counts)

(<long> debug_objects_cluster_count_threshold)

(<boolean> debug_objects_networking)

(<long> debug_objects_animation_pose_channel)

(<boolean> render_model_nodes)

(<boolean> render_model_point_counts)

(<boolean> render_model_vertex_counts)

(<boolean> render_model_names)

(<boolean> render_model_triangle_counts)

(<boolean> render_model_collision_vertex_counts)

(<boolean> render_model_collision_surface_counts)

(<boolean> render_model_texture_usage)

(<boolean> render_model_geometry_usage)

(<boolean> render_model_cost)

(<boolean> render_model_markers)

(<boolean> render_model_no_geometry)

(<boolean> render_model_skinning_disable)

(<boolean> debug_weapons)

(<boolean> debug_weapons_triggers)

(<boolean> debug_weapons_barrels)

(<boolean> debug_weapons_magazines)

(<boolean> debug_weapons_primary)

(<boolean> debug_weapons_secondary)

(<boolean> debug_damage)

(<boolean> debug_player_damage)

(<boolean> debug_damage_verbose)

(<boolean> debug_damage_radius)

(<boolean> debug_damage_transfer)

(<boolean> debug_damage_acceleration)

(<boolean> debug_damage_response)

(<boolean> debug_damage_aoe)

(<boolean> debug_damage_armor)

(<boolean> debug_damage_material)

(<boolean> debug_damage_networking)

(<boolean> debug_damage_filter_output)

(<boolean> debug_damage_large_font)

(<boolean> debug_damage_player_inflicted_recent)

(<real> debug_damage_player_inflicted_duration)

(<boolean> hs_verbose)

(<boolean> breakpoints_enabled)

(<boolean> debug_trigger_volumes)

(<boolean> debug_trigger_volume_triangulation)

(<boolean> debug_point_physics)

(<boolean> water_physics_debug)

(<boolean> collision_debug)

(<boolean> collision_debug_attached)

(<boolean> collision_debug_water_proxy)

(<boolean> collision_debug_spray)

(<boolean> collision_debug_objects_in_sphere)

(<boolean> collision_debug_objects_in_sphere_attached)

(<boolean> collision_debug_features)

(<boolean> collision_debug_phantom_bsp)

(<boolean> collision_debug_lightmaps)

(<boolean> collision_debug_geometry_sampling)

(<boolean> collision_debug_print_position)

(<boolean> collision_kd_tree_exhaustive_debugging_enabled)

(<boolean> collision_kd_tree_debug)

(<real> collision_kd_tree_minimum_radius)

(<long> collision_kd_tree_maximum_depth)

(<long> collision_debug_flags)

(<boolean> collision_debug_flag_structure)

(<boolean> collision_debug_flag_water)

(<boolean> collision_debug_flag_instanced_geometry)

(<boolean> collision_debug_flag_objects)

(<boolean> collision_debug_flag_objects_bipeds)

(<boolean> collision_debug_flag_objects_giants)

(<boolean> collision_debug_flag_objects_effect_scenery)

(<boolean> collision_debug_flag_objects_vehicles)

(<boolean> collision_debug_flag_objects_weapons)

(<boolean> collision_debug_flag_objects_equipment)

(<boolean> collision_debug_flag_objects_terminals)

(<boolean> collision_debug_flag_objects_projectiles)

(<boolean> collision_debug_flag_objects_scenery)

(<boolean> collision_debug_flag_objects_machines)

(<boolean> collision_debug_flag_objects_controls)

(<boolean> collision_debug_flag_objects_sound_scenery)

(<boolean> collision_debug_flag_objects_crates)

(<boolean> collision_debug_flag_objects_creatures)

(<boolean> collision_debug_flag_ignore_child_objects)

(<boolean> collision_debug_flag_ignore_nonpathfindable_objects)

(<boolean> collision_debug_flag_ignore_cinematic_objects)

(<boolean> collision_debug_flag_ignore_dead_bipeds)

(<boolean> collision_debug_flag_ignore_passthrough_bipeds)

(<boolean> collision_debug_flag_front_facing_surfaces)

(<boolean> collision_debug_flag_back_facing_surfaces)

(<boolean> collision_debug_flag_ignore_two_sided_surfaces)

(<boolean> collision_debug_flag_ignore_invisible_surfaces)

(<boolean> collision_debug_flag_ignore_breakable_surfaces)

(<boolean> collision_debug_flag_allow_early_out)

(<boolean> collision_debug_flag_try_to_keep_location_valid)

(<boolean> collision_debug_repeat)

(<real> collision_debug_point_x)

(<real> collision_debug_point_y)

(<real> collision_debug_point_z)

(<real> collision_debug_vector_i)

(<real> collision_debug_vector_j)

(<real> collision_debug_vector_k)

(<real> collision_debug_length)

(<real> collision_debug_width)

(<real> collision_debug_height)

(<long> collision_debug_ignore_object_index)

(<boolean> collision_debug_fill_face)

(<boolean> debug_obstacle_path)

(<boolean> debug_obstacle_path_on_failure)

(<real> debug_obstacle_path_start_point_x)

(<real> debug_obstacle_path_start_point_y)

(<real> debug_obstacle_path_goal_point_x)

(<real> debug_obstacle_path_goal_point_y)

(<boolean> suppress_pathfinding_generation)

(<boolean> ai_generate_flood_sector_wrl)

(<boolean> ai_pathfinding_generate_stats)

(<boolean> ai_pathfinding_use_exclusion)

(<boolean> ai_pathfinding_no_outlines_on_poopie_cutters)

(<boolean> debug_zone_set_critical_portals)

(<boolean> debug_camera)

(<boolean> debug_tangent_space)

(<boolean> debug_player)

(<boolean> debug_player_control_autoaim_always_active)

(<boolean> debug_structure)

(<boolean> debug_structure_occlude)

(<boolean> debug_structure_complexity)

(<boolean> debug_structure_water)

(<boolean> debug_structure_invisible)

(<boolean> debug_structure_cluster_skies)

(<boolean> debug_structure_slip_surfaces)

(<boolean> debug_structure_soft_ceilings)

(<boolean> debug_structure_soft_ceilings_biped)

(<boolean> debug_structure_soft_ceilings_vehicle)

(<boolean> debug_structure_soft_ceilings_huge_vehicle)

(<boolean> debug_structure_soft_ceilings_camera)

(<boolean> debug_structure_soft_ceilings_test_observer)

(<boolean> soft_ceilings_disable)

(<boolean> debug_structure_soft_kill)

(<boolean> debug_structure_cookie_cutters)

(<boolean> debug_structure_seam_edges)

(<boolean> debug_structure_seams)

(<boolean> debug_structure_seam_triangles)

(<long> debug_structure_seam_index)

(<boolean> debug_structure_seam_triangles_status)

(<boolean> debug_structure_seam_identical_instances)

(<boolean> debug_structure_automatic)

(<boolean> debug_structure_unique_colors)

(<boolean> debug_instanced_geometry)

(<boolean> debug_instanced_geometry_bounding_spheres)

(<boolean> debug_instanced_geometry_names)

(<boolean> debug_instanced_geometry_vertex_counts)

(<boolean> debug_instanced_geometry_collision_geometry)

(<boolean> debug_instanced_geometry_cookie_cutters)

(<boolean> debug_instanced_geometry_physics)

(<boolean> debug_instanced_geometry_physics_memory)

(<long> debug_instanced_geometry_physics_memory_threshold)

(<boolean> debug_structure_surface_references)

(<boolean> debug_structure_markers)

(<boolean> debug_bsp)

(<boolean> debug_kd)

(<long> debug_plane_index)

(<long> debug_surface_index)

(<boolean> debug_input)

(<long> debug_leaf0_index)

(<long> debug_leaf1_index)

(<long> debug_leaf_connection_index)

(<long> debug_cluster_index)

(<boolean> debug_first_person_weapons)

(<boolean> debug_first_person_models)

(<boolean> breakable_surfaces)

(<boolean> lightmap_light_preview_mode)

(<boolean> debug_lights)

(<boolean> debug_preplaced_lights)

(<boolean> debug_cheap_lights)

(<boolean> debug_light_passes)

(<boolean> debug_biped_landing)

(<boolean> debug_biped_throttle)

(<boolean> debug_biped_physics_nodes)

(<boolean> debug_biped_death_program_selector)

(<boolean> debug_biped_node_velocities)

(<boolean> debug_biped_proximity_feelers)

(<boolean> debug_collision_skip_instanced_geometry)

(<boolean> debug_collision_skip_objects)

(<boolean> debug_collision_skip_vectors)

(<boolean> debug_collision_object_payload_collision)

(<boolean> debug_collision_test_line_attached_disabled)

(<boolean> debug_objects_in_sphere_attached_disabled)

(<boolean> debug_material_effects)

(<boolean> debug_material_default_effects)

(<boolean> player_training_debug)

(<boolean> player_training_disable)

(<boolean> game_engine_debug_statborg)

(<boolean> jaime_control_hack)

(<boolean> bertone_control_hack)

(<boolean> motor_system_debug)

(<boolean> ai_profile_disable)

(<boolean> ai_profile_random)

(<boolean> ai_show)

(<boolean> ai_show_stats)

(<boolean> ai_show_actors)

(<boolean> ai_show_swarms)

(<boolean> ai_show_paths)

(<boolean> ai_show_line_of_sight)

(<boolean> ai_show_prop_types)

(<boolean> ai_show_sound_distance)

(<boolean> ai_render)

(<boolean> ai_render_all_actors)

(<boolean> ai_render_inactive_actors)

(<boolean> ai_render_lineoffire_crouching)

(<boolean> ai_render_lineoffire)

(<boolean> ai_render_lineofsight)

(<boolean> ai_render_ballistic_lineoffire)

(<boolean> ai_render_vision_cones)

(<boolean> ai_render_current_state)

(<boolean> ai_render_detailed_state)

(<boolean> ai_render_props)

(<boolean> ai_render_props_web)

(<boolean> ai_render_props_no_friends)

(<boolean> ai_render_props_unreachable)

(<boolean> ai_render_props_unopposable)

(<boolean> ai_render_props_stimulus)

(<boolean> ai_render_props_dialogue)

(<boolean> ai_render_props_salience)

(<boolean> ai_render_props_update)

(<boolean> ai_render_props_search)

(<boolean> ai_render_idle_look)

(<boolean> ai_render_support_surfaces)

(<boolean> ai_render_recent_damage)

(<boolean> ai_render_current_damage)

(<boolean> ai_render_threats)

(<boolean> ai_render_emotions)

(<boolean> ai_render_audibility)

(<boolean> ai_render_aiming_vectors)

(<boolean> ai_render_secondary_looking)

(<boolean> ai_render_targets)

(<boolean> ai_render_targets_all)

(<boolean> ai_render_targets_last_visible)

(<boolean> ai_render_target_groups)

(<boolean> ai_render_states)

(<boolean> ai_render_vitality)

(<boolean> ai_render_vehicle_anchor)

(<boolean> ai_render_flying_vehicle_movement_vectors)

(<boolean> ai_render_flying_target_tail_cone)

(<boolean> ai_render_evaluations)

(<boolean> ai_render_evaluations_detailed)

(<boolean> ai_render_evaluations_text)

(<short> ai_render_evaluations_shading_type)

(<boolean> ai_render_pursuit)

(<boolean> ai_render_shooting)

(<boolean> ai_render_trigger)

(<boolean> ai_render_projectile_aiming)

(<boolean> ai_render_aiming_validity)

(<boolean> ai_render_speech)

(<boolean> ai_render_leadership)

(<boolean> ai_render_status_flags)

(<boolean> ai_render_goal_state)

(<boolean> ai_render_behavior_debug)

(<boolean> ai_render_active_camo)

(<boolean> ai_render_vehicle_attachment)

(<boolean> ai_render_vehicle_reservations)

(<boolean> ai_render_actor_blinddeaf)

(<boolean> ai_render_morphing)

(<boolean> ai_render_look_orders)

(<boolean> ai_render_character_names)

(<boolean> ai_render_character_definition)

(<ai_behavior> ai_render_behavior_failure)

(<boolean> ai_render_bunkering)

(<short> ai_render_pathfinding_influence_map)

(<boolean> ai_render_dialogue)

(<boolean> ai_render_dialogue_queue)

(<boolean> ai_render_dialogue_records)

(<boolean> ai_render_dialogue_player_weights)

(<boolean> ai_dialogue_test_mode)

(<boolean> ai_dialogue_verbose_pattern_errors)

(<boolean> ai_dialogue_datamine_enable)

(<boolean> ai_dialogue_datamine_failed_patterns_enable)

(<boolean> ai_dialogue_log_failed_pattern_errors)

(<string_id> ai_dialogue_debug_specific_vocalization)

(<boolean> ai_render_teams)

(<boolean> ai_render_actor_types)

(<boolean> ai_render_player_ratings)

(<boolean> ai_render_spatial_effects)

(<boolean> ai_render_firing_positions)

(<boolean> ai_render_firing_position_statistics)

(<boolean> ai_render_firing_position_obstacles)

(<boolean> ai_render_firing_position_bunkering)

(<boolean> ai_render_mission_critical)

(<boolean> ai_render_gun_positions)

(<boolean> ai_render_aiming_positions)

(<boolean> ai_render_burst_geometry)

(<boolean> ai_render_vehicle_avoidance)

(<boolean> ai_render_vehicles_enterable)

(<boolean> ai_render_melee_check)

(<boolean> ai_render_dialogue_variants)

(<boolean> ai_render_grenades)

(<boolean> ai_render_danger_zones)

(<boolean> ai_render_control)

(<boolean> ai_render_activation)

(<boolean> ai_render_paths)

(<boolean> ai_render_paths_text)

(<boolean> ai_render_paths_selected_only)

(<boolean> ai_render_paths_destination)

(<boolean> ai_render_paths_raw)

(<boolean> ai_render_paths_current)

(<boolean> ai_render_paths_failed)

(<boolean> ai_render_paths_smoothed)

(<boolean> ai_render_paths_avoided)

(<boolean> ai_render_paths_error_thresholds)

(<short> ai_render_paths_avoidance_segment)

(<boolean> ai_render_paths_avoidance_obstacles)

(<boolean> ai_render_paths_avoidance_search)

(<boolean> ai_render_paths_nodes)

(<boolean> ai_render_paths_nodes_all)

(<boolean> ai_render_paths_nodes_polygons)

(<boolean> ai_render_paths_nodes_costs)

(<boolean> ai_render_paths_nodes_closest)

(<boolean> ai_render_paths_distance)

(<boolean> ai_render_player_aiming_blocked)

(<boolean> ai_render_squad_patrol_state)

(<boolean> ai_render_deceleration_obstacles)

(<boolean> ai_render_recent_obstacles)

(<boolean> ai_render_inertia)

(<boolean> ai_render_throttle_control)

(<boolean> ai_render_stopping_distance)

(<boolean> ai_render_destination_tolerance)

(<short> ai_max_path_traverse_iterations)

(<boolean> ai_use_path_attractor_bounds)

(<boolean> ai_render_pathfinding_performance)

(<short> ai_render_pathfinding_performance_threshold)

(<real> ai_render_pathfinding_performance_cell_size)

(<boolean> ai_render_combat_range)

(<boolean> ai_render_dynamic_firing_positions)

(<boolean> ai_render_clumps)

(<boolean> ai_render_clump_props)

(<boolean> ai_render_clump_props_all)

(<boolean> ai_render_clump_dialogue)

(<boolean> ai_render_sectors)

(<boolean> ai_render_sector_bsps)

(<boolean> ai_render_giant_sector_bsps)

(<boolean> ai_render_sector_link_errors)

(<boolean> ai_render_intersection_links)

(<boolean> ai_render_non_walkable_sectors)

(<boolean> ai_render_threshold_links)

(<boolean> ai_render_sector_geometry_errors)

(<boolean> ai_pathfinding_generation_verbose)

(<boolean> ai_render_timeslices)

(<long> ai_render_sectors_range_max)

(<long> ai_render_sectors_range_min)

(<long> ai_render_link_specific)

(<boolean> ai_render_links)

(<boolean> ai_render_link_detailed)

(<boolean> ai_render_user_hints)

(<boolean> ai_render_area_flight_hints)

(<boolean> ai_render_hints)

(<boolean> ai_render_hints_detailed)

(<boolean> ai_render_object_hints)

(<boolean> ai_render_object_hints_all)

(<boolean> ai_render_object_properties)

(<boolean> ai_render_hints_movement)

(<boolean> ai_render_movement_mapping)

(<boolean> ai_render_persistent_movement_override)

(<boolean> ai_orders_print_entries)

(<boolean> ai_orders_print_entries_verbose)

(<boolean> ai_render_orders)

(<boolean> ai_render_suppress_combat)

(<boolean> ai_render_squad_patrol)

(<boolean> ai_render_formations)

(<boolean> ai_render_objectives)

(<boolean> ai_render_strength)

(<boolean> ai_render_squad_fronts)

(<boolean> ai_render_squad_fronts_detailed)

(<ai> ai_render_ai_iterator)

(<boolean> ai_render_child_stack)

(<boolean> ai_render_behavior_movement_type)

(<boolean> ai_render_behavior_stack)

(<boolean> ai_render_behavior_stack_all)

(<boolean> ai_render_stimuli)

(<boolean> ai_render_stimuli_all)

(<boolean> ai_render_combat_status)

(<boolean> ai_render_decisions)

(<boolean> ai_render_decisions_all)

(<boolean> ai_render_command_scripts)

(<boolean> ai_render_script_data)

(<boolean> ai_hide_actor_errors)

(<boolean> ai_debug_tracking_data)

(<boolean> ai_debug_perception_data)

(<boolean> ai_debug_combat_status)

(<boolean> ai_render_tracked_props)

(<boolean> ai_render_tracked_props_all)

(<boolean> ai_debug_vignettes)

(<boolean> ai_render_joint_behaviors)

(<boolean> ai_render_swarm)

(<boolean> ai_render_flocks)

(<boolean> ai_render_flock_boid_destination)

(<boolean> ai_render_flock_danger)

(<boolean> ai_render_flock_boid_properties)

(<boolean> ai_render_vehicle_interest)

(<boolean> ai_render_player_battle_vector)

(<boolean> ai_render_player_needs_vehicle)

(<boolean> ai_debug_prop_refresh)

(<boolean> ai_debug_all_disposable)

(<boolean> ai_debug_disable_high_priority_timeslices)

(<ai> ai_current_squad)

(<ai> ai_current_actor)

(<long> ai_current_performance)

(<boolean> ai_render_vehicle_turns)

(<boolean> ai_render_discarded_firing_positions)

(<boolean> ai_render_firing_positions_all)

(<boolean> ai_render_firing_position_info)

(<boolean> ai_render_firing_position_index)

(<boolean> ai_inspect_avoidance_failure)

(<boolean> ai_render_action_selection_failure)

(<boolean> ai_render_debug_pathfinding)

(<real> ai_render_debug_pathfinding_wall_height)

(<real> ai_render_debug_pathfinding_wall_opacity)

(<boolean> ai_volume_avoidance_render)

(<boolean> ai_volume_avoidance_render_cuts)

(<boolean> ai_volume_avoidance_render_volumes)

(<boolean> ai_volume_avoidance_render_step_choices)

(<long> ai_volume_avoidance_render_step)

(<real> ai_volume_avoidance_render_tolerance)

(<string_id> ai_volume_avoidance_render_start_object_name)

(<string_id> ai_volume_avoidance_render_end_object_name)

(<boolean> ai_render_flying_cover)

(<boolean> ai_render_flying_area)

(<boolean> render_melee_sync_scoring)

(<short> ai_combat_status_asleep)

(<short> ai_combat_status_idle)

(<short> ai_combat_status_alert)

(<short> ai_combat_status_active)

(<short> ai_combat_status_uninspected)

(<short> ai_combat_status_definite)

(<short> ai_combat_status_certain)

(<short> ai_combat_status_visible)

(<short> ai_combat_status_clear_los)

(<short> ai_combat_status_dangerous)

(<short> ai_task_status_never)

(<short> ai_task_status_occupied)

(<short> ai_task_status_empty)

(<short> ai_task_status_inactive)

(<short> ai_task_status_exhausted)

(<short> ai_evaluator_preference)

(<short> ai_evaluator_avoidance)

(<short> ai_evaluator_sum)

(<short> ai_action_berserk)

(<short> ai_action_surprise_front)

(<short> ai_action_surprise_back)

(<short> ai_action_evade_left)

(<short> ai_action_evade_right)

(<short> ai_action_dive_forward)

(<short> ai_action_dive_back)

(<short> ai_action_dive_left)

(<short> ai_action_dive_right)

(<short> ai_action_advance)

(<short> ai_action_cheer)

(<short> ai_action_fallback)

(<short> ai_action_hold)

(<short> ai_action_point)

(<short> ai_action_posing)

(<short> ai_action_shakefist)

(<short> ai_action_signal_attack)

(<short> ai_action_signal_move)

(<short> ai_action_taunt)

(<short> ai_action_warn)

(<short> ai_action_wave)

(<short> ai_activity_none)

(<short> ai_activity_patrol)

(<short> ai_activity_stand)

(<short> ai_activity_crouch)

(<short> ai_activity_stand_drawn)

(<short> ai_activity_crouch_drawn)

(<short> ai_activity_combat)

(<short> ai_activity_backup)

(<short> ai_activity_guard)

(<short> ai_activity_guard_crouch)

(<short> ai_activity_guard_wall)

(<short> ai_activity_typing)

(<short> ai_activity_kneel)

(<short> ai_activity_gaze)

(<short> ai_activity_poke)

(<short> ai_activity_sniff)

(<short> ai_activity_track)

(<short> ai_activity_watch)

(<short> ai_activity_examine)

(<short> ai_activity_sleep)

(<short> ai_activity_at_ease)

(<short> ai_activity_cower)

(<short> ai_activity_tai_chi)

(<short> ai_activity_pee)

(<short> ai_activity_doze)

(<short> ai_activity_eat)

(<short> ai_activity_medic)

(<short> ai_activity_work)

(<short> ai_activity_cheering)

(<short> ai_activity_injured)

(<short> ai_activity_captured)

(<short> ai_movement_patrol)

(<short> ai_movement_asleep)

(<short> ai_movement_combat)

(<short> ai_movement_flee)

(<short> ai_movement_flaming)

(<short> ai_movement_stunned)

(<short> ai_movement_berserk)

(<boolean> ai_print_major_upgrade)

(<boolean> ai_print_evaluation_statistics)

(<boolean> ai_print_communication)

(<boolean> ai_print_communication_player)

(<boolean> ai_print_vocalizations)

(<boolean> ai_print_placement)

(<boolean> ai_print_speech)

(<boolean> ai_print_allegiance)

(<boolean> ai_print_lost_speech)

(<boolean> ai_print_migration)

(<boolean> ai_print_scripting)

(<boolean> ai_print_disposal)

(<boolean> ai_print_killing_sprees)

(<boolean> ai_naimad_spew)

(<boolean> ai_maxd_spew)

(<boolean> ai_debug_fast_los)

(<boolean> ai_debug_evaluate_all_positions)

(<boolean> ai_debug_path)

(<boolean> ai_debug_path_start_freeze)

(<boolean> ai_debug_path_end_freeze)

(<boolean> ai_debug_path_flood)

(<real> ai_debug_path_maximum_radius)

(<boolean> ai_debug_path_attractor)

(<real> ai_debug_path_attractor_radius)

(<real> ai_debug_path_attractor_weight)

(<real> ai_debug_path_accept_radius)

(<real> ai_debug_path_radius)

(<boolean> ai_debug_path_destructible)

(<boolean> ai_debug_path_giant)

(<boolean> ai_debug_ballistic_lineoffire_freeze)

(<boolean> ai_debug_path_naive_estimate)

(<boolean> ai_debug_blind)

(<boolean> ai_debug_deaf)

(<boolean> ai_debug_invisible_player)

(<boolean> ai_debug_ignore_player)

(<boolean> ai_debug_force_all_active)

(<boolean> ai_debug_path_disable_smoothing)

(<boolean> ai_debug_path_disable_obstacle_avoidance)

(<boolean> ai_render_level_of_detail)

(<boolean> ai_flocks_disable_timeslicing)

(<long> net_bitstream_debug)

(<boolean> net_bitstream_display_errors)

(<boolean> net_bitstream_capture_structure)

(<boolean> net_never_timeout)

(<boolean> net_replication_requests_print)

(<boolean> net_packet_print_mask)

(<boolean> net_experimental)

(<boolean> net_rate_unlimited)

(<long> net_rate_server)

(<long> net_rate_client)

(<boolean> net_bandwidth_unlimited)

(<long> net_bandwidth_per_channel)

(<boolean> net_skip_countdown)

(<boolean> net_host_delegation_disable)

(<boolean> net_speculative_host_migration_disable)

(<boolean> net_streams_disable)

(<boolean> net_ignore_version)

(<long> net_maximum_machine_count)

(<long> net_maximum_player_count)

(<boolean> net_allow_out_of_sync)

(<boolean> net_distributed_always)

(<boolean> net_distributed_never)

(<boolean> net_matchmaking_force_gather)

(<boolean> net_matchmaking_force_search)

(<boolean> net_matchmaking_fail_arbitration)

(<long> net_nat_override)

(<boolean> net_matchmaking_nat_check_enabled)

(<long> net_matchmaking_hopper_id_adjustment)

(<long> net_matchmaking_jackpot_override)

(<boolean> net_channel_manager_tear_down_secure_connection_early)

(<boolean> net_matchmaking_allow_early_start)

(<boolean> net_matchmaking_skip_host_migration)

(<boolean> net_matchmaking_force_disband)

(<long> net_enable_host_migration_loop)

(<long> net_enable_matchmaking_latency)

(<long> net_matchmaking_fake_progress)

(<boolean> net_matchmaking_force_no_joining)

(<boolean> net_matchmaking_allow_idle_controllers)

(<boolean> net_force_matchmaking_sync_halt_config)

(<long> net_set_channel_disconnect_interval)

(<boolean> net_disable_detatched_controller_check)

(<boolean> net_always_upload_matchmade_films)

(<boolean> net_never_block_for_film_uploading)

(<boolean> net_disable_active_roster_presence_hack)

(<boolean> net_disable_synchronous_halt_boots)

(<boolean> net_disable_lsp_leaderboards)

(<boolean> net_status_memory)

(<boolean> net_status_link)

(<boolean> net_status_channels)

(<boolean> net_status_connections)

(<boolean> net_status_message_queues)

(<boolean> net_status_observer)

(<boolean> net_status_sessions)

(<boolean> net_status_leaderboard)

(<long> net_status_leaderboard_mask)

(<boolean> net_status_idle_detection)

(<boolean> net_test)

(<long> net_test_rate)

(<boolean> net_test_debug_spheres)

(<long> net_test_matchmaking_playlist_index)

(<boolean> net_voice_diagnostics)

(<real> net_http_failure_ratio)

(<boolean> net_show_latency_and_framerate_metrics_on_chud)

(<boolean> net_fake_latency_and_framerate_metrics_on_chud)

(<real> net_drop_fraction_incoming)

(<boolean> net_disable_out_of_order_packet_handling)

(<boolean> sim_status_world)

(<boolean> sim_status_views)

(<boolean> sim_entity_validate)

(<boolean> sim_disable_aim_assist)

(<boolean> debug_player_teleport)

(<boolean> debug_players)

(<boolean> debug_player_input)

(<boolean> debug_player_input_stick_throws)

(<boolean> display_rumble_status_lines)

(<boolean> enable_pc_joystick)

(<boolean> rumble_enable_in_playback)

(<boolean> texture_cache_show_mipmap_bias)

(<boolean> texture_cache_graph)

(<boolean> texture_cache_list)

(<boolean> texture_cache_force_low_detail)

(<boolean> texture_cache_force_medium_detail)

(<boolean> texture_cache_force_high_detail)

(<boolean> texture_cache_status)

(<boolean> texture_cache_usage)

(<boolean> texture_cache_block_warning)

(<boolean> texture_cache_lod_bias)

(<boolean> texture_cache_dynamic_low_detail_texture)

(<boolean> render_debug_low_res_textures)

(<boolean> geometry_cache_graph)

(<boolean> geometry_cache_list)

(<boolean> geometry_cache_status)

(<boolean> geometry_cache_block_warning)

(<boolean> geometry_cache_never_block)

(<boolean> geometry_cache_debug_display)

(<boolean> director_camera_switch_fast)

(<boolean> director_camera_switch_disable)

(<boolean> debug_animation_camera_enable)

(<real> director_camera_speed_scale)

(<boolean> director_disable_first_person)

(<boolean> director_use_dt)

(<boolean> observer_collision_enabled)

(<boolean> observer_collision_anticipation_enabled)

(<long> observer_collision_water_flags)

(<boolean> observer_collision_debug)

(<real> g_observer_wave_height)

(<boolean> debug_recording)

(<short> debug_recording_newlines)

(<long> cinematic_letterbox_style)

(<boolean> run_game_scripts)

(<boolean> vehicle_status_display)

(<boolean> biped_meter_display)

(<long> default_scenario_ai_type)

(<boolean> debug_menu_enabled)

(<boolean> catch_exceptions)

(<boolean> debug_first_person_hide_base)

(<boolean> debug_first_person_hide_movement)

(<boolean> debug_first_person_hide_jitter)

(<boolean> debug_first_person_hide_overlay)

(<boolean> debug_first_person_hide_pitch_turn)

(<boolean> debug_first_person_hide_ammo)

(<boolean> debug_first_person_hide_ik)

(<boolean> global_playtest_mode)

(<real> ui_time_scale)

(<boolean> ui_display_memory)

(<boolean> ui_memory_verify)

(<boolean> xov_display_memory)

(<boolean> gui_debug_text_bounds_global)

(<boolean> gui_debug_bitmap_bounds_global)

(<boolean> gui_debug_model_bounds_global)

(<boolean> gui_debug_list_item_bounds_global)

(<boolean> gui_debug_list_bounds_global)

(<boolean> gui_debug_group_bounds_global)

(<boolean> gui_debug_screen_bounds_global)

(<long> gui_network_force_warning_index)

(<long> gui_network_force_error_index)

(<boolean> render_comment_flags)

(<boolean> render_comment_flags_text)

(<boolean> render_comment_flags_look_at)

(<boolean> enable_controller_flag_drop)

(<boolean> sapien_keyboard_toggle_for_camera_movement)

(<long> override_player_character_type)

(<boolean> e3)

(<boolean> debug_tag_dependencies)

(<boolean> check_system_heap)

(<long> data_mine_player_update_interval)

(<long> data_mine_mp_player_update_interval)

(<long> data_mine_debug_menu_interval)

(<long> data_mine_spam_enabled)

(<long> webstats_file_zip_writes_per_frame)

(<boolean> debug_projectiles)

(<boolean> debug_projectiles_network)

(<real> debug_projectiles_duration_post_death)

(<boolean> debug_projectiles_disable_authoritative_sticks)

(<boolean> debug_damage_effects)

(<boolean> debug_damage_effect_obstacles)

(<boolean> force_player_walking)

(<boolean> unit_animation_report_missing_animations)

(<boolean> font_cache_status)

(<boolean> font_cache_debug_texture)

(<boolean> font_cache_debug_graph)

(<boolean> font_cache_debug_list)

(<boolean> lruv_lirp_enabled)

(<boolean> allow_sound_cache_file_editing)

(<boolean> halt_on_stack_overflow)

(<boolean> disable_progress_screen)

(<boolean> render_thread_enable)

(<character_physics> character_force_physics)

(<boolean> enable_new_ik_method)

(<real> animation_throttle_dampening_scale)

(<real> animation_blend_change_scale)

(<boolean> debug_animation_force_subframe_on_loop)

(<boolean> debug_animation_fp_jump_land_disable)

(<boolean> debug_animation_fp_weapon_ik_disable)

(<boolean> debug_animation_fp_sprint_disable)

(<real> animation_turn_speed_blend_scale)

(<boolean> biped_fitting_enable)

(<boolean> biped_fitting_root_offset_enable)

(<boolean> biped_pivot_enable)

(<boolean> biped_pivot_allow_player)

(<boolean> ik_disable)

(<boolean> ik_chain_fixup_disable)

(<long> giant_hunt_player)

(<real> giant_hunting_min_radius)

(<real> giant_hunting_max_radius)

(<real> giant_hunting_throttle_scale)

(<long> giant_weapon_wait_time)

(<long> giant_weapon_trigger_time)

(<boolean> giant_ik)

(<boolean> giant_foot_ik)

(<boolean> giant_ankle_ik)

(<boolean> giant_elevation_control)

(<boolean> giant_force_buckle)

(<boolean> giant_force_crouch)

(<boolean> giant_force_death)

(<boolean> giant_buckle_rotation)

(<boolean> debug_objects_giant_feet)

(<boolean> debug_objects_giant_buckle)

(<boolean> enable_xsync_timings)

(<boolean> xsync_restricted_tag_groups)

(<boolean> enable_cache_build_resources)

(<long> xma_compression_level_default)

(<boolean> enable_console_window)

(<boolean> display_colors_in_banded_gamma)

(<boolean> use_tool_command_legacy)

(<long> maximum_tool_command_history)

(<boolean> disable_unit_aim_screens)

(<boolean> disable_unit_look_screens)

(<boolean> disable_unit_eye_tracking)

(<boolean> enable_tag_resource_xsync)

(<boolean> dont_recompile_shaders)

(<boolean> insepcting_xenon_shader)

(<boolean> use_temp_directory_for_files)

(<boolean> scenario_load_all_tags)

(<boolean> synchronization_debug)

(<boolean> debug_objects_scenery)

(<boolean> disable_switch_zone_sets)

(<boolean> facial_animation_testing_enabled)

(<boolean> profiler_datamine_uploads_enabled)

(<boolean> debug_object_recycling)

(<boolean> enable_sound_over_network)

(<boolean> lsp_allow_lsp_connections)

(<boolean> lsp_allow_raw_connections)

(<long> lsp_service_id_override)

(<boolean> shared_files_enable)

(<boolean> sound_manager_debug_suppression)

(<boolean> serialize_update_and_render)

(<boolean> minidump_use_retail_provider)

(<boolean> scenario_use_non_bsp_zones)

(<boolean> allow_restricted_active_zone_reloads)

(<boolean> debug_scenario_content_status)

(<boolean> debug_cinematic_controls_enable)

(<boolean> debug_skulls)

(<boolean> debug_campaign_metagame)

(<boolean> debug_campaign_metagame_verbose)

(<boolean> campaign_metagame_datamine)

(<real> aiming_interpolation_stop_delta)

(<real> aiming_interpolation_start_delta)

(<real> aiming_interpolation_rate)

(<boolean> airborne_arc_enabled)

(<real> airborne_descent_test_duration)

(<long> airborne_descent_test_count)

(<boolean> enable_amortized_prediction)

(<long> amortized_prediction_object_batch_size)

(<boolean> enable_tag_resource_prediction)

(<boolean> enable_entire_pvs_prediction)

(<boolean> enable_cluster_objects_prediction)

(<boolean> disable_main_loop_throttle)

(<boolean> enable_partial_cache_flush)

(<boolean> force_unit_walking)

(<boolean> leap_force_start_rotation)

(<boolean> leap_force_end_rotation)

(<boolean> leap_force_flight_start_rotation)

(<boolean> leap_force_flight_end_rotation)

(<real> leap_flight_path_scale)

(<real> leap_departure_power)

(<real> leap_departure_scale)

(<real> leap_arrival_power)

(<real> leap_arrival_scale)

(<real> leap_twist_power)

(<real> leap_cannonball_power)

(<real> leap_cannonball_scale)

(<real> leap_idle_power)

(<real> leap_idle_scale)

(<real> leap_overlay_power)

(<real> leap_overlay_scale)

(<real> leap_interpolation_limit)

(<boolean> biped_fake_soft_landing)

(<boolean> biped_fake_hard_landing)

(<real> biped_soft_landing_recovery_scale)

(<real> biped_hard_landing_recovery_scale)

(<real> biped_landing_absorbtion)

(<boolean> debug_player_network_aiming)

(<boolean> collision_hierarchy_objects_in_cone_enabled)

(<boolean> aim_assist_disable_target_lead_vector)

(<boolean> enable_tag_edit_sync)

(<boolean> cache_file_builder_allow_sharing)

(<boolean> render_debug_dont_flash_low_res_textures)

(<boolean> debug_objects_pendulum)

(<boolean> ui_alpha)

(<long> ui_alpha_lockdown)

(<boolean> ui_alpha_eula_accepted)

(<long> ui_alpha_custom_games_enabled)

(<boolean> ui_new_user_experience_suppress)

(<long> net_config_client_badness_rating_threshold_override)

(<long> net_config_disable_bad_client_anticheating_override)

(<long> net_config_disable_bad_connectivity_anticheating_override)

(<long> net_config_disable_bad_bandwidth_anticheating_override)

(<long> net_config_maximum_multiplayer_split_screen_override)

(<long> net_config_crash_handling_minidump_type_override)

(<long> net_config_crash_handling_ui_display_override)

(<long> online_files_slowdown)

(<boolean> debug_trace_main_events)

(<boolean> force_xsync_memory_buyback)

(<boolean> bitmaps_trim_unused_pixels)

(<boolean> bitmaps_interleave_compressed_bitmaps)

(<boolean> ignore_predefined_performance_throttles)

(<boolean> enable_first_person_prediction)

(<boolean> enable_structure_prediction)

(<boolean> cache_file_builder_dump_tag_sections)

(<boolean> minidump_force_regular_minidump_with_ui)

(<real> giant_custom_anim_recovery_time)

(<boolean> facial_animation_enable_lipsync)

(<boolean> facial_animation_enable_gestures)

(<boolean> facial_animation_enable_noise)

(<boolean> render_alpha_to_coverage)

(<boolean> enable_sound_transmission)

(<boolean> enable_audibility_generation)

(<real> motion_blur_expected_dt)

(<real> motion_blur_max)

(<real> motion_blur_scale)

(<real> motion_blur_center_falloff_x)

(<real> motion_blur_center_falloff_y)

(<real> motion_blur_fps_threshold)

(<boolean> antialias_blur_compare)

(<real> antialias_fps_threshold)

(<boolean> unicode_warn_on_truncation)

(<long> debug_determinism_version)

(<long> debug_determinism_compatible_version)

(<boolean> debug_fire_teams)

(<boolean> player_can_issue_fireteam_directive)

(<real> g_fireteam_target_selection_preference_bonus)

(<real> ai_fireteam_hold_distance)

(<boolean> ai_fireteam_protect_leader)

(<boolean> error_geometry_environment_enabled)

(<boolean> error_geometry_lightmap_enabled)

(<boolean> error_geometry_seam_enabled)

(<boolean> error_geometry_instance_enabled)

(<boolean> error_geometry_object_enabled)

(<boolean> debug_objects_unit_melee)

(<boolean> force_buffer_2_frames)

(<boolean> disable_render_state_cache_optimization)

(<boolean> debug_objects_root_node_print)

(<boolean> enable_better_cpu_gpu_sync)

(<boolean> require_secure_cache_files)

(<boolean> require_secure_variants)

(<boolean> debug_aim_assist_targets_enabled)

(<boolean> debug_aim_assist_targets_names)

(<boolean> debug_aim_assist_vectors)

(<long> motion_blur_max_viewport_count)

(<boolean> cinematic_prediction_enable)

(<boolean> skies_delete_on_zone_set_switch_enable)

(<boolean> reduce_widescreen_fov_during_cinematics)

(<boolean> cinematic_debugging_enable)

(<boolean> cinematic_debugging_verbose_enable)

(<boolean> import_sound_write_diagnostic_files)

(<boolean> import_sound_cut_samples_simple)

(<long> import_sound_cut_samples_search_count)

(<long> import_sound_cut_samples_slope_count)

(<boolean> sound_no_hdd_turn_on_the_juice)

(<boolean> sound_no_hdd_caching_enabled)

(<boolean> game_state_allow_insecure)

(<boolean> dump_cache_builder_determinism_log)

(<boolean> dump_cache_builder_determinism_log_full)

(<boolean> allow_insecure_resources)

(<boolean> use_new_dialogue_stripping)

(<boolean> ragdoll_immediately_on_death)

(<boolean> xsync_all_language_for_sound)

(<boolean> debug_sound_totals)

(<boolean> debug_sound_class_totals)

(<boolean> debug_multiplayer_object_properties)

(<boolean> g_enable_debug_animation_solving)

(<real> g_animation_debug_initial_camera_distance)

(<real> g_animation_debug_initial_target_vertical_offset)

(<boolean> objective_player_can_buy_while_dead)

(<real> objective_auto_switch_to_dead_cam_delay)

(<real> objective_dead_cam_respawning_delay_before_voluntary_control_of_spawn)

(<boolean> objective_dead_cam_respawn_suppression)

(<boolean> objective_dead_cam_respawn_time_resets_when_switching_targets)

(<boolean> objective_dead_cam_extermination_allows_push_to_respawn)

(<boolean> objective_dead_cam_enable_push_to_respawn)

(<real> objective_dead_cam_respawning_respawn_time_on_player_seconds)

(<real> objective_dead_cam_respawning_respawn_time_at_base_seconds)

(<real> objective_dead_cam_respawning_respawn_time_at_base_after_extermination_seconds)

(<boolean> objective_allow_laser_designation_selection_of_objectives)

(<boolean> objective_buy_menu_screen_button_override_dpad_up)

(<boolean> requisition_auto_enter_drivers_seat_of_purchased_vehicles)

(<boolean> requisition_enable_budget_limits)

(<boolean> laser_designation_control_enable)

(<boolean> laser_designation_control_as_toggle)

(<boolean> laser_designation_allow_firing_at_own_laser)

(<boolean> laser_designation_requires_equipment)

(<real> laser_designation_laser_point_fade_out_seconds)

(<long> net_show_simulation_quality_machine_index)

(<boolean> simulation_interpolation_visualize)

(<boolean> simulation_interpolation_disable_all_position_interpolation)

(<boolean> simulation_interpolation_disable_all_rotation_interpolation)

(<boolean> simulation_interpolation_force_all_interpolation_to_use_velocity_bumps)

(<boolean> simulation_interpolation_force_all_interpolation_to_use_blending)

(<boolean> simulation_interpolation_use_override_position_config)

(<boolean> simulation_interpolation_use_override_rotation_config)

(<boolean> simulation_interpolation_force_all_interpolation_to_use_warps)

(<boolean> simulation_interpolation_disable_velocity_bumps)

(<boolean> simulation_interpolation_disable_blends)

(<boolean> debug_instance_imposters)

(<boolean> debug_instance_groups)

(<boolean> debug_instance_group_decorator_type)

(<boolean> debug_instance_group_non_decorator_type)

(<boolean> debug_instance_group_members)

(<boolean> debug_instance_group_bounds)

(<boolean> render_debug_big_battle_squads)

(<boolean> megalo_debug)

(<boolean> megalo_debug_filter_lists)

(<boolean> debug_objects_physics_models_render_polyhedron_points)

(<long> net_pretend_latency)

(<real> net_force_voice_transmission_frequency)

(<boolean> cache_file_builder_allow_invalid_map_sizes)

(<boolean> weapon_barrel_create_projectiles_log)

(<boolean> display_prefetch_progress)

(<boolean> cache_file_builder_unshare_unique_map_locations)

(<boolean> damage_response_ignore_seat_ejection)

(<real> spawning_unseen_spawning_cone_distance)

(<real> spawning_unseen_spawning_cone_angle)

(<boolean> respawn_players_into_friendly_vehicle)

(<boolean> aim_assist_log)

(<boolean> use_old_object_node_matrix_computation_method)

(<long> player_profile_read_minimum_duration_milliseconds)

(<long> player_profile_write_minimum_duration_milliseconds)

(<boolean> player_profile_bypass_hash_check)

(<boolean> debug_main_time_throttle_when_matching_remote_time)

(<boolean> debug_performances)

(<string_id> debug_performance_name)

(<long> megalo_profiling_mode)

(<boolean> megalo_filter_iteration_enabled)

(<long> net_force_sync_turbo_channel)

(<boolean> net_force_sync_turbo_all)

(<boolean> net_force_sync_turbo_none)

(<boolean> g_fade_to_black_enabled)

(<boolean> debug_weapon_tracking)

(<boolean> debug_unit_tracking)

(<boolean> superforge)

(<boolean> debug_melee_dash)

(<boolean> g_use_halo3_and_atlas_shipping_leftover_ticks_approach)

(<boolean> g_debug_draw_observer)

(<boolean> g_use_old_player_control_timing_algorithm)

(<boolean> g_disable_input_adjustment)

(<boolean> g_main_debug_fake_game_ticks)

(<long> g_main_debug_fake_game_ticks_duration_milliseconds)

(<boolean> g_wait_for_previous_frame_swap)

(<real> g_force_main_time_update_seconds_elapsed)

(<boolean> g_main_always_publish_on_game_tick)

(<boolean> display_client_synchronous_input_lag)

(<boolean> debug_use_omaha_synchronous_game_time_matching)

(<boolean> assert_on_weak_damage_owner_code)

(<boolean> watermark_enabled)

(<boolean> watermark_compass_enabled)

(<boolean> chud_cache_render_data)

(<long> net_debug_channel_to_graph)

(<boolean> net_dump_network_statistics_on_upload)

(<boolean> net_host_selection_logging_verbose)

(<boolean> clients_always_respect_action_priority_for_weapon_switch)

(<real> render_debug_visibility_bounding_sphere_scale)

(<boolean> game_engine_events_show_even_with_unparsed_tokens)

(<boolean> debug_button_action_mapping_active)

(<boolean> randomize_player_appearance_on_spawn)

(<boolean> render_debug_pause_aging)

(<boolean> main_disable_pix_counters)

(<boolean> net_always_record_bandwidth)

(<boolean> use_playtest_rasterizer_throttle)

(<boolean> render_debug_game_grief)

(<boolean> render_debug_players_probability_of_winning)

(<boolean> chud_state_debug_flag)

(<boolean> render_invisible_models)

(<long> main_block_simulate_ms)

(<long> net_block_simulate_ms)

(<long> net_message_queue_stress_test_pct)

(<boolean> convex_decomposition_enabled)

(<long> transport_force_shutdown)

(<boolean> prune_globals_for_gametype)

(<boolean> disable_saved_film_history)

(<boolean> allow_vehicle_to_vehicle_boarding)

(<long> visibility_query_plane_count)

(<boolean> jumperjumper_enabled)

(<boolean> net_banhammer_lsp_sync_enabled)

(<boolean> supply_depot_notification_enabled)

(<boolean> nag_messages_enabled)

(<boolean> net_log_all_message_queue_state)

(<boolean> debug_havok_memory)

(<long> render_transparents_bucket_low_res)

(<real> observer_collision_speed_scale)

(<boolean> leave_bonobo_init_in_place)

(<boolean> render_pre_placed_lights)

(<boolean> allow_spawning_with_no_spawn_points)

(<boolean> cui_service_record_test_enabled)

(<boolean> debug_aim_assist_lead_vectors_disabled)

(<real> first_person_motion_blur_speed_mapping_scale)

(<real> first_person_motion_blur_speed_mapping_offset)

(<real> special_object_motion_blur_speed_mapping_scale)

(<real> special_object_motion_blur_speed_mapping_offset)

(<boolean> debug_suppress_crosshair_player_names)

(<boolean> debug_suppress_all_game_engine_player_names)

(<boolean> mirror_context_tracking_enabled)

(<boolean> debug_airstrike)

(<boolean> cui_debug_window_index)

(<boolean> cui_render_debug_enabled)

(<boolean> guardian_kills_awarded_to_most_damage)

(<boolean> render_coop_spawn_safety_status_tests)

(<boolean> network_friends_leaderboard_test_enabled)

(<real> decal_bias_coeff_d)

(<real> decal_bias_coeff_e)

(<boolean> dump_game_options_on_establish_fail)

(<real> shadow_apply_depth_bias)

(<real> shadow_apply_slope_depth_bias)

(<long> campaign_save_tracker_test_content_item_exists)

(<long> override_file_transfer_upstream_quota_bytes_per_second)

(<boolean> enable_prefetch_resource_defragmentation)

(<boolean> player_respawn_check_airborne)

(<boolean> use_command_buffer_shadow_generate)

(<boolean> rasterizer_profiler_single_callback_enabled)

(<real> shadow_generate_dynamic_lights_depth_bias)

(<real> shadow_generate_dynamic_lights_slope_depth_bias)

(<real> shadow_generate_depth_bias)

(<real> shadow_generate_slope_depth_bias)

(<boolean> imposter_cache_build)

(<boolean> mvar_files_enabled)

(<boolean> mglo_files_enabled)

(<boolean> imposter_capturing)

(<boolean> debug_snap_to_map_variant)

(<boolean> enable_initial_bink_reclaim)

(<boolean> map_variant_debug)

(<boolean> map_variant_debug_objects)

(<long> render_max_z_prepass_splitscreen_count)

(<boolean> render_low_res_transparency_debug)

(<boolean> havok_debug_immediate)

(<boolean> debug_sound_manager_channels)

(<boolean> use_fmod)

(<boolean> use_shadow_depth_bias_tweak)

(<real> shadow_depth_bias_tweak)

(<real> shadow_slope_depth_bias_tweak)

(<real> rain_drop_alpha_scale)

(<boolean> page_cache_enable_status_lines)

(<boolean> show_dynamic_buffer_stats)

(<boolean> high_quality_shadows)

(<boolean> high_quality_shadow_filter)

(<boolean> render_debug_instance_imposter_alpha_scale_override)

(<real> render_debug_instance_imposter_alpha_scale)

(<boolean> render_debug_instance_imposter_distance_scale_override)

(<real> render_debug_instance_imposter_distance_scale)

(<boolean> saved_film_tool_data_enable)

(<boolean> NetBandwidthReportFromFilm)

(<boolean> NetSavedFilmBypassSimulation)

(<boolean> breadcrumbs_navpoints_enabled_override)

