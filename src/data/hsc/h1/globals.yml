external_globals:
  - slug: ai_debug_ballistic_lineoffire_freeze
    tags:
      - projectile
    info:
      en: |-
        ```hsc
        (ai_debug_ballistic_lineoffire_freeze [boolean])
        ```
        If enabled, the ballistic arc drawn by `ai_render_ballistic_lineoffire`
        will not update when new grenades are thrown.
  - slug: ai_debug_blind
    info:
      en: |-
        ```hsc
        (ai_debug_blind)
        ```
  - slug: ai_debug_communication_focus_enable
    info:
      en: |-
        ```hsc
        (ai_debug_communication_focus_enable)
        ```
  - slug: ai_debug_communication_random_disabled
    info:
      en: |-
        ```hsc
        (ai_debug_communication_random_disabled)
        ```
  - slug: ai_debug_communication_timeout_disabled
    info:
      en: |-
        ```hsc
        (ai_debug_communication_timeout_disabled)
        ```
  - slug: ai_debug_communication_unit_repeat_disabled
    info:
      en: |-
        ```hsc
        (ai_debug_communication_unit_repeat_disabled)
        ```
  - slug: ai_debug_deaf
    info:
      en: |-
        ```hsc
        (ai_debug_deaf)
        ```
  - slug: ai_debug_disable_wounded_sounds
    info:
      en: |-
        ```hsc
        (ai_debug_disable_wounded_sounds)
        ```
  - slug: ai_debug_evaluate_all_positions
    info:
      en: |-
        ```hsc
        (ai_debug_evaluate_all_positions)
        ```
  - slug: ai_debug_fast_los
    info:
      en: |-
        ```hsc
        (ai_debug_fast_los)
        ```
  - slug: ai_debug_flee_always
    info:
      en: |-
        ```hsc
        (ai_debug_flee_always)
        ```
  - slug: ai_debug_force_all_active
    info:
      en: |-
        ```hsc
        (ai_debug_force_all_active)
        ```
  - slug: ai_debug_force_crouch
    info:
      en: |-
        ```hsc
        (ai_debug_force_crouch)
        ```
  - slug: ai_debug_force_vocalizations
    info:
      en: |-
        ```hsc
        (ai_debug_force_vocalizations)
        ```
  - slug: ai_debug_ignore_player
    info:
      en: |-
        ```hsc
        (ai_debug_ignore_player)
        ```
  - slug: ai_debug_invisible_player
    info:
      en: |-
        ```hsc
        (ai_debug_invisible_player)
        ```
  - slug: ai_debug_oversteer_disable
    info:
      en: |-
        ```hsc
        (ai_debug_oversteer_disable)
        ```
  - slug: ai_debug_path
    info:
      en: |-
        ```hsc
        (ai_debug_path)
        ```
  - slug: ai_debug_path_accept_radius
    info:
      en: |-
        ```hsc
        (ai_debug_path_accept_radius)
        ```
  - slug: ai_debug_path_attractor
    info:
      en: |-
        ```hsc
        (ai_debug_path_attractor)
        ```
  - slug: ai_debug_path_attractor_radius
    info:
      en: |-
        ```hsc
        (ai_debug_path_attractor_radius)
        ```
  - slug: ai_debug_path_attractor_weight
    info:
      en: |-
        ```hsc
        (ai_debug_path_attractor_weight)
        ```
  - slug: ai_debug_path_disable_obstacle_avoidance
    info:
      en: |-
        ```hsc
        (ai_debug_path_disable_obstacle_avoidance)
        ```
  - slug: ai_debug_path_disable_smoothing
    info:
      en: |-
        ```hsc
        (ai_debug_path_disable_smoothing)
        ```
  - slug: ai_debug_path_end_freeze
    info:
      en: |-
        ```hsc
        (ai_debug_path_end_freeze)
        ```
  - slug: ai_debug_path_flood
    info:
      en: |-
        ```hsc
        (ai_debug_path_flood)
        ```
  - slug: ai_debug_path_maximum_radius
    info:
      en: |-
        ```hsc
        (ai_debug_path_maximum_radius)
        ```
  - slug: ai_debug_path_start_freeze
    info:
      en: |-
        ```hsc
        (ai_debug_path_start_freeze)
        ```
  - slug: ai_fix_actor_variants
    info:
      en: |-
        ```hsc
        (ai_fix_actor_variants)
        ```
  - slug: ai_fix_defending_guard_firing_positions
    info:
      en: |-
        ```hsc
        (ai_fix_defending_guard_firing_positions)
        ```
  - slug: ai_print_acknowledgement
    info:
      en: |-
        ```hsc
        (ai_print_acknowledgement)
        ```
  - slug: ai_print_allegiance
    info:
      en: |-
        ```hsc
        (ai_print_allegiance)
        ```
  - slug: ai_print_automatic_migration
    info:
      en: |-
        ```hsc
        (ai_print_automatic_migration)
        ```
  - slug: ai_print_bsp_transition
    info:
      en: |-
        ```hsc
        (ai_print_bsp_transition)
        ```
  - slug: ai_print_command_lists
    info:
      en: |-
        ```hsc
        (ai_print_command_lists)
        ```
  - slug: ai_print_communication
    info:
      en: |-
        ```hsc
        (ai_print_communication)
        ```
  - slug: ai_print_communication_player
    info:
      en: |-
        ```hsc
        (ai_print_communication_player)
        ```
  - slug: ai_print_conversations
    info:
      en: |-
        ```hsc
        (ai_print_conversations)
        ```
  - slug: ai_print_damage_modifiers
    tags:
      - damage
    info:
      en: |-
        ```hsc
        (ai_print_damage_modifiers [boolean])
        ```
        When an encounter is [selected](~sapien#encounters-and-ai), damage modifiers are logged at the bottom of the screen.
  - slug: ai_print_evaluation_statistics
    info:
      en: |-
        ```hsc
        (ai_print_evaluation_statistics)
        ```
  - slug: ai_print_killing_sprees
    info:
      en: |-
        ```hsc
        (ai_print_killing_sprees)
        ```
  - slug: ai_print_lost_speech
    info:
      en: |-
        ```hsc
        (ai_print_lost_speech)
        ```
  - slug: ai_print_major_upgrade
    info:
      en: |-
        ```hsc
        (ai_print_major_upgrade)
        ```
  - slug: ai_print_migration
    info:
      en: |-
        ```hsc
        (ai_print_migration)
        ```
  - slug: ai_print_oversteer
    info:
      en: |-
        ```hsc
        (ai_print_oversteer)
        ```
  - slug: ai_print_placement
    info:
      en: |-
        ```hsc
        (ai_print_placement)
        ```
  - slug: ai_print_pursuit_checks
    info:
      en: |-
        ```hsc
        (ai_print_pursuit_checks)
        ```
  - slug: ai_print_respawn
    info:
      en: |-
        ```hsc
        (ai_print_respawn)
        ```
  - slug: ai_print_rule_values
    info:
      en: |-
        ```hsc
        (ai_print_rule_values)
        ```
  - slug: ai_print_rules
    info:
      en: |-
        ```hsc
        (ai_print_rules)
        ```
  - slug: ai_print_scripting
    info:
      en: |-
        ```hsc
        (ai_print_scripting)
        ```
  - slug: ai_print_secondary_looking
    info:
      en: |-
        ```hsc
        (ai_print_secondary_looking)
        ```
  - slug: ai_print_speech
    tags:
      - dialogue
    info:
      en: |-
        ```hsc
        (ai_print_speech [boolean])
        ```
        Displays red text over AI whenever they vocalize, with the name of the [dialogue](~) field played. For example, `pain body minor`.
  - slug: ai_print_speech_timers
    info:
      en: |-
        ```hsc
        (ai_print_speech_timers)
        ```
  - slug: ai_print_surprise
    info:
      en: |-
        ```hsc
        (ai_print_surprise)
        ```
  - slug: ai_print_uncovering
    info:
      en: |-
        ```hsc
        (ai_print_uncovering)
        ```
  - slug: ai_print_unfinished_paths
    info:
      en: |-
        ```hsc
        (ai_print_unfinished_paths)
        ```
  - slug: ai_print_vocalizations
    tags:
      - dialogue
    info:
      en: |-
        ```hsc
        (ai_print_vocalizations [boolean])
        ```
        Prints vocalizations to the console as they happen, including the
        encounter, squad, actor, dialogue type (e.g. exclaim), and line. For
        example, `beach_lz/camp_center_grunt/grunt: talk flee [72/flee]`.
  - slug: ai_profile_disable
    info:
      en: |-
        ```hsc
        (ai_profile_disable)
        ```
  - slug: ai_profile_random
    info:
      en: |-
        ```hsc
        (ai_profile_random)
        ```
  - slug: ai_render
    info:
      en: |-
        ```hsc
        (ai_render [boolean])
        ```
        Toggles the display of any enabled AI debug overlays. Defaults to `true`.
  - slug: ai_render_activation
    info:
      en: |-
        ```hsc
        (ai_render_activation)
        ```
  - slug: ai_render_active_cover_seeking
    info:
      en: |-
        ```hsc
        (ai_render_active_cover_seeking)
        ```
  - slug: ai_render_aiming_validity
    info:
      en: |-
        ```hsc
        (ai_render_aiming_validity)
        ```
  - slug: ai_render_aiming_vectors
    info:
      en: |-
        ```hsc
        (ai_render_aiming_vectors)
        ```
  - slug: ai_render_all_actors
    info:
      en: |-
        ```hsc
        (ai_render_all_actors)
        ```
  - slug: ai_render_audibility
    info:
      en: |-
        ```hsc
        (ai_render_audibility)
        ```
  - slug: ai_render_ballistic_lineoffire
    tags:
      - projectile
    info:
      en: |-
        ```hsc
        (ai_render_ballistic_lineoffire [boolean])
        ```
        Toggles the rendering of [ballistic aiming](~projectile#tag-field-projectile-flags-ai-must-use-ballistic-aiming)
        arcs when AI throw grenades only (does not include hunter guns, wraiths,
        or other ballistic weapons). The arc is shown in green when unobstructed
        and orange when obstructed by an object or the BSP. Its origin point and
        vector are shown in yellow. Only a single arc is shown at a time and
        updates whenever a new grenade is thrown. This can be paused with
        `ai_debug_ballistic_lineoffire_freeze`.
  - slug: ai_render_burst_geometry
    info:
      en: |-
        ```hsc
        (ai_render_burst_geometry)
        ```
  - slug: ai_render_charge_decisions
    info:
      en: |-
        ```hsc
        (ai_render_charge_decisions)
        ```
  - slug: ai_render_control
    info:
      en: |-
        ```hsc
        (ai_render_control)
        ```
  - slug: ai_render_current_state
    info:
      en: |-
        ```hsc
        (ai_render_current_state)
        ```
  - slug: ai_render_danger_zones
    info:
      en: |-
        ```hsc
        (ai_render_danger_zones)
        ```
  - slug: ai_render_detailed_state
    info:
      en: |-
        ```hsc
        (ai_render_detailed_state)
        ```
  - slug: ai_render_dialogue_variants
    info:
      en: |-
        ```hsc
        (ai_render_dialogue_variants [boolean])
        ```
        Shows pink text overlays over each unit with [dialogue](~h1/tags/dialogue)
        showing which variant they use, like if marines are a "mendoza" or a "bisenti".
        For example, `variant 11 dialogue 0 aussie`.
    tags:
      - dialogue
  - slug: ai_render_emotions
    info:
      en: |-
        ```hsc
        (ai_render_emotions)
        ```
  - slug: ai_render_encounter_activeregion
    info:
      en: |-
        ```hsc
        (ai_render_encounter_activeregion)
        ```
  - slug: ai_render_evaluations
    info:
      en: |-
        ```hsc
        (ai_render_evaluations)
        ```
  - slug: ai_render_firing_positions
    info:
      en: |-
        ```hsc
        (ai_render_firing_positions)
        ```
  - slug: ai_render_grenade_decisions
    info:
      en: |-
        ```hsc
        (ai_render_grenade_decisions)
        ```
  - slug: ai_render_gun_positions
    info:
      en: |-
        ```hsc
        (ai_render_gun_positions)
        ```
  - slug: ai_render_idle_look
    info:
      en: |-
        ```hsc
        (ai_render_idle_look)
        ```
  - slug: ai_render_inactive_actors
    info:
      en: |-
        ```hsc
        (ai_render_inactive_actors)
        ```
  - slug: ai_render_lineoffire
    info:
      en: |-
        ```hsc
        (ai_render_lineoffire)
        ```
  - slug: ai_render_lineoffire_crouching
    info:
      en: |-
        ```hsc
        (ai_render_lineoffire_crouching)
        ```
  - slug: ai_render_lineofsight
    info:
      en: |-
        ```hsc
        (ai_render_lineofsight)
        ```
  - slug: ai_render_melee_check
    info:
      en: |-
        ```hsc
        (ai_render_melee_check)
        ```
  - slug: ai_render_paths
    info:
      en: |-
        ```hsc
        (ai_render_paths)
        ```
  - slug: ai_render_paths_avoidance_obstacles
    info:
      en: |-
        ```hsc
        (ai_render_paths_avoidance_obstacles)
        ```
  - slug: ai_render_paths_avoidance_search
    info:
      en: |-
        ```hsc
        (ai_render_paths_avoidance_search)
        ```
  - slug: ai_render_paths_avoidance_segment
    info:
      en: |-
        ```hsc
        (ai_render_paths_avoidance_segment)
        ```
  - slug: ai_render_paths_avoided
    info:
      en: |-
        ```hsc
        (ai_render_paths_avoided)
        ```
  - slug: ai_render_paths_current
    info:
      en: |-
        ```hsc
        (ai_render_paths_current)
        ```
  - slug: ai_render_paths_destination
    info:
      en: |-
        ```hsc
        (ai_render_paths_destination)
        ```
  - slug: ai_render_paths_failed
    info:
      en: |-
        ```hsc
        (ai_render_paths_failed)
        ```
  - slug: ai_render_paths_nodes
    info:
      en: |-
        ```hsc
        (ai_render_paths_nodes)
        ```
  - slug: ai_render_paths_nodes_all
    info:
      en: |-
        ```hsc
        (ai_render_paths_nodes_all)
        ```
  - slug: ai_render_paths_nodes_closest
    info:
      en: |-
        ```hsc
        (ai_render_paths_nodes_closest)
        ```
  - slug: ai_render_paths_nodes_costs
    info:
      en: |-
        ```hsc
        (ai_render_paths_nodes_costs)
        ```
  - slug: ai_render_paths_nodes_polygons
    info:
      en: |-
        ```hsc
        (ai_render_paths_nodes_polygons)
        ```
  - slug: ai_render_paths_raw
    info:
      en: |-
        ```hsc
        (ai_render_paths_raw)
        ```
  - slug: ai_render_paths_selected_only
    info:
      en: |-
        ```hsc
        (ai_render_paths_selected_only)
        ```
  - slug: ai_render_paths_smoothed
    info:
      en: |-
        ```hsc
        (ai_render_paths_smoothed)
        ```
  - slug: ai_render_player_aiming_blocked
    info:
      en: |-
        ```hsc
        (ai_render_player_aiming_blocked)
        ```
  - slug: ai_render_player_ratings
    info:
      en: |-
        ```hsc
        (ai_render_player_ratings)
        ```
  - slug: ai_render_postcombat
    info:
      en: |-
        ```hsc
        (ai_render_postcombat)
        ```
  - slug: ai_render_projectile_aiming
    info:
      en: |-
        ```hsc
        (ai_render_projectile_aiming)
        ```
  - slug: ai_render_props
    info:
      en: |-
        ```hsc
        (ai_render_props)
        ```
  - slug: ai_render_props_no_friends
    info:
      en: |-
        ```hsc
        (ai_render_props_no_friends)
        ```
  - slug: ai_render_props_target_weight
    info:
      en: |-
        ```hsc
        (ai_render_props_target_weight)
        ```
  - slug: ai_render_props_unopposable
    info:
      en: |-
        ```hsc
        (ai_render_props_unopposable)
        ```
  - slug: ai_render_props_unreachable
    info:
      en: |-
        ```hsc
        (ai_render_props_unreachable)
        ```
  - slug: ai_render_props_web
    info:
      en: |-
        ```hsc
        (ai_render_props_web)
        ```
  - slug: ai_render_pursuit
    info:
      en: |-
        ```hsc
        (ai_render_pursuit)
        ```
  - slug: ai_render_recent_damage
    info:
      en: |-
        ```hsc
        (ai_render_recent_damage)
        ```
  - slug: ai_render_secondary_looking
    info:
      en: |-
        ```hsc
        (ai_render_secondary_looking)
        ```
  - slug: ai_render_shooting
    info:
      en: |-
        ```hsc
        (ai_render_shooting)
        ```
  - slug: ai_render_spatial_effects
    info:
      en: |-
        ```hsc
        (ai_render_spatial_effects)
        ```
  - slug: ai_render_speech
    info:
      en: |-
        ```hsc
        (ai_render_speech)
        ```
  - slug: ai_render_states
    info:
      en: |-
        ```hsc
        (ai_render_states)
        ```
  - slug: ai_render_support_surfaces
    info:
      en: |-
        ```hsc
        (ai_render_support_surfaces)
        ```
  - slug: ai_render_targets
    info:
      en: |-
        ```hsc
        (ai_render_targets)
        ```
  - slug: ai_render_targets_last_visible
    info:
      en: |-
        ```hsc
        (ai_render_targets_last_visible)
        ```
  - slug: ai_render_teams
    info:
      en: |-
        ```hsc
        (ai_render_teams)
        ```
  - slug: ai_render_threats
    info:
      en: |-
        ```hsc
        (ai_render_threats)
        ```
  - slug: ai_render_trigger
    info:
      en: |-
        ```hsc
        (ai_render_trigger)
        ```
  - slug: ai_render_vector_avoidance
    info:
      en: |-
        ```hsc
        (ai_render_vector_avoidance)
        ```
  - slug: ai_render_vector_avoidance_avoid_t
    info:
      en: |-
        ```hsc
        (ai_render_vector_avoidance_avoid_t)
        ```
  - slug: ai_render_vector_avoidance_clear_time
    info:
      en: |-
        ```hsc
        (ai_render_vector_avoidance_clear_time)
        ```
  - slug: ai_render_vector_avoidance_intermediate
    info:
      en: |-
        ```hsc
        (ai_render_vector_avoidance_intermediate)
        ```
  - slug: ai_render_vector_avoidance_objects
    info:
      en: |-
        ```hsc
        (ai_render_vector_avoidance_objects)
        ```
  - slug: ai_render_vector_avoidance_rays
    info:
      en: |-
        ```hsc
        (ai_render_vector_avoidance_rays)
        ```
  - slug: ai_render_vector_avoidance_sense_t
    info:
      en: |-
        ```hsc
        (ai_render_vector_avoidance_sense_t)
        ```
  - slug: ai_render_vector_avoidance_weights
    info:
      en: |-
        ```hsc
        (ai_render_vector_avoidance_weights)
        ```
  - slug: ai_render_vehicle_avoidance
    info:
      en: |-
        ```hsc
        (ai_render_vehicle_avoidance)
        ```
  - slug: ai_render_vehicles_enterable
    info:
      en: |-
        ```hsc
        (ai_render_vehicles_enterable)
        ```
  - slug: ai_render_vision_cones
    info:
      en: |-
        ```hsc
        (ai_render_vision_cones)
        ```
  - slug: ai_render_vitality
    info:
      en: |-
        ```hsc
        (ai_render_vitality)
        ```
  - slug: ai_show
    info:
      en: |-
        ```hsc
        (ai_show)
        ```
  - slug: ai_show_actors
    info:
      en: |-
        ```hsc
        (ai_show_actors)
        ```
  - slug: ai_show_line_of_sight
    info:
      en: |-
        ```hsc
        (ai_show_line_of_sight)
        ```
  - slug: ai_show_paths
    info:
      en: |-
        ```hsc
        (ai_show_paths)
        ```
  - slug: ai_show_prop_types
    info:
      en: |-
        ```hsc
        (ai_show_prop_types)
        ```
  - slug: ai_show_sound_distance
    info:
      en: |-
        ```hsc
        (ai_show_sound_distance)
        ```
  - slug: ai_show_stats
    info:
      en: |-
        ```hsc
        (ai_show_stats)
        ```
  - slug: ai_show_swarms
    tags:
      - game-state
    info:
      en: |-
        ```hsc
        (ai_show_swarms [boolean])
        ```
        Displays debug information in the bottom left with the current counts
        for swarms and swarm component [datum arrays](~game-state). Swarms are
        groups of Flood infection forms while components are individual infection
        forms.
  - slug: allow_client_side_weapon_projectiles
    info:
      en: |-
        ```hsc
        (allow_client_side_weapon_projectiles)
        ```
  - slug: allow_out_of_sync
    info:
      en: |-
        ```hsc
        (allow_out_of_sync)
        ```
  - slug: biped_incremental_rate
    info:
      en: |-
        ```hsc
        (biped_incremental_rate [short])
        ```
        Unknown purpose. Default value is 7.
  - slug: breadcrumbs_navpoints_enabled_override
    info:
      en: |-
        ```hsc
        (breadcrumbs_navpoints_enabled_override [boolean])
        ```
        Enables on-demand/revised nav points like MCC. Off by default.
        Newly added to the MCC tools in the July 2023 CU.
    tags:
      - added_in_mcc
  - slug: breakable_surfaces
    info:
      en: |-
        ```hsc
        (breakable_surfaces [boolean])
        ```
        Enables or disables the breakable surfaces effect. If disabled, breakable
        surfaces will simply disappear rather than shatter.
  - slug: cheat_bottomless_clip
    info:
      en: |-
        ```hsc
        (cheat_bottomless_clip [boolean])
        ```
        Prevents player weapons from generating heat and depleting ammo rounds.
        Battery will still be depleted.
  - slug: cheat_bump_possession
    info:
      en: |-
        ```hsc
        (cheat_bump_possession [boolean])
        ```
        Allows the player to "possess" other characters by walking into them.
        The player will then be able to control the possessed character and see
        the world from its view.
  - slug: cheat_controller
    info:
      en: |-
        ```hsc
        (cheat_controller [boolean])
        ```
        If enabled, the game loads a `cheats.txt` file which binds controller buttons
        to console commands. Known only to work in Halo beta versions.
  - slug: cheat_deathless_player
    info:
      en: |-
        ```hsc
        (cheat_deathless_player [boolean])
        ```
        Prevents players from being killed, including all multiplayer clients
        if enabled on the server. Although the players can still take damage,
        being reduced to 0 health or falling long distances will not kill them.
        This also prevents players from being killed with `unit_kill`.
  - slug: cheat_infinite_ammo
    info:
      en: |-
        ```hsc
        (cheat_infinite_ammo [boolean])
        ```
        Prevents weapons from depleting battery or _reserve_ ammo. Weapons will
        still generate heat. Magazine-based weapons will still empty their current
        magazine, but reloading will not use up any reserve ammo.
  - slug: cheat_jetpack
    info:
      en: |-
        ```hsc
        (cheat_jetpack [boolean])
        ```
        If enabled, players take no fall damage. In MCC, holding crouch while
        mid-air will also cause the player to hover and holding jump will cause
        you to fly.
  - slug: cheat_medusa
    info:
      en: |-
        ```hsc
        (cheat_medusa [boolean])
        ```
        Causes enemy AI to be killed instantly if they "look" at or become aware of
        the player. This does not include allies like Marines, even after allegiance
        has been broken by killing them. It is unknown if the command is hard-coded
        to kill certain AI types.
  - slug: cheat_omnipotent
    info:
      en: |-
        ```hsc
        (cheat_omnipotent [boolean])
        ```
        The player will instantly kill any [unit](~) they damage, including destroying
        vehicles. Even multiplayer vehicles can be "killed" and rendered inoperable.
  - slug: cheat_reflexive_damage_effects
    tags:
      - damage
    info:
      en: |-
        ```hsc
        (cheat_reflexive_damage_effects [boolean])
        ```
        Any [damage_effect](~) applied to other characters, even dead ones,
        will appear on the player's screen regardless of who applied the damage.
        For example, if an Elite shoots a flood infection form, the player will
        see their screen flash blue and damage direction indicators appear.
        The player takes no _actual_ damage. This can be helpful for testing
        visual effects.
  - slug: cheat_super_jump
    info:
      en: |-
        ```hsc
        (cheat_super_jump [boolean])
        ```
        Players jump to an extreme height, and will die of fall damage if
        [`cheat_jetpack`](#debugfunctions-cheat-jetpack) or
        [`cheat_deathless_player`](#debugfunctions-cheat-deathless-player)
        are not used. This can be used to quickly reach areas when
        testing maps.
  - slug: cl_remote_player_action_queue_limit
    info:
      en: |-
        ```hsc
        (cl_remote_player_action_queue_limit [long])
        ```
        Unknown purpose. May be used to limit how many total actions from
        clients are allowed to be queued on the server. Defaults to `2`.
  - slug: cl_remote_player_action_queue_tick_limit
    info:
      en: |-
        ```hsc
        (cl_remote_player_action_queue_tick_limit [long])
        ```
        Unknown purpose. May be used to limit how long actions from
        clients are allowed to be queued on the server before they are
        ignored. Defaults to `6`.
  - slug: client_log_destination
    info:
      en: |-
        ```hsc
        (client_log_destination [long])
        ```
        Unknown purpose.
  - slug: collision_debug
    tags:
      - model_collision_geometry
      - scenario_structure_bsp
    info:
      en: |-
        ```hsc
        (collision_debug [boolean])
        ```
        If enabled, a ray is continually shot from the camera (by default) to
        troubleshoot ray-object and ray-BSP collisions. A red normal-aligned
        marker will be shown where the ray collides with a surface. The collision
        surface itself, whether [BSP](~scenario_structure_bsp) or
        [model](~model_collision_geometry), will be outline in red. Information
        about the collision surface will be shown in the top left corner of the screen,
        including plane and surface indices from the BSP structure, material type,
        and how many degrees the surface's normal differs from vertical.

        The types of surfaces which the test ray hits or ignores can be toggled
        with the `collision_debug_flag_*` commands. The maximum range of the ray
        is controlled with `collision_debug_length`.

        This feature can be frozen in place with `collision_debug_repeat` and
        also moved directly with the `collision_debug_point_*` and `collision_debug_vector_*`
        globals. A red ray is visible in these situations when the ray is no
        longer shot from the camera's point of view.
  - slug: collision_debug_features
    tags:
      - model_collision_geometry
      - scenario_structure_bsp
    info:
      en: |-
        ```hsc
        (collision_debug_features [boolean])
        ```
        Toggles the display of _collision features_ near the camera, which can be spheres (red),
        cylinders (blue), or prisms (green). Collision size can be adjusted with `collision_debug_width`
        and `collision_debug_height`. The test point can be frozen in place using
        `collision_debug_repeat`.
  - slug: collision_debug_flag_back_facing_surfaces
    info:
      en: |-
        ```hsc
        (collision_debug_flag_back_facing_surfaces [boolean])
        ```
        When `collision_debug` or `collision_debug_spray` are enabled, causes
        the test rays to collide with back-facing surfaces (those facing away
        from the camera). Defaults to `false`.
  - slug: collision_debug_flag_front_facing_surfaces
    info:
      en: |-
        ```hsc
        (collision_debug_flag_front_facing_surfaces [boolean])
        ```
        When `collision_debug` or `collision_debug_spray` are enabled,
        causes the test rays to collide with front-facing surfaces (those
        facing towards the camera). Defaults to `true`. Disabling this will
        have no effect unless `collision_debug_flag_back_facing_surfaces`
        is also enabled.
  - slug: collision_debug_flag_ignore_breakable_surfaces
    info:
      en: |-
        ```hsc
        (collision_debug_flag_ignore_breakable_surfaces [boolean])
        ```
        Toggles if collision debug rays ignore breakable surfaces.
        Defaults to `false`.
  - slug: collision_debug_flag_ignore_invisible_surfaces
    info:
      en: |-
        ```hsc
        (collision_debug_flag_ignore_invisible_surfaces [boolean])
        ```
        Toggles if collision debug rays ignore invisible surfaces
        (e.g. collision-only player clipping). Defaults to `true`.
  - slug: collision_debug_flag_ignore_two_sided_surfaces
    info:
      en: |-
        ```hsc
        (collision_debug_flag_ignore_two_sided_surfaces [boolean])
        ```
        Toggles if collision debug rays ignore two-sided surfaces.
        Defaults to `false`.
  - slug: collision_debug_flag_media
    info:
      en: |-
        ```hsc
        (collision_debug_flag_media [boolean])
        ```
        Toggles if collision debug rays collide with water surfaces.
  - slug: collision_debug_flag_objects
    info:
      en: |-
        ```hsc
        (collision_debug_flag_objects [boolean])
        ```
        Toggles if collision debug rays collide with any class of [object's](~object)
        [collision geometry](~model_collision_geometry). This setting will be
        ignored if any more specific object flag is enabled, such as
        `collision_debug_flag_objects_equipment`.
  - slug: collision_debug_flag_objects_bipeds
    info:
      en: |-
        ```hsc
        (collision_debug_flag_objects_bipeds [boolean])
        ```
        Toggles if collision debug rays collide with [bipeds](~biped).
  - slug: collision_debug_flag_objects_controls
    info:
      en: |-
        ```hsc
        (collision_debug_flag_objects_controls [boolean])
        ```
        Toggles if collision debug rays collide with [device_control](~).
  - slug: collision_debug_flag_objects_equipment
    info:
      en: |-
        ```hsc
        (collision_debug_flag_objects_equipment [boolean])
        ```
        Toggles if collision debug rays collide with [equipment](~).
  - slug: collision_debug_flag_objects_light_fixtures
    info:
      en: |-
        ```hsc
        (collision_debug_flag_objects_light_fixtures [boolean])
        ```
        Toggles if collision debug rays collide with [device_light_fixture](~).
  - slug: collision_debug_flag_objects_machines
    info:
      en: |-
        ```hsc
        (collision_debug_flag_objects_machines [boolean])
        ```
        Toggles if collision debug rays collide with [device_machine](~).
  - slug: collision_debug_flag_objects_placeholders
    info:
      en: |-
        ```hsc
        (collision_debug_flag_objects_placeholders [boolean])
        ```
        Toggles if collision debug rays collide with [placeholders](~placeholder).
        This would require a custom placeholder to have an effect, since the
        placeholder tags that come with the HEK have no collision model.
  - slug: collision_debug_flag_objects_projectiles
    info:
      en: |-
        ```hsc
        (collision_debug_flag_objects_projectiles [boolean])
        ```
        Toggles if collision debug rays collide with [projectiles](~projectile).
        Note that most projectiles do not have a collision model.
  - slug: collision_debug_flag_objects_scenery
    info:
      en: |-
        ```hsc
        (collision_debug_flag_objects_scenery [boolean])
        ```
        Toggles if collision debug rays collide with [scenery](~).
  - slug: collision_debug_flag_objects_vehicles
    info:
      en: |-
        ```hsc
        (collision_debug_flag_objects_vehicles [boolean])
        ```
        Toggles if collision debug rays collide with [vehicles](~vehicle).
  - slug: collision_debug_flag_objects_weapons
    info:
      en: |-
        ```hsc
        (collision_debug_flag_objects_weapons [boolean])
        ```
        Toggles if collision debug rays collide with [weapons](~weapon).
  - slug: collision_debug_flag_skip_passthrough_bipeds
    info:
      en: |-
        ```hsc
        (collision_debug_flag_skip_passthrough_bipeds [boolean])
        ```
        Unknown purpose. Does not seem to affect collision ray tests against bipeds.
  - slug: collision_debug_flag_structure
    tags:
      - scenario_structure_bsp
    info:
      en: |-
        ```hsc
        (collision_debug_flag_structure [boolean])
        ```
        Toggles if collision debug rays collide with the [structure BSP](~scenario_structure_bsp).
        Collisions with [model_collision_geometry](~) BSPs are unaffected.
  - slug: collision_debug_flag_try_to_keep_location_valid
    info:
      en: |-
        ```hsc
        (collision_debug_flag_try_to_keep_location_valid [boolean])
        ```
        Unknown purpose.
  - slug: collision_debug_flag_use_vehicle_physics
    info:
      en: |-
        ```hsc
        (collision_debug_flag_use_vehicle_physics [boolean])
        ```
        If enabled, collision debug rays will collide with vehicle
        [physics spheres](~physics#mass-points) rather than their [model_collision_geometry](~).
  - slug: collision_debug_height
    info:
      en: |-
        ```hsc
        (collision_debug_height <real>)
        ```
        When and `collision_debug_features` is enabled, controls
        the height in world units of collision features. Defaults to `0.0`.
  - slug: collision_debug_length
    info:
      en: |-
        ```hsc
        (collision_debug_length [real])
        ```
        Sets the maximum test ray length for `collision_debug` and `collision_debug_spray`
        in world units. When the ray reaches this maxmimum, a floating green marker
        will be shown for `collision_debug` while spray rays will simply not be shown.
        Defaults to `100.0`.
  - slug: collision_debug_phantom_bsp
    tags:
      - scenario_structure_bsp
      - model_collision_geometry
    info:
      en: |-
        ```hsc
        (collision_debug_phantom_bsp [boolean])
        ```
        Causes a floating pink cube and label "phantom bsp" to appear whenever
        a test ray from the center of the screen intersects with
        [phantom BSP](~scenario_structure_bsp#phantom-bsp). It can be helpful to
        pair this with `collision_debug_spray`.
  - slug: collision_debug_point_x
    info:
      en: |-
        ```hsc
        (collision_debug_point_x [real])
        ```
        Represents the current origin of the `collision_debug` test ray. While
        `collision_debug` is active, this value will be continually updated
        with the camera's location unless `collision_debug_repeat` is also
        enabled. In repeat mode, you are able to set this global to move
        the ray origin to any point you need. See also `collision_debug_vector_i`.
  - slug: collision_debug_point_y
    info:
      en: |-
        ```hsc
        (collision_debug_point_y [real])
        ```
        See `collision_debug_point_x`.
  - slug: collision_debug_point_z
    info:
      en: |-
        ```hsc
        (collision_debug_point_z [real])
        ```
        See `collision_debug_point_x`.
  - slug: collision_debug_repeat
    info:
      en: |-
        ```hsc
        (collision_debug_repeat [boolean])
        ```
        Setting this to `true` will freeze the test rays and points for
        `collision_debug`, `collision_debug_phantom_bsp`, `collision_debug_spray`,
        and `collision_debug_features`, allowing you to move and view the debug
        information from another angle or manually set the origin and direction
        with the `collision_debug_point_*` and `collision_debug_vector_*` globals.
  - slug: collision_debug_spray
    tags:
      - model_collision_geometry
      - scenario_structure_bsp
    info:
      en: |-
        ```hsc
        (collision_debug_spray [boolean])
        ```
        Setting this to `true` will cause collision ray tests to be performed in
        a dense grid from the viewport. This operates independently of the
        `collision_debug` setting, and only the destination hit markers are shown.
        Can be affected by collision flags, length, and frozen with `collision_debug_repeat`.
  - slug: collision_debug_vector_i
    info:
      en: |-
        ```hsc
        (collision_debug_vector_i [real])
        ```
        Represents the current direction of the `collision_debug` test ray as
        _ijk_ vector components. While `collision_debug` is active, this value
        will be continually updated with the camera's direction unless
        `collision_debug_repeat` is also enabled. In repeat mode, you are able
        to set this global to orient the ray as needed.
  - slug: collision_debug_vector_j
    info:
      en: |-
        ```hsc
        (collision_debug_vector_j [real])
        ```
        See `collision_debug_vector_i`.
  - slug: collision_debug_vector_k
    info:
      en: |-
        ```hsc
        (collision_debug_vector_k [real])
        ```
        See `collision_debug_vector_i`.
  - slug: collision_debug_width
    info:
      en: |-
        ```hsc
        (collision_debug_width [real])
        ```
        When `collision_debug` and `collision_debug_features` are enabled, controls
        the width in world units of collision features. Defaults to `0.0`.
  - slug: collision_log_detailed
    info:
      en: |-
        ```hsc
        (collision_log_detailed)
        ```
  - slug: collision_log_extended
    info:
      en: |-
        ```hsc
        (collision_log_extended)
        ```
  - slug: collision_log_render
    info:
      en: |-
        ```hsc
        (collision_log_render)
        ```
  - slug: collision_log_time
    info:
      en: |-
        ```hsc
        (collision_log_time)
        ```
  - slug: collision_log_totals_only
    info:
      en: |-
        ```hsc
        (collision_log_totals_only)
        ```
  - slug: console_dump_to_file
    info:
      en: |-
        ```hsc
        (console_dump_to_file)
        ```
  - slug: controls_enable_crouch
    info:
      en: |-
        ```hsc
        (controls_enable_crouch [boolean])
        ```
        No visible effect. May be related to controller input during development.
  - slug: controls_enable_doubled_spin
    info:
      en: |-
        ```hsc
        (controls_enable_doubled_spin [boolean])
        ```
        No visible effect. May be related to controller input during development.
  - slug: controls_swap_doubled_spin_state
    info:
      en: |-
        ```hsc
        (controls_swap_doubled_spin_state [boolean])
        ```
        No visible effect. May be related to controller input during development.
  - slug: controls_swapped
    info:
      en: |-
        ```hsc
        (controls_swapped [boolean])
        ```
        No visible effect. May be related to controller input during development.
  - slug: debug_bink
    info:
      en: |-
        ```hsc
        (debug_bink)
        ```
  - slug: debug_biped_limp_body_disable
    info:
      en: |-
        ```hsc
        (debug_biped_limp_body_disable [boolean])
        ```
        When set to `true`, pauses the biped limp body system, which is responsible for
        moving [model nodes](~gbxmodel#nodes) towards the ground when an
        [eligible](~biped#tag-field-biped-flags-uses-limp-body-physics) biped has
        died and has come to rest on the [structure BSP](~scenario_structure_bsp).
        Bipeds will lay roughly at the right angle, but they will not conform to
        the shape of the surfaces below them. If set to `false`, the limp body system
        will take effect again even for existing dead bipeds.
  - slug: debug_biped_physics
    tasgs:
      - biped
    info:
      en: |-
        ```hsc
        (debug_biped_physics [boolean])
        ```
        For this to be visible, `collision_debug` must also be enabled which has
        the side-effect of making the `collision_debug` feature itself unusable
        until the game is restarted. This displays several markers and vectors
        within the player's physics pill (`debug_objects_biped_physics_pill`)
        which can be more easily observed in third person and with `framerate_throttle 1`.
        The number and colours of the debug overlays can vary by which map
        is loaded and it's not known why.
  - slug: debug_biped_skip_collision
    tags:
      - biped
    info:
      en: |-
        ```hsc
        (debug_biped_skip_collision [boolean])
        ```
        If `true`, disables collision checks for [bipeds](~biped). They will be able
        to keep "walking" horizontally, but cannot jump or collide with any objects
        the BSP, and are unaffected by gravity. They will still be forced to stay crouched
        if crouching below or within a collideable surface.
  - slug: debug_biped_skip_update
    info:
      en: |-
        ```hsc
        (debug_biped_skip_update)
        ```
  - slug: debug_bsp
    tags:
      - scenario_structure_bsp
    info:
      en: |-
        ```hsc
        (debug_bsp [boolean])
        ```
        Toggles the display of
        [structure BSP node](~scenario_structure_bsp#tag-field-collision-bsp-bsp3d-nodes)
        traversal for the camera location. At each level, the node and plane indices
        are shown as well as a `+` or `-` symbol indicating if the camera was on the
        front or back side of the plane.
  - slug: debug_camera
    tags:
      - scenario_structure_bsp
    info:
      en: |-
        ```hsc
        (debug_camera [boolean])
        ```
        Shows debug information about the camera in the top left corner, including:
        - 3D coordinates in world units
        - BSP leaf and cluster indices
        - Ground point coordinates and BSP surface index (point directly below the camera on the ground)
        - Facing direction (yaw angle)
        - Tag path of the shader pointed at by the camera. The surface must be collideable and this feature cannot be configured with collision debug flags.
  - slug: debug_collision_skip_objects
    info:
      en: |-
        ```hsc
        (debug_collision_skip_objects [boolean])
        ```
        Disables collision tests against [objects](~object). For example,
        [projectiles](~projectile) will pass through scenery and [bipeds](~biped)
        through non-moving [vehicles](~vehicle). Vehicle-to-vehicle collision
        still happens, as does moving [vehicle](~) against [biped](~). Everything
        still collides with the [BSP](~scenario_structure_bsp).
  - slug: debug_collision_skip_vectors
    info:
      en: |-
        ```hsc
        (debug_collision_skip_vectors [boolean])
        ```
        Globally disables vector/ray collision tests, with the following observed effects:
        - [Projectiles](~projectile), [particles](~particle) and moving [items](~item) will pass through everything, even the BSP.
        - Melees will have no effect.
        - [Vehicle](~) suspension, such as the Warthog's wheels, will hang.
        - [Object lighting](~renderer#lighting) will be unable to determine the
          ground point below the object when it moves, resulting in incorrect
          lighting and shadow direction.
        - [Sounds](~sound) behind obstructions will not be muffled.
  - slug: debug_damage
    tags:
      - damage
    info:
      en: |-
        ```hsc
        (debug_damage [boolean])
        ```
        When enabled, looking at any collideable [object](~) and pressing
        {% key "Space" /%} will display the object's body and shield vitalities
        on the HUD.
  - slug: debug_damage_taken
    tags:
      - damage
    info:
      en: |-
        ```hsc
        (debug_damage_taken [boolean])
        ```
        Logs damage to the player as messages at the bottom of the screen. Includes
        body and shield vitality and the damage source.
  - slug: debug_decals
    tags:
      - decal
    info:
      en: |-
        ```hsc
        (debug_decals)
        ```
        Displays red numbers over each dynamic and permanent decal in the
        environment. The mesh of the most recently created decal (initially a
        permanent decal if one exists, then any new dynamic one) will also be
        highlighted so you can see how it conforms around the BSP.
        
        White points indicate the original 4 corners of the decal, while
        red ones were added during the conformation to the BSP. The meaning of
        the number is not known definitely, but seems to be the number of
        vertices needed if we assume each projected decal region must be
        converted into quads.
  - slug: debug_detail_objects
    info:
      en: |-
        ```hsc
        (debug_detail_objects [boolean])
        ```
        When enabled, active [detail object](~detail_object_collection) cells
        will be outlined in blue and individual detail objects are highlighted
        with red markers.
  - slug: debug_effects_nonviolent
    info:
      en: |-
        ```hsc
        (debug_effects_nonviolent)
        ```
  - slug: debug_fog_planes
    info:
      en: |-
        ```hsc
        (debug_fog_planes [boolean])
        ```
        Outlines the edges of [fog](~) plane volumes with white lines.
  - slug: debug_framerate
    info:
      en: |-
        ```hsc
        (debug_framerate [boolean])
        ```
        No visible effect. Replaced with the {% key "Ctrl+F12" /%} hotkey?
  - slug: debug_frustum
    info:
      en: |-
        ```hsc
        (debug_frustum [boolean])
        ```
        Draws a series of red lines between corners and midpoints of the screen
        within the view frustrum. These can be seen to intersect with level
        geometry.
  - slug: debug_game_save
    info:
      en: |-
        ```hsc
        (debug_game_save)
        ```
  - slug: debug_inactive_objects
    info:
      en: |-
        ```hsc
        (debug_inactive_objects)
        ```
  - slug: debug_input
    info:
      en: |-
        ```hsc
        (debug_input [boolean])
        ```
        Displays a series of ticks at the top of the screen which do not seem
        to be affected by player input. May be a broken feature?
  - slug: debug_input_target
    info:
      en: |-
        ```hsc
        (debug_input_target)
        ```
  - slug: debug_leaf_index
    info:
      en: |-
        ```hsc
        (debug_leaf_index)
        ```
  - slug: debug_leaf_portal_index
    info:
      en: |-
        ```hsc
        (debug_leaf_portal_index)
        ```
  - slug: debug_leaf_portals
    info:
      en: |-
        ```hsc
        (debug_leaf_portals)
        ```
  - slug: debug_lights
    tags:
      - light
    info:
      en: |-
        ```hsc
        (debug_lights [boolean])
        ```
        Shows orange and white spheres with the [_radius_](~light#tag-field-radius) of each dynamic [light](~). White seems to show when a light is not yet been activated, such as the Warthog's brake lights until their first use. Lens flare only lights are not shown since their radius is 0.
  - slug: debug_looping_sound
    tags:
      - sound
    info:
      en: |-
        ```hsc
        (debug_looping_sound [boolean])
        ```
        Displays active [sound_looping](~) with cyan spheres for their maxmimum
        distance and blue spheres for their minimum.
  - slug: debug_material_effects
    tags:
      - physics
      - material_effects
    info:
      en: |-
        ```hsc
        (debug_material_effects [boolean])
        ```
        Displays cyan spheres wherever [material_effects](~) are being generated,
        like under the player's feet and where [physics spheres](~physics#mass-points)
        intersect with the [BSP](~scenario_structure_bsp) or [model_collision_geometry](~).
  - slug: debug_motion_sensor_draw_all_units
    info:
      en: |-
        ```hsc
        (debug_motion_sensor_draw_all_units)
        ```
  - slug: debug_no_drawing
    info:
      en: |-
        ```hsc
        (debug_no_drawing [boolean])
        ```
        If enabled, completely stops the game from rendering new frames. This
        includes preventing the rendering of the developer console itself, so
        disabling this feature can be tricky. If you think the console is still
        open, press {% key "Up" /%} to re-enter the previous command, then
        replace its final argument with `true` or `1` and press {% key "Enter" /%}
        to resume rendering.
  - slug: debug_no_frustum_clip
    tags:
      - scenario_structure_bsp
      - portals
    info:
      en: |-
        ```hsc
        (debug_no_frustum_clip [boolean])
        ```
        If frustum clipping is disabled by setting this to `true`, certain
        objects and parts of the BSP will be drawn even when behind foreground
        geometry (use `rasterizer_wireframe 1` to see this).
        This isn't about clipping to the whole view frustum but rather portal
        diminished frustrums; in addition to the [PVS](~scenario_structure_bsp#potentially-visible-set),
        the game seems to cull objects and the BSP by whether object bounding
        spheres and possibly subclusters are visible through portals.
        The use of `debug_pvs` at the same time makes the behaviour of this
        unpredictable.
  - slug: debug_object_garbage_collection
    info:
      en: |-
        ```hsc
        (debug_object_garbage_collection)
        ```
  - slug: debug_object_lights
    tags:
      - object
      - lightmaps
    info:
      en: |-
        ```hsc
        (debug_object_lights)
        ```
        Shows the incoming light colour and vector for all objects which results
        from [sampling lightmap data](~lightmaps#lighting-for-dynamic-objects)
        at the ground point beneath the object. This data is used to shade the
        object and cast its shadow.
  - slug: debug_objects
    tags:
      - object
    info:
      en: |-
        ```hsc
        (debug_objects [boolean])
        ```
        When enabled, toggles if debug information is visible on objects
        (such as bounding sphere and collision models). Individual debug
        features can be toggled with the `debug_objects_*` commands.
  - slug: debug_objects_biped_autoaim_pills
    tags:
      - object
    info:
      en: |-
        ```hsc
        (debug_objects_biped_autoaim_pills [boolean])
        ```
        When `debug_objects` is enabled, displays
        [biped autoaim pills](~biped#physics-and-autoaim-pills) in red.
  - slug: debug_objects_biped_messages
    info:
      en: |-
        ```hsc
        (debug_objects_biped_messages)
        ```
  - slug: debug_objects_biped_physics_pills
    tags:
      - object
    info:
      en: |-
        ```hsc
        (debug_objects_biped_physics_pills [boolean])
        ```
        When `debug_objects` is enabled, displays
        [biped physics pills](~biped#physics-and-autoaim-pills) in white.
  - slug: debug_objects_bounding_spheres
    tags:
      - object
    info:
      en: |-
        ```hsc
        (debug_objects_bounding_spheres [boolean])
        ```
        When `debug_objects` is enabled, displays yellow spheres for [object
        bounding radius](~object#tag-field-bounding-radius). The sphere will be
        black when the object is _inactive_. This setting defaults to `true`
        in H1CE Sapien but not H1A Sapien.
  - slug: debug_objects_collision_models
    tags:
      - object
      - model_collision_geometry
    info:
      en: |-
        ```hsc
        (debug_objects_collision_models [boolean])
        ```
        When `debug_objects` is enabled, displays green meshes for object
        [collision models](~model_collision_geometry). This setting defaults
        to `true` in H1CE Sapien but not H1A Sapien.
  - slug: debug_objects_devices
    info:
      en: |-
        ```hsc
        (debug_objects_devices)
        ```
  - slug: debug_objects_equipment_messages
    info:
      en: |-
        ```hsc
        (debug_objects_equipment_messages)
        ```
  - slug: debug_objects_names
    tags:
      - object
    info:
      en: |-
        ```hsc
        (debug_objects_names [boolean])
        ```
        Toggles the display of object names, for [named objects](~scenario#tag-field-object-names).
        The names are shown in purple.
  - slug: debug_objects_pathfinding_spheres
    tags:
      - object
      - model_collision_geometry
    info:
      en: |-
        ```hsc
        (debug_objects_pathfinding_spheres [boolean])
        ```
        When `debug_objects` is enabled, displays object [pathfinding spheres](~model_collision_geometry#pathfinding-spheres)
        in blue.
  - slug: debug_objects_physics
    tags:
      - object
      - physics
    info:
      en: |-
        ```hsc
        (debug_objects_physics)
        ```
        When `debug_objects` is enabled, displays [physics](~) mass points as white spheres. 
  - slug: debug_objects_position_velocity
    tags:
      - object
      - physics
    info:
      en: |-
        ```hsc
        (debug_objects_position_velocity)
        ```
        When `debug_objects` is enabled, displays red, green, and blue object-space
        reference axes and a yellow velocity vector on each object.
  - slug: debug_objects_projectile_messages
    info:
      en: |-
        ```hsc
        (debug_objects_projectile_messages)
        ```
  - slug: debug_objects_root_node
    tags:
      - object
    info:
      en: |-
        ```hsc
        (debug_objects_root_node)
        ```
        When `debug_objects` is enabled, displays red, green, and blue object-space
        reference axes and orange text including object ID, class, and tag name
        on each object. Defaults to `true` in H1A.
  - slug: debug_objects_unit_mouth_apeture
    info:
      en: |-
        ```hsc
        (debug_objects_unit_mouth_apeture)
        ```
  - slug: debug_objects_unit_seats
    tags:
      - object
      - vehicle
      - unit
    info:
      en: |-
        ```hsc
        (debug_objects_unit_seats)
        ```
        When `debug_objects` is enabled, displays blue markers at unit seat
        locations, red markers at their entry points, and a yellow marker at the
        object origin.
  - slug: debug_objects_unit_vectors
    tags:
      - object
      - physics
    info:
      en: |-
        ```hsc
        (debug_objects_unit_vectors)
        ```
        When `debug_objects` is enabled, displays white and red vectors on
        objects. Their meaning is unknown.
  - slug: debug_objects_vehicle_messages
    info:
      en: |-
        ```hsc
        (debug_objects_vehicle_messages)
        ```
  - slug: debug_objects_vehicle_powered_mass_points
    info:
      en: |-
        ```hsc
        (debug_objects_vehicle_powered_mass_points)
        ```
        No visible effect, even with `debug_objects_physics` enabled.
  - slug: debug_objects_weapon_messages
    info:
      en: |-
        ```hsc
        (debug_objects_weapon_messages)
        ```
  - slug: debug_obstacle_path
    info:
      en: |-
        ```hsc
        (debug_obstacle_path)
        ```
  - slug: debug_obstacle_path_goal_point_x
    info:
      en: |-
        ```hsc
        (debug_obstacle_path_goal_point_x)
        ```
  - slug: debug_obstacle_path_goal_point_y
    info:
      en: |-
        ```hsc
        (debug_obstacle_path_goal_point_y)
        ```
  - slug: debug_obstacle_path_goal_surface_index
    info:
      en: |-
        ```hsc
        (debug_obstacle_path_goal_surface_index)
        ```
  - slug: debug_obstacle_path_on_failure
    info:
      en: |-
        ```hsc
        (debug_obstacle_path_on_failure)
        ```
  - slug: debug_obstacle_path_start_point_x
    info:
      en: |-
        ```hsc
        (debug_obstacle_path_start_point_x)
        ```
  - slug: debug_obstacle_path_start_point_y
    info:
      en: |-
        ```hsc
        (debug_obstacle_path_start_point_y)
        ```
  - slug: debug_obstacle_path_start_surface_index
    info:
      en: |-
        ```hsc
        (debug_obstacle_path_start_surface_index)
        ```
  - slug: debug_permanent_decals
    tags:
      - decal
    info:
      en: |-
        ```hsc
        (debug_permanent_decals)
        ```
        Toggles the display of yellow bounding spheres around each permanent
        decal in the environment.
  - slug: debug_physics_disable_penetration_freeze
    info:
      en: |-
        ```hsc
        (debug_physics_disable_penetration_freeze)
        ```
  - slug: debug_player
    info:
      en: |-
        ```hsc
        (debug_player)
        ```
  - slug: debug_player_color
    info:
      en: |-
        ```hsc
        (debug_player_color [short])
        ```
        Sets the [player's armour color](~hard-coded-data#multiplayer-armor-colors)
        in non-team games. The setting will take effect when the player respawns.
        The default value `-1` causes the player's [profile setting](~engine/files#profile-player-details-player-color)
        to be used.
  - slug: debug_player_teleport
    info:
      en: |-
        ```hsc
        (debug_player_teleport [boolean])
        ```
        Displays a green physics pill where a co-op player would spawn if safe.
  - slug: debug_point_physics
    tags:
      - point_physics
    info:
      en: |-
        ```hsc
        (debug_point_physics [boolean])
        ```
        Renders green or red markers wherever [point_physics](~) are being
        simulated, except for the [weather_particle_system](~). This includes
        [flags](~flag), [antenna](~), [contrails](~contrail), [particles](~particle),
        and [particle_systems](~particle_system). It can help to enable `framerate_throttle`
        for these markers to render consistently.
  - slug: debug_pvs
    tags:
      - portals
    info:
      en: |-
        ```hsc
        (debug_pvs <boolean>)
        ```
        Alias of `debug_portals`, but with a mandatory argument.
  - slug: debug_portals
    tags:
      - portals
      - scenario_structure_bsp
    info:
      en: |-
        ```hsc
        (debug_portals [boolean])
        ```
        Draws structure BSP portals as red outlines.
  - slug: debug_recording
    info:
      en: |-
        ```hsc
        (debug_recording)
        ```
  - slug: debug_recording_newlines
    info:
      en: |-
        ```hsc
        (debug_recording_newlines)
        ```
  - slug: debug_render_freeze
    info:
      en: |-
        ```hsc
        (debug_render_freeze [boolean])
        ```
        Freezes the rendering viewport at the current camera location. The camera
        may still move after frozen, but all portal-based culling, [skybox](~sky)
        origin, FP models, and some debug overlays will still be based on the
        previously frozen camera location. This command is useful for inspecting
        portal behaviour where the camera cannot directly see.
  - slug: debug_score
    info:
      en: |-
        ```hsc
        (debug_score [long])
        ```
        Unknown purpose. Does not affect the player's multiplayer score.
  - slug: debug_scripting
    info:
      en: |-
        ```hsc
        (debug_scripting [boolean])
        ```
        Displays a table of active [script](~scripting) threads, with their name,
        sleep time, and currently executing function.
  - slug: debug_sound
    tags:
      - sound
      - sound_scenery
    info:
      en: |-
        ```hsc
        (debug_sound [boolean])
        ```
        [Sound](~) sources will be labeled in 3D with their [tag path](~tags#tag-path)
        and a their minimum and maximum distances shown as red and yellow spheres, respectively.
  - slug: debug_sound_cache
    tags:
      - sound
    info:
      en: |-
        ```hsc
        (debug_sound_cache [boolean])
        ```
        If enabled, [sound cache](~sound-system#sound-cache) statistics will be shown
        in the top left corner of the screen, including how full it is.
  - slug: sound_cache_dump_to_file
    tags:
      - sound
    info:
      en: |-
        ```hsc
        (sound_cache_dump_to_file)
        ```
        Writes the sound cache information from `debug_sound_cache` and a listing of
        currently cached sounds to `sound_cache_dump.txt`.
  - slug: debug_sound_cache_graph
    tags:
      - sound
    info:
      en: |-
        ```hsc
        (debug_sound_cache_graph [boolean])
        ```
        Shows a graph of sound cache slots at the top of the screen, similar to
        `texture_cache_graph`. Can be used in Sapien/debug builds.
  - slug: debug_sound_channels
    tags:
      - sound
    info:
      en: |-
        ```hsc
        (debug_sound_channels [boolean])
        ```
        Displays the utilization of [sound channel](~sound-system#channels) limits in the top left
        corner of the screen.
  - slug: debug_sound_channels_detail
    tags:
      - sound
    info:
      en: |-
        ```hsc
        (debug_sound_channels_detail [boolean])
        ```
        Displays two columns of number pairs while sounds play with an unknown meaning.
  - slug: debug_sound_environment
    tags:
      - sound
      - scenario_structure_bsp
    info:
      en: |-
        ```hsc
        (debug_sound_environment [boolean])
        ```
        If enabled, shows the tag path of the [cluster's](~scenario_structure_bsp#clusters-and-cluster-data)
        current [sound_environment](~).
  - slug: debug_sound_hardware
    info:
      en: |-
        ```hsc
        (debug_sound_hardware [boolean])
        ```
        Unknown purpose.
  - slug: debug_sprites
    info:
      en: |-
        ```hsc
        (debug_sprites [boolean])
        ```
        Renders 2D sprite effects like particles as simple white triangle
        outlines instead of with textures. This also displays some sprite
        statistics at the top of the screen.
  - slug: debug_structure
    tags:
      - scenario_structure_bsp
    info:
      en: |-
        ```hsc
        (debug_structure [boolean])
        ```
        When enbled, all [scenario_structure_bsp](~) collision surfaces will be
        rendered with green outlines. A red bounding box surrounds renderable
        surfaces.
  - slug: debug_structure_automatic
    tags:
      - scenario_structure_bsp
    info:
      en: |-
        ```hsc
        (debug_structure_automatic [boolean])
        ```
        Like `debug_structure`, but only appears when the camera is in "solid"
        space (outside the BSP). This can be handy for finding your way back to
        the level when switching BSPs. It is set to `true` by default in Sapien.
        This is a backported feature from later Halos and only available in the
        newer MCC tools.
  - slug: debug_texture_cache
    info:
      en: |-
        ```hsc
        (debug_texture_cache [boolean])
        ```
        If enabled, causes red messages to appear in the HUD which are
        related to texture and/or sound cache events. Exact meaning unknown.
  - slug: debug_trigger_volumes
    info:
      en: |-
        ```hsc
        (debug_trigger_volumes [boolean])
        ```
        Renders all scenario [trigger volumes](~scenario#trigger-volumes) and their names.
  - slug: debug_unit_all_animations
    tags:
      - model_animations
      - unit
    info:
      en: |-
        ```hsc
        (debug_unit_all_animations [boolean])
        ```
        Logs lines to the console output as unit animations occur.
        For example: `cyborg_mp: animation stand pistol move-right`.
  - slug: debug_unit_animations
    tags:
      - model_animations
      - unit
    info:
      en: |-
        ```hsc
        (debug_unit_animations [boolean])
        ```
        Shows red console log output whenever a unit animation is missing.
        For example: `MISSING: cyborg 'G-driver unarned aim-still'`.
  - slug: debug_unit_illumination
    info:
      en: |-
        ```hsc
        (debug_unit_illumination)
        ```
  - slug: developer_mode
    info:
      en: |-
        ```hsc
        (developer_mode)
        ```
  - slug: disconnect
    info:
      en: |-
        ```hsc
        (disconnect)
        ```
        Force-disconnects from the current multiplayer session and returns to the menu.
        This can be handy for quickly leaving a server after a game has ended without
        having to wait for the "Quit" option in the post-game lobby.
  - slug: director_camera_switch_fast
    info:
      en: |-
        ```hsc
        (director_camera_switch_fast)
        ```
  - slug: director_camera_switching
    info:
      en: |-
        ```hsc
        (director_camera_switching)
        ```
  - slug: display_framerate
    info:
      en: |-
        ```hsc
        (display_framerate [boolean])
        ```
        Displays the current framerate in green in the bottom-right corner of the screen.
  - slug: display_precache_progress
    info:
      en: |-
        ```hsc
        (display_precache_progress)
        ```
  - slug: effects_corpse_nonviolent
    info:
      en: |-
        ```hsc
        (effects_corpse_nonviolent [boolean])
        ```
        Toggles if shooting bodies produces additional blood effects.
  - slug: equipment_incremental_rate
    info:
      en: |-
        ```hsc
        (equipment_incremental_rate)
        ```
  - slug: error_suppress_all
    info:
      en: |-
        ```hsc
        (error_suppress_all)
        ```
  - slug: f0
    info:
      en: |-
        ```hsc
        (f0)
        ```
  - slug: f1
    info:
      en: |-
        ```hsc
        (f1)
        ```
  - slug: f2
    info:
      en: |-
        ```hsc
        (f2)
        ```
  - slug: f3
    info:
      en: |-
        ```hsc
        (f3)
        ```
  - slug: f4
    info:
      en: |-
        ```hsc
        (f4)
        ```
  - slug: f5
    info:
      en: |-
        ```hsc
        (f5)
        ```
  - slug: find_all_fucked_up_shit
    info:
      en: |-
        ```hsc
        (find_all_fucked_up_shit)
        ```
  - slug: force_all_player_views_to_default_player
    info:
      en: |-
        ```hsc
        (force_all_player_views_to_default_player)
        ```
  - slug: framerate_lock
    info:
      en: |-
        ```hsc
        (framerate_lock)
        ```
  - slug: framerate_throttle
    info:
      en: |-
        ```hsc
        (framerate_throttle [boolean])
        ```
        Limits rendering to 30 FPS.
  - slug: freeze_flying_camera
    info:
      en: |-
        ```hsc
        (freeze_flying_camera)
        ```
  - slug: global_connection_dont_timeout
    info:
      en: |-
        ```hsc
        (global_connection_dont_timeout)
        ```
  - slug: hud_filter
    info:
      en: |-
        ```hsc
        (hud_filter [boolean])
        ```
        Unknown purpose.
  - slug: leaf_to_leaf_latency
    info:
      en: |-
        ```hsc
        (leaf_to_leaf_latency [boolean])
        ```
        If enabled, causes the game to perform server latency analysis. Periodically,
        20 samples will be taken and statistics will appear on the screen.
  - slug: local_player_log_level
    info:
      en: |-
        ```hsc
        (local_player_log_level)
        ```
  - slug: local_player_update_rate
    info:
      en: |-
        ```hsc
        (local_player_update_rate)
        ```
  - slug: local_player_vehicle_update_rate
    info:
      en: |-
        ```hsc
        (local_player_vehicle_update_rate)
        ```
  - slug: log_server_player_update_history
    info:
      en: |-
        ```hsc
        (log_server_player_update_history)
        ```
  - slug: loud_dialog_hack
    info:
      en: |-
        ```hsc
        (loud_dialog_hack)
        ```
  - slug: model_animation_bullshit0
    info:
      en: |-
        ```hsc
        (model_animation_bullshit0)
        ```
  - slug: model_animation_bullshit1
    info:
      en: |-
        ```hsc
        (model_animation_bullshit1)
        ```
  - slug: model_animation_bullshit2
    info:
      en: |-
        ```hsc
        (model_animation_bullshit2)
        ```
  - slug: model_animation_bullshit3
    info:
      en: |-
        ```hsc
        (model_animation_bullshit3)
        ```
  - slug: model_animation_compression
    info:
      en: |-
        ```hsc
        (model_animation_compression)
        ```
  - slug: model_animation_data_compressed_size
    info:
      en: |-
        ```hsc
        (model_animation_data_compressed_size)
        ```
  - slug: model_animation_data_compression_savings_in_bytes
    info:
      en: |-
        ```hsc
        (model_animation_data_compression_savings_in_bytes)
        ```
  - slug: model_animation_data_compression_savings_in_bytes_at_import
    info:
      en: |-
        ```hsc
        (model_animation_data_compression_savings_in_bytes_at_import)
        ```
  - slug: model_animation_data_compression_savings_in_percent
    info:
      en: |-
        ```hsc
        (model_animation_data_compression_savings_in_percent)
        ```
  - slug: model_animation_data_uncompressed_size
    info:
      en: |-
        ```hsc
        (model_animation_data_uncompressed_size)
        ```
  - slug: mouse_acceleration
    info:
      en: |-
        ```hsc
        (mouse_acceleration [real])
        ```
        Controls the amount of mouse input acceleration. Set to `0` for none.
        Defaults to `0.7`.
  - slug: multiplayer_draw_teammates_names
    info:
      en: |-
        ```hsc
        (multiplayer_draw_teammates_names)
        ```
  - slug: multiplayer_hit_sound_volume
    tags:
      - sound
    info:
      en: |-
        ```hsc
        (multiplayer_hit_sound_volume [real])
        ```
        Sets the gain of the hit sound heard when damage is dealt in multiplayer.
        Defaults to `0.2`.
  - slug: net_bandwidth
    info:
      en: |-
        ```hsc
        (net_bandwidth)
        ```
  - slug: net_graph_enabled
    info:
      en: |-
        ```hsc
        (net_graph_enabled)
        ```
  - slug: net_graph_period
    info:
      en: |-
        ```hsc
        (net_graph_period)
        ```
  - slug: network_connect_timeout
    info:
      en: |-
        ```hsc
        (network_connect_timeout)
        ```
  - slug: object_light_ambient_base
    tags:
      - object
    info:
      en: |-
        ```hsc
        (object_light_ambient_base)
        ```
        Sets the amount of ambient light all objects receive. Note that this
        only affects moving objects when their lighting updates, so you will
        not see any change on scenery. Setting this to `1` makes objects
        fullbright. Defaults to `0.03`.
  - slug: object_light_ambient_scale
    tags:
      - lightmaps
      - object
    info:
      en: |-
        ```hsc
        (object_light_ambient_scale)
        ```
        Scales ambient light from the lightmap. Defaults to `0.4`.
  - slug: object_light_interpolate
    tags:
      - lightmaps
      - object
    info:
      en: |-
        ```hsc
        (object_light_interpolate)
        ```
        Toggles if [object lighting](~lightmaps#lighting-for-dynamic-objects) transitions smoothly when the object moves
        between different ground point surfaces or default lighting.
  - slug: object_light_secondary_scale
    tags:
      - object
    info:
      en: |-
        ```hsc
        (object_light_secondary_scale)
        ```
        Scales secondary light on objects, but doesn't apply to default lighting.
        Defaults to `1`.
  - slug: object_prediction
    info:
      en: |-
        ```hsc
        (object_prediction)
        ```
  - slug: oddball_baseline_rate
    info:
      en: |-
        ```hsc
        (oddball_baseline_rate)
        ```
  - slug: pad3
    info:
      en: |-
        ```hsc
        (pad3)
        ```
  - slug: pad3_scale
    info:
      en: |-
        ```hsc
        (pad3_scale)
        ```
  - slug: player_autoaim
    info:
      en: |-
        ```hsc
        (player_autoaim)
        ```
  - slug: player_magnetism
    info:
      en: |-
        ```hsc
        (player_magnetism)
        ```
  - slug: player_spawn_count
    info:
      en: |-
        ```hsc
        (player_spawn_count)
        ```
  - slug: profile_display
    info:
      en: |-
        ```hsc
        (profile_display [boolean])
        ```
        Displays profiling and budget information in the upper-left of the screen,
        including object, effects, particles, AI encounters, collision tests,
        and more. You may find it useful to open the console while using this
        feature in order to stop the game simulation.
  - slug: profile_dump_frames
    info:
      en: |-
        ```hsc
        (profile_dump_frames)
        ```
  - slug: profile_dump_lost_frames
    info:
      en: |-
        ```hsc
        (profile_dump_lost_frames)
        ```
  - slug: profile_graph
    info:
      en: |-
        ```hsc
        (profile_graph [boolean])
        ```
        Broken feature -- causes a crash.
  - slug: profile_timebase_ticks
    info:
      en: |-
        ```hsc
        (profile_timebase_ticks)
        ```
  - slug: projectile_incremental_rate
    info:
      en: |-
        ```hsc
        (projectile_incremental_rate)
        ```
  - slug: rasterizer_active_camouflage
    info:
      en: |-
        ```hsc
        (rasterizer_active_camouflage [boolean])
        ```
        Toggles the active camouflage distortion effect. When disabled, objects
        with active camouflage are rendered as they normally would without the
        effect.
  - slug: rasterizer_active_camouflage_multipass
    tags:
      - shader_transparent_glass
      - shader_transparent_chicago
      - shader_transparent_chicago_extended
      - shader_transparent_generic
    info:
      en: |-
        ```hsc
        (rasterizer_active_camouflage_multipass [boolean])
        ```
        Toggles whether or not transparent shaders are shown through
        active camouflage. If disabled, shaders like glass or lights
        will not be visible through a camouflaged unit.
  - slug: rasterizer_bump_mapping
    info:
      en: |-
        ```hsc
        (rasterizer_bump_mapping [boolean])
        ```
        Toggles bump mapping on the BSP, affecting both environmental bump
        lighting and specular reflections. If you only want to toggle
        bump lighting, use `rasterizer_lightmaps_incident_radiosity`.
  - slug: rasterizer_d3dlight_attenuation0
    info:
      en: |-
        ```hsc
        (rasterizer_d3dlight_attenuation0)
        ```
  - slug: rasterizer_d3dlight_attenuation1
    info:
      en: |-
        ```hsc
        (rasterizer_d3dlight_attenuation1)
        ```
  - slug: rasterizer_d3dlight_attenuation2
    info:
      en: |-
        ```hsc
        (rasterizer_d3dlight_attenuation2)
        ```
  - slug: rasterizer_d3dlight_falloff
    info:
      en: |-
        ```hsc
        (rasterizer_d3dlight_falloff)
        ```
  - slug: rasterizer_d3dlight_phi
    info:
      en: |-
        ```hsc
        (rasterizer_d3dlight_phi)
        ```
  - slug: rasterizer_d3dlight_theta
    info:
      en: |-
        ```hsc
        (rasterizer_d3dlight_theta)
        ```
  - slug: rasterizer_debug_geometry
    info:
      en: |-
        ```hsc
        (rasterizer_debug_geometry)
        ```
  - slug: rasterizer_debug_geometry_multipass
    info:
      en: |-
        ```hsc
        (rasterizer_debug_geometry_multipass)
        ```
  - slug: rasterizer_debug_meter_shader
    info:
      en: |-
        ```hsc
        (rasterizer_debug_meter_shader)
        ```
  - slug: rasterizer_debug_model_lod
    info:
      en: |-
        ```hsc
        (rasterizer_debug_model_lod [short])
        ```
        Forces certain object [LODs](~gbxmodel#level-of-detail) to be used.
        A value of `4` is the highest quality, and `0` the worst. The default
        value `-1` returns to automatic behaviour.
  - slug: rasterizer_debug_model_vertices
    info:
      en: |-
        ```hsc
        (rasterizer_debug_model_vertices)
        ```
  - slug: rasterizer_debug_transparents
    info:
      en: |-
        ```hsc
        (rasterizer_debug_transparents)
        ```
  - slug: rasterizer_debug_shader_transparent_generic
    info:
      en: |-
        ```hsc
        (rasterizer_debug_shader_transparent_generic [boolean])
        ```
        Disabling this silences "generic shader has no maps or stages" warnings
        in the console. Newly added to the MCC tools in the July 2023 CU.
    tags:
      - added_in_mcc
  - slug: rasterizer_detail_objects
    info:
      en: |-
        ```hsc
        (rasterizer_detail_objects [boolean])
        ```
        Toggles the rendering of [detail objects](~detail_object_collection).
  - slug: rasterizer_detail_objects_offset_multiplier
    info:
      en: |-
        ```hsc
        (rasterizer_detail_objects_offset_multiplier [boolean])
        ```
        Defaults to `0.4`. No visible effect on detail objects when changed.
  - slug: rasterizer_draw_first_person_weapon_first
    info:
      en: |-
        ```hsc
        (rasterizer_draw_first_person_weapon_first [boolean])
        ```
        Controls whether the first person weapon/arms is rendered before or
        after the rest of the scene. Defaults to `true`. If set to `false`,
        parts of the FP model can be occluded by nearby objects because they fail
        the depth test against the [depth buffer](https://en.wikipedia.org/wiki/Z-buffering).
        This is easily seen in the Warthog passenger seat or with the sniper
        rifle against scenery.

        Typically, the FP view draws first and also writes to a
        [stencil buffer](https://en.wikipedia.org/wiki/Stencil_buffer) which is
        later used to prevent the background from overlapping the FP view. You
        can disable `rasterizer_stencil_mask` for the same effect as disabling
        this global.
  - slug: rasterizer_DXTC_noise
    info:
      en: |-
        ```hsc
        (rasterizer_DXTC_noise)
        ```
  - slug: rasterizer_dynamic_lit_geometry
    info:
      en: |-
        ```hsc
        (rasterizer_dynamic_lit_geometry)
        ```
  - slug: rasterizer_dynamic_screen_geometry
    info:
      en: |-
        ```hsc
        (rasterizer_dynamic_screen_geometry)
        ```
  - slug: rasterizer_dynamic_unlit_geometry
    info:
      en: |-
        ```hsc
        (rasterizer_dynamic_unlit_geometry)
        ```
  - slug: rasterizer_effects_level
    info:
      en: |-
        ```hsc
        (rasterizer_effects_level)
        ```
  - slug: rasterizer_environment
    info:
      en: |-
        ```hsc
        (rasterizer_environment)
        ```
  - slug: rasterizer_environment_alpha_testing
    tags:
      - shader_environment
    info:
      en: |-
        ```hsc
        (rasterizer_environment_alpha_testing [boolean])
        ```
        Toggles [alpha testing](~shader_environment#alpha-testing)
        for BSP [shader_environment](~). These shaders are
        rendered opaquely when disabled.
  - slug: rasterizer_environment_decals
    tags:
      - decal
    info:
      en: |-
        ```hsc
        (rasterizer_environment_decals)
        ```
        Toggles the display and creation of both permanent and dynamic decals.
        While `false`, effects cannot create new decals but previous ones will
        reappear when reset to `true`.
  - slug: rasterizer_environment_diffuse_lights
    tags:
      - light
    info:
      en: |-
        ```hsc
        (rasterizer_environment_diffuse_lights [boolean])
        ```
        Toggles the rendering of [_dynamic_ light](~light#tag-field-flags-dynamic)
        illumination on the BSP.
  - slug: rasterizer_environment_diffuse_textures
    tags:
      - lightmaps
    info:
      en: |-
        ```hsc
        (rasterizer_environment_diffuse_textures [boolean])
        ```
        Disables diffuse textures in the [BSP](~scenario_structure_bsp),
        showing just the lightmap shading and specular components.
  - slug: rasterizer_environment_fog
    info:
      en: |-
        ```hsc
        (rasterizer_environment_fog)
        ```
        Toggles both environmental [sky fog](~sky#tag-field-outdoor-fog-color) and
        [fog plane](~fog) colors. Does not affect _fog screen_. Use
        `rasterizer_fog_plane` or `rasterizer_fog_atmosphere` to individually
        toggle fog types.
    tags:
      - sky
      - fog
  - slug: rasterizer_environment_fog_screen
    info:
      en: |-
        ```hsc
        (rasterizer_environment_fog_screen [boolean])
        ```
        Toggles the cloudy [fog screen](~fog) effect of fog planes, seen in
        the levels a30, c10, and c40.
  - slug: rasterizer_environment_lightmaps
    tags:
      - lightmaps
    info:
      en: |-
        ```hsc
        (rasterizer_environment_lightmaps [boolean])
        ```
        Toggles the rendering of structure BSP [lightmaps](~). When disabled,
        the level will be completely invisible.
  - slug: rasterizer_environment_reflection_lightmap_mask
    info:
      en: |-
        ```hsc
        (rasterizer_environment_reflection_lightmap_mask)
        ```
  - slug: rasterizer_environment_reflection_mirrors
    tags:
      - shader_environment
    info:
      en: |-
        ```hsc
        (rasterizer_environment_reflection_mirrors [boolean])
        ```
        Toggles the rendering of [dynamic mirrors](~shader_environment#tag-field-reflection-flags-dynamic-mirror).
  - slug: rasterizer_environment_reflections
    info:
      en: |-
        ```hsc
        (rasterizer_environment_reflections [boolean])
        ```
        Toggles specular reflections in the BSP.
  - slug: rasterizer_environment_shadows
    tags:
      - object
    info:
      en: |-
        ```hsc
        (rasterizer_environment_shadows [boolean])
        ```
        Toggles [dynamic shadow mapping](~object#shadows-and-lighting) for objects.
        Same effect as `render_shadows`.
  - slug: rasterizer_environment_specular_lightmaps
    info:
      en: |-
        ```hsc
        (rasterizer_environment_specular_lightmaps)
        ```
  - slug: rasterizer_environment_specular_lights
    info:
      en: |-
        ```hsc
        (rasterizer_environment_specular_lights)
        ```
  - slug: rasterizer_environment_specular_mask
    info:
      en: |-
        ```hsc
        (rasterizer_environment_specular_mask)
        ```
  - slug: rasterizer_environment_transparents
    info:
      en: |-
        ```hsc
        (rasterizer_environment_transparents)
        ```
  - slug: rasterizer_far_clip_distance
    info:
      en: |-
        ```hsc
        (rasterizer_far_clip_distance [real])
        ```
        Sets the [far clip distance](https://en.wikipedia.org/wiki/Clipping_(computer_graphics)),
        which is the maximum draw distance (world units). Defaults to `1024.0`.
  - slug: rasterizer_filthy_decal_fog_hack
    tags:
      - decal
    info:
      en: |-
        ```hsc
        (rasterizer_filthy_decal_fog_hack)
        ```
  - slug: rasterizer_first_person_weapon_far_clip_distance
    info:
      en: |-
        ```hsc
        (rasterizer_first_person_weapon_far_clip_distance [real])
        ```
        Sets the [far clip distance](https://en.wikipedia.org/wiki/Clipping_(computer_graphics)),
        for the first person arms and weapon. Defaults to `1024.0`.
        The world clipping distance can be set with `rasterizer_far_clip_distance`.
  - slug: rasterizer_first_person_weapon_near_clip_distance
    info:
      en: |-
        ```hsc
        (rasterizer_first_person_weapon_near_clip_distance [real])
        ```
        Sets the [near clip distance](https://en.wikipedia.org/wiki/Clipping_(computer_graphics))
        of the first person arms and weapon. Defaults to `0.011719`.
  - slug: rasterizer_floating_point_zbuffer
    info:
      en: |-
        ```hsc
        (rasterizer_floating_point_zbuffer)
        ```
  - slug: rasterizer_fog_atmosphere
    tags:
      - sky
    info:
      en: |-
        ```hsc
        (rasterizer_fog_atmosphere [boolean])
        ```
        Toggles atmospheric fog as defined in the active [sky](~) tag.
  - slug: rasterizer_fog_plane
    tags:
      - fog
    info:
      en: |-
        ```hsc
        (rasterizer_fog_plane [boolean])
        ```
        Toggles the rendering of [fog planes](~fog).
  - slug: rasterizer_fps
    info:
      en: |-
        ```hsc
        (rasterizer_fps)
        ```
  - slug: rasterizer_frame_bounds_bottom
    info:
      en: |-
        ```hsc
        (rasterizer_frame_bounds_bottom)
        ```
  - slug: rasterizer_frame_bounds_left
    info:
      en: |-
        ```hsc
        (rasterizer_frame_bounds_left)
        ```
  - slug: rasterizer_frame_bounds_right
    info:
      en: |-
        ```hsc
        (rasterizer_frame_bounds_right)
        ```
  - slug: rasterizer_frame_bounds_top
    info:
      en: |-
        ```hsc
        (rasterizer_frame_bounds_top)
        ```
  - slug: rasterizer_frame_drop_ms
    info:
      en: |-
        ```hsc
        (rasterizer_frame_drop_ms)
        ```
  - slug: rasterizer_framerate_stabilization
    info:
      en: |-
        ```hsc
        (rasterizer_framerate_stabilization)
        ```
  - slug: rasterizer_framerate_throttle
    info:
      en: |-
        ```hsc
        (rasterizer_framerate_throttle)
        ```
  - slug: rasterizer_hud_motion_sensor
    info:
      en: |-
        ```hsc
        (rasterizer_hud_motion_sensor [boolean])
        ```
        Toggles the yellow and red dots seen in the motion sensor.
  - slug: rasterizer_lens_flares
    tags:
      - lens_flare
    info:
      en: |-
        ```hsc
        (rasterizer_lens_flares [boolean])
        ```
        Toggles rendering of all [lens flares](~lens_flare).
  - slug: rasterizer_lens_flares_occlusion
    tags:
      - lens_flare
    info:
      en: |-
        ```hsc
        (rasterizer_lens_flares_occlusion [boolean])
        ```
        Toggles [lens flare](~lens_flare) occlusion. If set to `false`, lens
        flares will no longer be occluded and stay visible even through objects
        in the foreground.
  - slug: rasterizer_lens_flares_occlusion_debug
    tags:
      - lens_flare
    info:
      en: |-
        ```hsc
        (rasterizer_lens_flares_occlusion_debug [boolean])
        ```
        Displays red squares over [lens flares](~lens_flare) in the environment.
        How much the square is occluded by other geometry or the view frustrum
        is how much the lens flare fades out. The size of the square relates to
        the [_occlusion radius_](~lens_flare#tag-field-occlusion-radius).
  - slug: rasterizer_lightmap_ambient
    info:
      en: |-
        ```hsc
        (rasterizer_lightmap_ambient [real])
        ```
        Sets the amount of ambient light when rendering the BSP in fullbright mode
        (like when radiosity has not yet been baked or `rasterizer_lightmap_mode 2`)
        This defaults to `1.0`. It has no effect on the normal lightmap rendering mode.
      tags:
        - lightmaps
  - slug: rasterizer_lightmap_mode
    tags:
      - lightmaps
    info:
      en: |-
        ```hsc
        (rasterizer_lightmap_mode [short])
        ```
        Changes the rendering mode of [lightmaps](~):
        | Mode | Description |
        |------|-------------|
        | `0`  | Normal (default).
        | `1`  | BSP specular reflections will not be multiplied by the lightmap.
        | `2`  | Fullbright mode. You can set the ambient light with `rasterizer_lightmap_ambient`.
        | `3`  | Colours BSP surfaces by what lightmap [bitmap index](~scenario_structure_bsp#tag-field-lightmaps-bitmap) they use (technically, with a random colour seeded by the lightmap address). It can help to disable `rasterizer_environment_diffuse_textures` and `rasterizer_environment_reflections` to see this more clearly.
        | `4`  | Fullbright without environmental bump map lighting. Ambient light is not configurable in this mode.
        
        Any higher value will appear the same as `1`. Repeated changing of this value can cause degraded performance and eventually a crash.
  - slug: rasterizer_lightmaps_filtering
    tags:
      - lightmaps
    info:
      en: |-
        ```hsc
        (rasterizer_lightmaps_filtering [boolean])
        ```
        Enables or disables [texture filtering](https://en.wikipedia.org/wiki/Texture_filtering)
        for lightmaps. When disabled, lightmaps will appear blocky and jagged.
        Has no effect in H1A.
  - slug: rasterizer_lightmaps_incident_radiosity
    info:
      en: |-
        ```hsc
        (rasterizer_lightmaps_incident_radiosity [boolean])
        ```
        Toggles directional environmental bump mapped lighting. Does not
        affect the sampling of [stored incident radiosity](~scenario_structure_bsp#tag-field-lightmaps-materials-lightmap-vertices-offset)
        for object shadows.
    tags:
      - lightmaps
  - slug: rasterizer_mode
    info:
      en: |-
        ```hsc
        (rasterizer_mode [short])
        ```
        Changes rendering mode of the level and its objects:
        | Mode | Description |
        |------|-------------|
        | `0`  | Normal (default).
        | `1`  | Additive blending.
        | `2`  | Disables specular on the BSP (like `rasterizer_environment_reflections`).
  - slug: rasterizer_model_lighting_ambient
    info:
      en: |-
        ```hsc
        (rasterizer_model_lighting_ambient)
        ```
  - slug: rasterizer_model_transparents
    tags:
      - gbxmodel
      - shader_transparent_glass
      - shader_transparent_chicago
      - shader_transparent_chicago_extended
      - shader_transparent_generic
    info:
      en: |-
        ```hsc
        (rasterizer_model_transparents [boolean])
        ```
        Toggles the rendering of transparent shaders in [models](~gbxmodel).
        For example, the Warthog's windshield.
  - slug: rasterizer_models
    tags:
      - gbxmodel
    info:
      en: |-
        ```hsc
        (rasterizer_models [boolean])
        ```
        Toggles the rendering of all [models](~gbxmodel). When disabled, all
        objects like scenery, units, projectiles, and even the skybox and FP arms
        will become invisible. The BSP and effects like particles and decals are
        still visible.
  - slug: rasterizer_near_clip_distance
    info:
      en: |-
        ```hsc
        (rasterizer_near_clip_distance [real])
        ```
        Sets the [near clip distance](https://en.wikipedia.org/wiki/Clipping_(computer_graphics)),
        which is the minimum draw distance (world units). Defaults to `0.0625`.
        This does not appear to work fully, as the near clip distance will only
        be adjusted for one frame.
  - slug: rasterizer_plasma_energy
    info:
      en: |-
        ```hsc
        (rasterizer_plasma_energy)
        ```
  - slug: rasterizer_profile_log
    info:
      en: |-
        ```hsc
        (rasterizer_profile_log)
        ```
  - slug: rasterizer_profile_objectlock_time
    info:
      en: |-
        ```hsc
        (rasterizer_profile_objectlock_time)
        ```
  - slug: rasterizer_profile_print_locks
    info:
      en: |-
        ```hsc
        (rasterizer_profile_print_locks)
        ```
  - slug: rasterizer_ray_of_buddha
    info:
      en: |-
        ```hsc
        (rasterizer_ray_of_buddha [boolean])
        ```
        Toggles the [sky's](~sky) "god rays" effect.
    tags:
      - sky
  - slug: rasterizer_refresh_rate
    info:
      en: |-
        ```hsc
        (rasterizer_refresh_rate)
        ```
  - slug: rasterizer_safe_frame_bounds
    info:
      en: |-
        ```hsc
        (rasterizer_safe_frame_bounds)
        ```
  - slug: rasterizer_screen_effects
    info:
      en: |-
        ```hsc
        (rasterizer_screen_effects)
        ```
  - slug: rasterizer_screen_flashes
    info:
      en: |-
        ```hsc
        (rasterizer_screen_flashes)
        ```
        Toggles the display of screen flashes, such as those from a [damage_effect](~h1/tags/damage_effect)
        or powerup [equipment](~h1/tags/object/item/equipment).
    tags:
      - damage
      - equipment
  - slug: rasterizer_secondary_render_target_debug
    info:
      en: |-
        ```hsc
        (rasterizer_secondary_render_target_debug)
        ```
  - slug: rasterizer_shadows_convolution
    info:
      en: |-
        ```hsc
        (rasterizer_shadows_convolution [boolean])
        ```
        Toggles the blurring of dynamic object shadows. Defaults to `true`.
  - slug: rasterizer_shadows_debug
    info:
      en: |-
        ```hsc
        (rasterizer_shadows_debug [boolean])
        ```
        When enabled, all dynamic object shadow maps will be rendered with a partially-shadowed
        background, making their rectangular boundaries visible. The size of this rectangle
        depends on the object's [bounding radius](~object#tag-field-bounding-radius).
  - slug: rasterizer_smart
    info:
      en: |-
        ```hsc
        (rasterizer_smart [boolean])
        ```
        No visible effect.
  - slug: rasterizer_soft_filter
    info:
      en: |-
        ```hsc
        (rasterizer_soft_filter [boolean])
        ```
        No visible effect.
  - slug: rasterizer_splitscreen_VB_optimization
    info:
      en: |-
        ```hsc
        (rasterizer_splitscreen_VB_optimization)
        ```
  - slug: rasterizer_stats
    info:
      en: |-
        ```hsc
        (rasterizer_stats [short])
        ```
        Displays renderer statistics on the screen, with several modes. All modes
        include at least framerate stats.
        | Mode | Description |
        |------|-------------|
        | `0`  | Off (default).
        | `1`  | Some unknown counts which always read 0.
        | `2`  | Vertices, triangles, and primitives counts for various model and environment features and effects.
        | `3`  | GPU profiling for each stage of rendering. Uknown if this still works.
        | `4`  | Memory usage for dynamic vertices, shadow buffers, and more.
        | `5`  | Just framerate stats.
  - slug: rasterizer_stencil_mask
    info:
      en: |-
        ```hsc
        (rasterizer_stencil_mask [boolean])
        ```
        Enables or disables the [stencil mask](https://en.wikipedia.org/wiki/Stencil_buffer)
        used to prevent the background scene from overlapping the first person
        view. Defaults to `true`. Disabling this has the same effect as disabling
        `rasterizer_draw_first_person_weapon_first` and you will sometimes see
        nearby objects occluding parts of the FP model.
  - slug: rasterizer_transparent_pixel_counter
    info:
      en: |-
        ```hsc
        (rasterizer_transparent_pixel_counter)
        ```
  - slug: rasterizer_water
    tags:
      - shader_transparent_water
    info:
      en: |-
        ```hsc
        (rasterizer_water [boolean])
        ```
        Toggles the rendering of [shader_transparent_water](~) shaders.
  - slug: rasterizer_water_mipmapping
    info:
      en: |-
        ```hsc
        (rasterizer_water_mipmapping [boolean])
        ```
        No visible effect. Defaults to `false`.
    tags:
      - removed_in_mcc
  - slug: rasterizer_wireframe
    info:
      en: |-
        ```hsc
        (rasterizer_wireframe [boolean])
        ```
        Toggles rendering in wireframe mode, which only draws pixels along triangle
        edges rather than filling trangles. This can be useful for troubleshooting
        portals.
  - slug: rasterizer_zbias
    info:
      en: |-
        ```hsc
        (rasterizer_zbias)
        ```
  - slug: rasterizer_zoffset
    tags:
      - decal
    info:
      en: |-
        ```hsc
        (rasterizer_zoffset [real])
        ```
        Controls how far away from surfaces new [decals](~decal) are generated, e.g. for
        projectile impacts. Defaults to `0.003906`. The units are _not_ world units.
  - slug: rasterizer_zsprites
    info:
      en: |-
        ```hsc
        (rasterizer_zsprites)
        ```
  - slug: recover_saved_games_hack
    info:
      en: |-
        ```hsc
        (recover_saved_games_hack)
        ```
  - slug: remote_player_action_baseline_update_rate
    info:
      en: |-
        ```hsc
        (remote_player_action_baseline_update_rate)
        ```
  - slug: remote_player_action_update_rate
    info:
      en: |-
        ```hsc
        (remote_player_action_update_rate)
        ```
  - slug: remote_player_log_level
    info:
      en: |-
        ```hsc
        (remote_player_log_level)
        ```
  - slug: remote_player_position_baseline_update_rate
    info:
      en: |-
        ```hsc
        (remote_player_position_baseline_update_rate)
        ```
  - slug: remote_player_position_update_rate
    info:
      en: |-
        ```hsc
        (remote_player_position_update_rate)
        ```
  - slug: remote_player_vehicle_baseline_update_rate
    info:
      en: |-
        ```hsc
        (remote_player_vehicle_baseline_update_rate)
        ```
  - slug: remote_player_vehicle_update_rate
    info:
      en: |-
        ```hsc
        (remote_player_vehicle_update_rate)
        ```
  - slug: render_contrails
    info:
      en: |-
        ```hsc
        (render_contrails [boolean])
        ```
        Toggles the display of all contrails.
    tags:
      - contrail
  - slug: render_model_index_counts
    info:
      en: |-
        ```hsc
        (render_model_index_counts [boolean])
        ```
        If `true`, displays a red number above each object with its model index count.
        If `render_model_vertex_counts` is also enabled, the vertex count and index
        count are separated by a slash like "<vertices>/<indices>".
    tags:
      - gbxmodel
  - slug: render_model_markers
    info:
      en: |-
        ```hsc
        (render_model_markers [boolean])
        ```
        If enabled, all [model markers](~gbxmodel#markers) will be rendered in
        3D with their name and rotation axis.
    tags:
      - gbxmodel
  - slug: render_model_no_geometry
    info:
      en: |-
        ```hsc
        (render_model_no_geometry)
        ```
  - slug: render_model_nodes
    info:
      en: |-
        ```hsc
        (render_model_nodes [boolean])
        ```
        If enabled, all model skeletons will be rendered. Nodes are shown as
        axis gizmos and connected to their parents by white lines.
    tags:
      - gbxmodel
  - slug: render_model_vertex_counts
    info:
      en: |-
        ```hsc
        (render_model_vertex_counts [boolean])
        ```
        If `true`, displays a red number above each object with its model vertex count.
        If `render_model_index_counts` is also enabled, the vertex count and index
        count are separated by a slash like "<vertices>/<indices>".
    tags:
      - gbxmodel
  - slug: render_particles
    info:
      en: |-
        ```hsc
        (render_particles [boolean])
        ```
        Toggles the display of all particles.
    tags:
      - particle
  - slug: render_psystems
    tags:
      - particle_system
      - weather_particle_system
    info:
      en: |-
        ```hsc
        (render_psystems [boolean])
        ```
        Toggles the rendering of [particle_systems](particle_system~) and
        [weather_particle_system](~).
  - slug: render_shadows
    info:
      en: |-
        ```hsc
        (render_shadows [boolean])
        ```
        Toggles the display of dynamic object shadows. Same effect as `rasterizer_environment_shadows`.
    tags:
      - object
  - slug: render_wsystems
    info:
      en: |-
        ```hsc
        (render_wsystems [boolean])
        ```
        No visible effect on weather or particle systems.
  - slug: rider_ejection
    info:
      en: |-
        ```hsc
        (rider_ejection [boolean])
        ```
        Toggles if bipeds are ejected from overturned vehicles, including players
        and AI characters. Defaults to `true`.
  - slug: run_game_scripts
    info:
      en: |-
        ```hsc
        (run_game_scripts [boolean])
        ```
        If enabled, causes level scripts to be run in Sapien. This would allow
        you to see how the beach battle plays out in b30, for example.
  - slug: screenshot_count
    info:
      en: |-
        ```hsc
        (screenshot_count [short])
        ```
        When the `-screenshot` [argument](~arguments#arguments) is enabled,
        pressing {% key "Prnt Scrn" /%} will generate a series of tiled screenhots
        in the `screenshots` directory. For example, a value of `2` will generate
        4 screenshots meant to tile in a 2x2 arrangement for a high resolution
        result. You should disable the HUD with `show_hud 0` before using this.
  - slug: screenshot_size
    info:
      en: |-
        ```hsc
        (screenshot_size [short])
        ```
        Appears to set some kind of crop or scaling factor for generated screenshots,
        but is probably not working as intended. Ssetting this to a value other than `1`
        can crash when using `screenshot_size`.
  - slug: slow_server_startup_safety_zone_in_seconds
    info:
      en: |-
        ```hsc
        (slow_server_startup_safety_zone_in_seconds)
        ```
  - slug: sound_cache_size
    info:
      en: |-
        ```hsc
        (sound_cache_size)
        ```
  - slug: sound_gain_under_dialog
    tags:
      - sound
    info:
      en: |-
        ```hsc
        (sound_gain_under_dialog [real])
        ```
        Controls how quiet non-dialog sounds are when scripted dialog is playing
        (sound class must be `scripted_dialog_other`, `scripted_dialog_force_player`,
        or `scripted_dialog_force_unspatialized`). Does not apply to involuntary
        AI dialog like death/pain lines. Defaults to `0.7`. The effect takes
        about half a second to fade in/out.
  - slug: sound_obstruction_ratio
    tags:
      - sound
    info:
      en: |-
        ```hsc
        (sound_obstruction_ratio [real])
        ```
        Controls how "muffled" sounds are when heard behind an obstruction like
        the [BSP](~scenario_structure_bsp) or an object with [collision geometry](~model_collision_geometry).
        Defaults to `0.1`. A value of `0` means "not muffled", while a value above about `6`
        effectively mutes them.
  - slug: speed_hack_detection
    info:
      en: |-
        ```hsc
        (speed_hack_detection)
        ```
  - slug: speed_hack_log_level
    info:
      en: |-
        ```hsc
        (speed_hack_log_level)
        ```
  - slug: structures_use_pvs_for_vs
    info:
      en: |-
        ```hsc
        (structures_use_pvs_for_vs)
        ```
  - slug: stun_enable
    info:
      en: |-
        ```hsc
        (stun_enable)
        ```
  - slug: sv_client_action_queue_limit
    info:
      en: |-
        ```hsc
        (sv_client_action_queue_limit)
        ```
  - slug: sv_client_action_queue_tick_limit
    info:
      en: |-
        ```hsc
        (sv_client_action_queue_tick_limit)
        ```
  - slug: sv_mapcycle_timeout
    info:
      en: |-
        ```hsc
        (sv_mapcycle_timeout)
        ```
  - slug: sv_public
    info:
      en: |-
        ```hsc
        (sv_public)
        ```
  - slug: sv_tk_ban
    info:
      en: |-
        ```hsc
        (sv_tk_ban)
        ```
  - slug: temporary_hud
    info:
      en: |-
        ```hsc
        (temporary_hud [boolean])
        ```
        Renders a debug HUD with basic weapon information in text and line-drawn
        circular reticules representing the current error angle (yellow) and
        autoaim angle (blue, or red if autoaim active). Works in debug builds only.
  - slug: terminal_render
    info:
      en: |-
        ```hsc
        (terminal_render [boolean])
        ```
        Toggles the display of console output. Defaults to `true`.
  - slug: texture_cache_graph
    info:
      en: |-
        ```hsc
        (texture_cache_graph [boolean])
        ```
        Toggles a live representation of the [texture cache](~renderer#texture-cache)
        in the top left corner of the screen, depicting which entries are being
        loaded and evicted. Works in debug builds only.
  - slug: texture_cache_list
    info:
      en: |-
        ```hsc
        (texture_cache_list [boolean])
        ```
        Shows a live list of all bitmap tag paths currently loaded in the
        [texture cache](~renderer#texture-cache). Works in debug builds only.
  - slug: texture_cache_flush
    info:
      en: |-
        ```hsc
        (texture_cache_flush)
        ```
        Clears all loaded textures from the [texture cache](~renderer#texture-cache).
        Works in debug builds only.
  - slug: transport_dumping
    info:
      en: |-
        ```hsc
        (transport_dumping)
        ```
  - slug: use_new_vehicle_update_scheme
    info:
      en: |-
        ```hsc
        (use_new_vehicle_update_scheme)
        ```
  - slug: use_super_remote_players_action_update
    info:
      en: |-
        ```hsc
        (use_super_remote_players_action_update)
        ```
  - slug: vehicle_incremental_rate
    info:
      en: |-
        ```hsc
        (vehicle_incremental_rate)
        ```
  - slug: weapon_incremental_rate
    info:
      en: |-
        ```hsc
        (weapon_incremental_rate)
        ```
  - slug: weather
    tags:
      - weather_particle_system
    info:
      en: |-
        ```hsc
        (weather [boolean])
        ```
        Toggles the rendering of all [weather_particle_system](~). Defaults to `true`.
