functions:
  - slug: begin
    info:
      en: >-
        ```hsc

        (begin <expression(s)>)

        ```

        returns the last expression in a sequence after evaluating the sequence
        in order.
    net_safe_raw: 'yes'
  - slug: begin_random
    info:
      en: >-
        ```hsc

        (begin_random <expression(s)>)

        ```

        evaluates the sequence of expressions in random order and returns the
        last value evaluated.
    net_safe_raw: 'yes'
  - slug: if
    info:
      en: |-
        ```hsc
        (if <boolean> <then> [<else>])
        ```
        returns one of two values based on the value of a condition.
    net_safe_raw: 'yes'
  - slug: cond
    info:
      en: |-
        ```hsc
        (cond (<boolean1> <result1>) [(<boolean2> <result2>) [...]])
        ```
        returns the value associated with the first true condition.
    net_safe_raw: 'yes'
  - slug: set
    info:
      en: |-
        ```hsc
        (set <variable name> <expression>)
        ```
        set the value of a global variable.
    net_safe_raw: yes (depending on result)
  - slug: and
    info:
      en: |-
        ```hsc
        (and <boolean(s)>)
        ```
        returns true if all specified expressions are true.
    net_safe_raw: 'yes'
  - slug: or
    info:
      en: |-
        ```hsc
        (or <boolean(s)>)
        ```
        returns true if any specified expressions are true.
    net_safe_raw: 'yes'
  - slug: not
    info:
      en: |-
        ```hsc
        (not <boolean>)
        ```
        returns the opposite of the expression.
    net_safe_raw: 'yes'
  - slug: plus
    info:
      en: |-
        ```hsc
        (+ <number(s)>)
        ```
        returns the sum of all specified expressions.
    net_safe_raw: 'yes'
  - slug: minus
    info:
      en: |-
        ```hsc
        (- <number> <number>)
        ```
        returns the difference of two expressions.
    net_safe_raw: 'yes'
  - slug: mult
    info:
      en: |-
        ```hsc
        (* <number(s)>)
        ```
        returns the product of all specified expressions.
    net_safe_raw: 'yes'
  - slug: div
    info:
      en: |-
        ```hsc
        (/ <number> <number>)
        ```
        returns the quotient of two expressions.
    net_safe_raw: 'yes'
  - slug: min
    info:
      en: |-
        ```hsc
        (min <number(s)>)
        ```
        returns the minimum of all specified expressions.
    net_safe_raw: 'yes'
  - slug: max
    info:
      en: |-
        ```hsc
        (max <number(s)>)
        ```
        returns the maximum of all specified expressions.
    net_safe_raw: 'yes'
  - slug: eq
    info:
      en: |-
        ```hsc
        (= <expression> <expression>)
        ```
        returns true if two expressions are equal
    net_safe_raw: 'yes'
  - slug: ne
    info:
      en: |-
        ```hsc
        (!= <expression> <expression>)
        ```
        returns true if two expressions are not equal
    net_safe_raw: 'yes'
  - slug: gt
    info:
      en: |-
        ```hsc
        (> <number> <number>)
        ```
        returns true if the first number is larger than the second.
    net_safe_raw: 'yes'
  - slug: lt
    info:
      en: |-
        ```hsc
        (< <number> <number>)
        ```
        returns true if the first number is smaller than the second.
    net_safe_raw: 'yes'
  - slug: ge
    info:
      en: |-
        ```hsc
        (>= <number> <number>)
        ```
        returns true if the first number is larger than or equal to the second.
    net_safe_raw: 'yes'
  - slug: le
    info:
      en: |-
        ```hsc
        (<= <number> <number>)
        ```
        returns true if the first number is smaller than or equal to the second.
    net_safe_raw: 'yes'
  - slug: sleep
    info:
      en: >-
        ```hsc

        (sleep <short> [<script>])

        ```

        pauses execution of this script (or, optionally, another script) for the
        specified number of ticks @ 30Hz.
    net_safe_raw: 'yes'
  - slug: sleep_for_ticks
    info:
      en: >-
        ```hsc

        (sleep_for_ticks <short> [<script>])

        ```

        pauses execution of this script (or, optionally, another script) for the
        specified number of ticks.
    net_safe_raw: 'yes'
  - slug: sleep_forever
    info:
      en: >-
        ```hsc

        (sleep_forever [<script>])

        ```

        pauses execution of this script (or, optionally, another script)
        forever.
    net_safe_raw: 'yes'
  - slug: sleep_until
    info:
      en: >-
        ```hsc

        (sleep_until <boolean> [<short>])

        ```

        pauses execution of this script until the specified condition is true,
        checking once per second unless a different number of ticks is
        specified.
    net_safe_raw: 'yes'
  - slug: wake
    info:
      en: |-
        ```hsc
        (wake <script name>)
        ```
        wakes a sleeping script in the next update.
    net_safe_raw: 'yes'
  - slug: inspect
    info:
      en: |-
        ```hsc
        (inspect <expression>)
        ```
        prints the value of an expression to the screen for debugging purposes.
    net_safe_raw: 'yes'
  - slug: begin
    info:
      en: |-
        ```hsc
        (<passthrough> begin <expression(s)>)
        ```
        returns the last expression in a sequence after evaluating the sequence in order.
    net_safe_raw: yes
  - slug: begin_random
    info:
      en: |-
        ```hsc
        (<passthrough> begin_random <expression(s)>)
        ```
        evaluates the sequence of expressions in random order and returns the last value evaluated.
    net_safe_raw: yes
  - slug: if
    info:
      en: |-
        ```hsc
        (<passthrough> if <boolean> <then> [<else>])
        ```
        returns one of two values based on the value of a condition.
    net_safe_raw: yes
  - slug: cond
    info:
      en: |-
        ```hsc
        (<passthrough> cond (<boolean1> <result1>) [(<boolean2> <result2>) [...]])
        ```
        returns the value associated with the first true condition.
    net_safe_raw: yes
  - slug: set
    info:
      en: |-
        ```hsc
        (<passthrough> set <variable name> <expression>)
        ```
        set the value of a global variable.
    net_safe_raw: yes (depending on result)
  - slug: and
    info:
      en: |-
        ```hsc
        (<boolean> and <boolean(s)>)
        ```
        returns true if all specified expressions are true.
    net_safe_raw: yes
  - slug: or
    info:
      en: |-
        ```hsc
        (<boolean> or <boolean(s)>)
        ```
        returns true if any specified expressions are true.
    net_safe_raw: yes
  - slug: plus
    info:
      en: |-
        ```hsc
        (<real> + <number(s)>)
        ```
        returns the sum of all specified expressions.
    net_safe_raw: yes
  - slug: minus
    info:
      en: |-
        ```hsc
        (<real> - <number> <number>)
        ```
        returns the difference of two expressions.
    net_safe_raw: yes
  - slug: mult
    info:
      en: |-
        ```hsc
        (<real> * <number(s)>)
        ```
        returns the product of all specified expressions.
    net_safe_raw: yes
  - slug: div
    info:
      en: |-
        ```hsc
        (<real> / <number> <number>)
        ```
        returns the quotient of two expressions.
    net_safe_raw: yes
  - slug: min
    info:
      en: |-
        ```hsc
        (<real> min <number(s)>)
        ```
        returns the minimum of all specified expressions.
    net_safe_raw: yes
  - slug: max
    info:
      en: |-
        ```hsc
        (<real> max <number(s)>)
        ```
        returns the maximum of all specified expressions.
    net_safe_raw: yes
  - slug: eq
    info:
      en: |-
        ```hsc
        (<boolean> = <expression> <expression>)
        ```
        returns true if two expressions are equal
    net_safe_raw: yes
  - slug: ne
    info:
      en: |-
        ```hsc
        (<boolean> != <expression> <expression>)
        ```
        returns true if two expressions are not equal
    net_safe_raw: yes
  - slug: gt
    info:
      en: |-
        ```hsc
        (<boolean> > <number> <number>)
        ```
        returns true if the first number is larger than the second.
    net_safe_raw: yes
  - slug: lt
    info:
      en: |-
        ```hsc
        (<boolean> < <number> <number>)
        ```
        returns true if the first number is smaller than the second.
    net_safe_raw: yes
  - slug: ge
    info:
      en: |-
        ```hsc
        (<boolean> >= <number> <number>)
        ```
        returns true if the first number is larger than or equal to the second.
    net_safe_raw: yes
  - slug: le
    info:
      en: |-
        ```hsc
        (<boolean> <= <number> <number>)
        ```
        returns true if the first number is smaller than or equal to the second.
    net_safe_raw: yes
  - slug: sleep
    info:
      en: |-
        ```hsc
        (<void> sleep <short> [<script>])
        ```
        pauses execution of this script (or, optionally, another script) for the specified number of ticks @ 30Hz.
    net_safe_raw: yes
  - slug: sleep_for_ticks
    info:
      en: |-
        ```hsc
        (<void> sleep_for_ticks <short> [<script>])
        ```
        pauses execution of this script (or, optionally, another script) for the specified number of ticks.
    net_safe_raw: yes
  - slug: sleep_forever
    info:
      en: |-
        ```hsc
        (<void> sleep_forever [<script>])
        ```
        pauses execution of this script (or, optionally, another script) forever.
    net_safe_raw: yes
  - slug: sleep_until
    info:
      en: |-
        ```hsc
        (<boolean> sleep_until <boolean> [<short>])
        ```
        pauses execution of this script until the specified condition is true, checking once per second unless a different number of ticks is specified.
    net_safe_raw: yes
  - slug: wake
    info:
      en: |-
        ```hsc
        (<void> wake <script name>)
        ```
        wakes a sleeping script in the next update.
    net_safe_raw: yes
  - slug: inspect
    info:
      en: |-
        ```hsc
        (<void> inspect <expression>)
        ```
        prints the value of an expression to the screen for debugging purposes.
    net_safe_raw: yes
  - slug: unit
    info:
      en: |-
        ```hsc
        (<unit> unit <object>)
        ```
        converts an object to a unit.
    net_safe_raw: no
  - slug: evaluate
    info:
      en: |-
        ```hsc
        (<void> evaluate <script>)
        ```
        Evaluate the given script
    net_safe_raw: unknown, assumed unsafe.
  - slug: not
    info:
      en: |-
        ```hsc
        (<boolean> not <boolean>)
        ```
        returns the opposite of the expression.
    net_safe_raw: yes
  - slug: pin
    info:
      en: |-
        ```hsc
        (<real> pin <real> <real> <real>)
        ```
        returns the first value pinned between the second two
    net_safe_raw: yes
  - slug: print
    info:
      en: |-
        ```hsc
        (<void> print <string>)
        ```
        prints a string to the console.
    net_safe_raw: yes
  - slug: log_print
    info:
      en: |-
        ```hsc
        (<void> log_print <string>)
        ```
        prints a string to the hs log file.
    net_safe_raw: yes
  - slug: debug_scripting_show_thread
    info:
      en: |-
        ```hsc
        (<void> debug_scripting_show_thread <string> <boolean>)
        ```
        shows or hides the display of any thread containing the given substring.
    net_safe_raw: yes
  - slug: debug_script_thread
    info:
      en: |-
        ```hsc
        (<void> debug_script_thread <string> <boolean>)
        ```
        Verbose threads spew to log about script and function calls.
    net_safe_raw: yes
  - slug: debug_scripting
    info:
      en: |-
        ```hsc
        (<void> debug_scripting <boolean>)
        ```
        Turn on/off hs script debugging.
    net_safe_raw: yes
  - slug: debug_scripting_globals
    info:
      en: |-
        ```hsc
        (<void> debug_scripting_globals <boolean>)
        ```
        Turn on/off hs global debugging.
    net_safe_raw: yes
  - slug: debug_scripting_variable
    info:
      en: |-
        ```hsc
        (<void> debug_scripting_variable <string> <boolean>)
        ```
        Turn on/off debugging of a specific global variable; enclose the variable name with single quote characters ('my_variable')
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_scripting_variable_all
    info:
      en: |-
        ```hsc
        (<void> debug_scripting_variable_all <boolean>)
        ```
        Turn on/off debugging of all global variables
    net_safe_raw: unknown, assumed unsafe
  - slug: breakpoint
    info:
      en: |-
        ```hsc
        (<void> breakpoint <string>)
        ```
        If breakpoints are enabled, pause execution when this statement is hit (displaying the given message).
    net_safe_raw: yes
  - slug: kill_active_scripts
    info:
      en: |-
        ```hsc
        (<void> kill_active_scripts)
        ```
        Terminates all currently running threads.
    net_safe_raw: unknown, assumed unsafe
  - slug: get_executing_running_thread
    info:
      en: |-
        ```hsc
        (<long> get_executing_running_thread)
        ```
        Retrieves the current executing thread index
    net_safe_raw: unknown, assumed unsafe
  - slug: kill_thread
    info:
      en: |-
        ```hsc
        (<void> kill_thread <long>)
        ```
        Kill the specified thread
    net_safe_raw: unknown, assumed unsafe
  - slug: script_started
    info:
      en: |-
        ```hsc
        (<boolean> script_started <string>)
        ```
        Returns true if the continuous, dormant or startup script was started.
    net_safe_raw: yes
  - slug: script_finished
    info:
      en: |-
        ```hsc
        (<boolean> script_finished <string>)
        ```
        Returns true if the continuous, dormant or startup script was finished.
    net_safe_raw: yes
  - slug: players
    info:
      en: |-
        ```hsc
        (<object_list> players)
        ```
        returns a list of the players (DO NOT USE TO COUNT PLAYERS IN COOP GAME, USE game_coop_player_count)
    net_safe_raw: yes
  - slug: player_get
    info:
      en: |-
        ```hsc
        (<unit> player_get <long>)
        ```
        Get a player by absolute index
    net_safe_raw: unknown, assumed unsafe
  - slug: kill_volume_enable
    info:
      en: |-
        ```hsc
        (<void> kill_volume_enable <trigger_volume>)
        ```
        enables a kill volume
    net_safe_raw: yes
  - slug: kill_volume_disable
    info:
      en: |-
        ```hsc
        (<void> kill_volume_disable <trigger_volume>)
        ```
        disables a kill volume
    net_safe_raw: yes
  - slug: volume_teleport_players_not_inside
    info:
      en: |-
        ```hsc
        (<void> volume_teleport_players_not_inside <trigger_volume> <cutscene_flag>)
        ```
        moves all players outside a specified trigger volume to a specified flag.
    net_safe_raw: yes
  - slug: volume_test_object
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_object <trigger_volume> <object>)
        ```
        returns true if the specified object is within the specified volume.
    net_safe_raw: yes
  - slug: volume_test_objects
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_objects <trigger_volume> <object_list>)
        ```
        returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed
    net_safe_raw: yes
  - slug: volume_test_objects_all
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_objects_all <trigger_volume> <object_list>)
        ```
        returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed
    net_safe_raw: yes
  - slug: volume_test_players
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_players <trigger_volume>)
        ```
        returns true if any players are within the specified volume. trigger volume must have been postprocessed
    net_safe_raw: yes
  - slug: volume_test_players_all
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_players_all <trigger_volume>)
        ```
        returns true if all players are within the specified volume. trigger volume must have been postprocessed
    net_safe_raw: yes
  - slug: volume_return_objects
    info:
      en: |-
        ```hsc
        (<object_list> volume_return_objects <trigger_volume>)
        ```
        returns list of objects in volume or (max 128).
    net_safe_raw: yes
  - slug: volume_return_objects_by_type
    info:
      en: |-
        ```hsc
        (<object_list> volume_return_objects_by_type <trigger_volume> <long>)
        ```
        returns list of objects in volume or (max 128).
    net_safe_raw: yes
  - slug: zone_set_trigger_volume_enable
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> zone_set_trigger_volume_enable <string_id> <boolean>)
        ```
        enables/disables the trigger volume(s) with the given name that cause zone set switches
    net_safe_raw: yes
  - slug: list_get
    info:
      en: |-
        ```hsc
        (<object> list_get <object_list> <short>)
        ```
        returns an item in an object list.
    net_safe_raw: yes
  - slug: list_count
    info:
      en: |-
        ```hsc
        (<short> list_count <object_list>)
        ```
        returns the number of objects in a list
    net_safe_raw: yes
  - slug: list_count_not_dead
    info:
      en: |-
        ```hsc
        (<short> list_count_not_dead <object_list>)
        ```
        returns the number of objects in a list that aren't dead
    net_safe_raw: yes
  - slug: effect_new
    info:
      en: |-
        ```hsc
        (<void> effect_new <effect> <cutscene_flag>)
        ```
        starts the specified effect at the specified flag.
    net_safe_raw: no
  - slug: effect_new_random
    info:
      en: |-
        ```hsc
        (<void> effect_new_random <effect> <point_reference>)
        ```
        starts the specified effect at one of the points in the given a point set.
    net_safe_raw: no
  - slug: effect_new_at_ai_point
    info:
      en: |-
        ```hsc
        (<void> effect_new_at_ai_point <effect> <point_reference>)
        ```
        starts the specified effect at the specified ai point.
    net_safe_raw: no
  - slug: effect_new_on_object_marker
    info:
      en: |-
        ```hsc
        (<void> effect_new_on_object_marker <effect> <object> <string_id>)
        ```
        starts the specified effect on the specified object at the specified marker.
    net_safe_raw: no (partial support exists, no general solution)
  - slug: effect_new_on_ground
    info:
      en: |-
        ```hsc
        (<void> effect_new_on_ground <effect> <object>)
        ```
        starts the specified effect on the ground underneath the object's root.
    net_safe_raw: dunno
  - slug: damage_new
    info:
      en: |-
        ```hsc
        (<void> damage_new <damage> <cutscene_flag>)
        ```
        causes the specified damage at the specified flag.
    net_safe_raw: yes
  - slug: damage_object_effect
    info:
      en: |-
        ```hsc
        (<void> damage_object_effect <damage> <object>)
        ```
        causes the specified damage at the specified object.
    net_safe_raw: yes
  - slug: damage_objects_effect
    info:
      en: |-
        ```hsc
        (<void> damage_objects_effect <damage> <object_list>)
        ```
        causes the specified damage at the specified object list.
    net_safe_raw: yes
  - slug: damage_object
    info:
      en: |-
        ```hsc
        (<void> damage_object <object> <string_id> <real>)
        ```
        causes the specified damage at the specified object.
    net_safe_raw: yes
  - slug: damage_objects
    info:
      en: |-
        ```hsc
        (<void> damage_objects <object_list> <string_id> <real>)
        ```
        causes the specified damage at the specified object list.
    net_safe_raw: yes
  - slug: damage_players
    info:
      en: |-
        ```hsc
        (<void> damage_players <damage>)
        ```
        damages all players with the given damage effect
    net_safe_raw: yes
  - slug: soft_ceiling_enable
    info:
      en: |-
        ```hsc
        (<void> soft_ceiling_enable <string_id> <boolean>)
        ```
        turn on or off a soft ceiling
    net_safe_raw: yes
  - slug: object_create
    info:
      en: |-
        ```hsc
        (<void> object_create <object_name>)
        ```
        creates an object from the scenario.
    net_safe_raw: yes
  - slug: object_create_clone
    info:
      en: |-
        ```hsc
        (<void> object_create_clone <object_name>)
        ```
        creates an object, potentially resulting in multiple objects if it already exists.
    net_safe_raw: no
  - slug: object_create_anew
    info:
      en: |-
        ```hsc
        (<void> object_create_anew <object_name>)
        ```
        creates an object, destroying it first if it already exists.
    net_safe_raw: yes
  - slug: object_create_if_necessary
    info:
      en: |-
        ```hsc
        (<void> object_create_if_necessary <object_name>)
        ```
        creates an object if it doesn't already exists.
    net_safe_raw: yes
  - slug: object_create_containing
    info:
      en: |-
        ```hsc
        (<void> object_create_containing <string>)
        ```
        creates all objects from the scenario whose names contain the given substring.
    net_safe_raw: yes
  - slug: object_create_clone_containing
    info:
      en: |-
        ```hsc
        (<void> object_create_clone_containing <string>)
        ```
        creates clones for all objects from the scenario whose names contain the given substring.
    net_safe_raw: no
  - slug: object_create_anew_containing
    info:
      en: |-
        ```hsc
        (<void> object_create_anew_containing <string>)
        ```
        creates anew all objects from the scenario whose names contain the given substring.
    net_safe_raw: yes
  - slug: object_create_folder
    info:
      en: |-
        ```hsc
        (<void> object_create_folder <folder>)
        ```
        creates all the objects in the given folder
    net_safe_raw: yes
  - slug: object_create_folder_anew
    info:
      en: |-
        ```hsc
        (<void> object_create_folder_anew <folder>)
        ```
        creates all the objects in the given folder
    net_safe_raw: yes
  - slug: object_destroy
    info:
      en: |-
        ```hsc
        (<void> object_destroy <object>)
        ```
        destroys an object.
    net_safe_raw: yes
  - slug: object_destroy_containing
    info:
      en: |-
        ```hsc
        (<void> object_destroy_containing <string>)
        ```
        destroys all objects from the scenario whose names contain the given substring.
    net_safe_raw: yes
  - slug: object_destroy_all
    info:
      en: |-
        ```hsc
        (<void> object_destroy_all)
        ```
        destroys all non player objects.
    net_safe_raw: yes
  - slug: object_destroy_type_mask
    info:
      en: |-
        ```hsc
        (<void> object_destroy_type_mask <long>)
        ```
        destroys all objects matching the type mask
    net_safe_raw: yes
  - slug: objects_delete_by_definition
    info:
      en: |-
        ```hsc
        (<void> objects_delete_by_definition <object_definition>)
        ```
        deletes all objects of type <definition>
    net_safe_raw: yes
  - slug: object_destroy_folder
    info:
      en: |-
        ```hsc
        (<void> object_destroy_folder <folder>)
        ```
        destroys all objects in the given folder.
    net_safe_raw: yes
  - slug: object_hide
    info:
      en: |-
        ```hsc
        (<void> object_hide <object> <boolean>)
        ```
        hides or shows the object passed in
    net_safe_raw: no
  - slug: object_set_shadowless
    info:
      en: |-
        ```hsc
        (<void> object_set_shadowless <object> <boolean>)
        ```
        set/reset shadow castingness of object
    net_safe_raw: no
  - slug: object_buckling_magnitude_get
    info:
      en: |-
        ```hsc
        (<real> object_buckling_magnitude_get <object>)
        ```
        returns the amoount \[0-1\] that a scarab is buckling
    net_safe_raw: yes
  - slug: object_function_set
    info:
      en: |-
        ```hsc
        (<void> object_function_set <long> <real>)
        ```
        sets a global object function (0-3) to value
    net_safe_raw: unknown, assumed unsafe
  - slug: object_set_function_variable
    info:
      en: |-
        ```hsc
        (<void> object_set_function_variable <object> <string_id> <real> <real>)
        ```
        sets funciton variable for sin-o-matic use
    net_safe_raw: unknown, assumed unsafe
  - slug: object_clear_function_variable
    info:
      en: |-
        ```hsc
        (<void> object_clear_function_variable <object> <string_id>)
        ```
        clears one funciton variables for sin-o-matic use
    net_safe_raw: unknown, assumed unsafe
  - slug: object_clear_all_function_variables
    info:
      en: |-
        ```hsc
        (<void> object_clear_all_function_variables <object>)
        ```
        clears all funciton variables for sin-o-matic use
    net_safe_raw: unknown, assumed unsafe
  - slug: object_dynamic_simulation_disable
    info:
      en: |-
        ```hsc
        (<void> object_dynamic_simulation_disable <object> <boolean>)
        ```
        disabled dynamic simulation for this object (makes it fixed)
    net_safe_raw: unknown, assumed unsafe
  - slug: object_set_phantom_power
    info:
      en: |-
        ```hsc
        (<void> object_set_phantom_power <object> <boolean>)
        ```
        sets phantom power to be latched at 1.0f or 0.0f
    net_safe_raw: unknown, assumed unsafe
  - slug: object_wake_physics
    info:
      en: |-
        ```hsc
        (<void> object_wake_physics <object>)
        ```
        wakes physics of an object.  For example it would make an usupported crate fall
    net_safe_raw: no
  - slug: object_set_ranged_attack_inhibited
    info:
      en: |-
        ```hsc
        (<void> object_set_ranged_attack_inhibited <object> <boolean>)
        ```
        FALSE prevents object from using ranged attack
    net_safe_raw: yes (actors only)
  - slug: object_set_melee_attack_inhibited
    info:
      en: |-
        ```hsc
        (<void> object_set_melee_attack_inhibited <object> <boolean>)
        ```
        FALSE prevents object from using melee attack
    net_safe_raw: yes (actors only)
  - slug: objects_dump_memory
    info:
      en: |-
        ```hsc
        (<void> objects_dump_memory)
        ```
        debugs object memory usage
    net_safe_raw: unknown, assumed unsafe
  - slug: object_get_health
    info:
      en: |-
        ```hsc
        (<real> object_get_health <object>)
        ```
        returns the health \[0,1\] of the object, returns -1 if the object does not exist
    net_safe_raw: yes
  - slug: object_get_shield
    info:
      en: |-
        ```hsc
        (<real> object_get_shield <object>)
        ```
        returns the shield \[0,1\] of the object, returns -1 if the object does not exist
    net_safe_raw: yes
  - slug: object_set_shield_effect
    info:
      en: |-
        ```hsc
        (<void> object_set_shield_effect <object> <real> <real>)
        ```
        sets the shield response effect (not current shield amount) to a given value over the given number of seconds (cinematic use only, remember to call (object_set_shield_effect 0 0) after use!)
    net_safe_raw: no
  - slug: object_set_physics
    info:
      en: |-
        ```hsc
        (<void> object_set_physics <object> <boolean>)
        ```
        prevents an object from running physics or colliding with any other objects
    net_safe_raw: no
  - slug: object_get_parent
    info:
      en: |-
        ```hsc
        (<object> object_get_parent <object>)
        ```
        returns the parent of the given object
    net_safe_raw: yes
  - slug: objects_attach
    info:
      en: |-
        ```hsc
        (<void> objects_attach <object> <string_id> <object> <string_id>)
        ```
        attaches the second object to the first both strings can be empty
    net_safe_raw: no
  - slug: object_at_marker
    info:
      en: |-
        ```hsc
        (<object> object_at_marker <object> <string_id>)
        ```
        returns the object attached to the marker of the given parent object
    net_safe_raw: yes
  - slug: objects_detach
    info:
      en: |-
        ```hsc
        (<void> objects_detach <object> <object>)
        ```
        detaches from the given parent object the given child object
    net_safe_raw: no
  - slug: object_set_scale
    info:
      en: |-
        ```hsc
        (<void> object_set_scale <object> <real> <short>)
        ```
        sets the scale for a given object and interpolates over the given number of frames to achieve that scale
    net_safe_raw: no
  - slug: object_set_velocity
    info:
      en: |-
        ```hsc
        (<void> object_set_velocity <object> <real>)
        ```
        Sets the (object-relative) forward velocity of the given object
    net_safe_raw: yes
  - slug: object_set_inertia_tensor_scale
    info:
      en: |-
        ```hsc
        (<void> object_set_inertia_tensor_scale <object> <real>)
        ```
        0==default of 1.0, otherwise it is scale on this objects inertia tensor
    net_safe_raw: yes
  - slug: object_set_collision_damage_armor_scale
    info:
      en: |-
        ```hsc
        (<void> object_set_collision_damage_armor_scale <object> <real>)
        ```
        0==default of 1.0, otherwise it is scale on how this objects takes collisoin damage, >1 == more protection, <1 == less
    net_safe_raw: yes
  - slug: object_set_velocity
    info:
      en: |-
        ```hsc
        (<void> object_set_velocity <object> <real> <real> <real>)
        ```
        Sets the (object-relative) velocity of the given object
    net_safe_raw: yes
  - slug: object_set_deleted_when_deactivated
    info:
      en: |-
        ```hsc
        (<void> object_set_deleted_when_deactivated <object>)
        ```
        when this object deactivates it will be deleted
    net_safe_raw: yes
  - slug: object_copy_player_appearance
    info:
      en: |-
        ```hsc
        (<void> object_copy_player_appearance <object> <long>)
        ```
        copy appearance into object from player n (starts counting from 0)
    net_safe_raw: unknown, assumed unsafe
  - slug: object_model_target_destroyed
    info:
      en: |-
        ```hsc
        (<boolean> object_model_target_destroyed <object> <string_id>)
        ```
        returns TRUE if the specified model target is destroyed
    net_safe_raw: unknown, assumed unsafe
  - slug: object_model_targets_destroyed
    info:
      en: |-
        ```hsc
        (<short> object_model_targets_destroyed <object> <string_id>)
        ```
        returns TRUE if the specified model target is destroyed
    net_safe_raw: unknown, assumed unsafe
  - slug: object_damage_damage_section
    info:
      en: |-
        ```hsc
        (<void> object_damage_damage_section <object> <string_id> <real>)
        ```
        applies damage to a damage section, causing all manner of effects/constraint breakage to occur
    net_safe_raw: yes
  - slug: object_cannot_die
    info:
      en: |-
        ```hsc
        (<void> object_cannot_die <object> <boolean>)
        ```
        Set whether the object can die from damage or not (as opposed to by scripting)
    net_safe_raw: yes
  - slug: object_vitality_pinned
    info:
      en: |-
        ```hsc
        (<boolean> object_vitality_pinned <object>)
        ```
        returns TRUE if the object's vitality is currently pinned at some minimum value because it cannot die.
    net_safe_raw: yes
  - slug: garbage_collect_now
    info:
      en: |-
        ```hsc
        (<void> garbage_collect_now)
        ```
        causes all garbage objects except those visible to a player to be collected immediately
    net_safe_raw: unknown, assumed unsafe
  - slug: garbage_collect_unsafe
    info:
      en: |-
        ```hsc
        (<void> garbage_collect_unsafe)
        ```
        forces all garbage objects to be collected immediately, even those visible to a player (dangerous!)
    net_safe_raw: unknown, assumed unsafe
  - slug: garbage_collect_multiplayer
    info:
      en: |-
        ```hsc
        (<void> garbage_collect_multiplayer)
        ```
        runs multiplayer garbage collection
    net_safe_raw: unknown, assumed unsafe
  - slug: object_cannot_take_damage
    info:
      en: |-
        ```hsc
        (<void> object_cannot_take_damage <object_list>)
        ```
        prevents an object from taking damage
    net_safe_raw: unknown, assumed unsafe
  - slug: object_can_take_damage
    info:
      en: |-
        ```hsc
        (<void> object_can_take_damage <object_list>)
        ```
        allows an object to take damage again
    net_safe_raw: unknown, assumed unsafe
  - slug: object_cinematic_lod
    info:
      en: |-
        ```hsc
        (<void> object_cinematic_lod <object> <boolean>)
        ```
        makes an object use the highest lod for the remainder of the levels' cutscenes.
    net_safe_raw: unknown, assumed unsafe
  - slug: object_cinematic_collision
    info:
      en: |-
        ```hsc
        (<void> object_cinematic_collision <object> <boolean>)
        ```
        makes an object not collide with other cinematic collision objects.
    net_safe_raw: unknown, assumed unsafe
  - slug: object_cinematic_visibility
    info:
      en: |-
        ```hsc
        (<void> object_cinematic_visibility <object> <boolean>)
        ```
        makes an object bypass visibility and always render during cinematics.
    net_safe_raw: unknown, assumed unsafe
  - slug: objects_predict
    info:
      en: |-
        ```hsc
        (<void> objects_predict <object_list>)
        ```
        loads textures/geometry/sounds necessary to present objects that are about to come on-screen
    net_safe_raw: unknown, assumed unsafe
  - slug: objects_predict_high
    info:
      en: |-
        ```hsc
        (<void> objects_predict_high <object_list>)
        ```
        loads textures/geometry/sounds necessary to present objects that are about to come on-screen
    net_safe_raw: unknown, assumed unsafe
  - slug: objects_predict_low
    info:
      en: |-
        ```hsc
        (<void> objects_predict_low <object_list>)
        ```
        loads textures/geometry/sounds necessary to present objects that are about to come on-screen
    net_safe_raw: unknown, assumed unsafe
  - slug: object_type_predict_high
    info:
      en: |-
        ```hsc
        (<void> object_type_predict_high <object_definition>)
        ```
        loads textures necessary to draw an object that's about to come on-screen.
    net_safe_raw: unknown, assumed unsafe
  - slug: object_type_predict_low
    info:
      en: |-
        ```hsc
        (<void> object_type_predict_low <object_definition>)
        ```
        loads textures necessary to draw an object that's about to come on-screen.
    net_safe_raw: unknown, assumed unsafe
  - slug: object_type_predict
    info:
      en: |-
        ```hsc
        (<void> object_type_predict <object_definition>)
        ```
        loads textures necessary to draw an object that's about to come on-screen.
    net_safe_raw: unknown, assumed unsafe
  - slug: object_teleport
    info:
      en: |-
        ```hsc
        (<void> object_teleport <object> <cutscene_flag>)
        ```
        moves the specified object to the specified flag.
    net_safe_raw: unknown, assumed unsafe
  - slug: object_teleport_to_ai_point
    info:
      en: |-
        ```hsc
        (<void> object_teleport_to_ai_point <object> <point_reference>)
        ```
        moves the specified object to the specified ai point.
    net_safe_raw: unknown, assumed unsafe
  - slug: object_set_facing
    info:
      en: |-
        ```hsc
        (<void> object_set_facing <object> <cutscene_flag>)
        ```
        turns the specified object in the direction of the specified flag.
    net_safe_raw: unknown, assumed unsafe
  - slug: object_set_shield
    info:
      en: |-
        ```hsc
        (<void> object_set_shield <object> <real>)
        ```
        sets the shield vitality of the specified object (between 0 and 1).
    net_safe_raw: no
  - slug: object_set_shield_stun
    info:
      en: |-
        ```hsc
        (<void> object_set_shield_stun <object> <real>)
        ```
        set how long the shield will be stunned for, 0 is unstunned
    net_safe_raw: no
  - slug: object_set_shield_stun_infinite
    info:
      en: |-
        ```hsc
        (<void> object_set_shield_stun_infinite <object>)
        ```
        make this objects shield be stunned permanently
    net_safe_raw: no
  - slug: object_set_permutation
    info:
      en: |-
        ```hsc
        (<void> object_set_permutation <object> <string_id> <string_id>)
        ```
        sets the desired region (use "" for all regions) to the permutation with the given name, e.g. (object_set_permutation flood "right arm" ~damaged)
    net_safe_raw: no
  - slug: object_set_variant
    info:
      en: |-
        ```hsc
        (<void> object_set_variant <object> <string_id>)
        ```
        sets the specified object to the specified model variant
    net_safe_raw: no
  - slug: object_set_region_state
    info:
      en: |-
        ```hsc
        (<void> object_set_region_state <object> <string_id> <model_state>)
        ```
        sets the desired region (use "" for all regions) to the model state with the given name, e.g. (object_set_region_state marine head destroyed)
    net_safe_raw: no
  - slug: objects_can_see_object
    info:
      en: |-
        ```hsc
        (<boolean> objects_can_see_object <object_list> <object> <real>)
        ```
        returns true if any of the specified units are looking within the specified number of degrees of the object.
    net_safe_raw: yes
  - slug: objects_can_see_flag
    info:
      en: |-
        ```hsc
        (<boolean> objects_can_see_flag <object_list> <cutscene_flag> <real>)
        ```
        returns true if any of the specified units are looking within the specified number of degrees of the flag.
    net_safe_raw: yes
  - slug: objects_distance_to_object
    info:
      en: |-
        ```hsc
        (<real> objects_distance_to_object <object_list> <object>)
        ```
        returns minimum distance from any of the specified objects to the specified destination object. (returns -1 if there are no objects to check)
    net_safe_raw: yes
  - slug: objects_distance_to_flag
    info:
      en: |-
        ```hsc
        (<real> objects_distance_to_flag <object_list> <cutscene_flag>)
        ```
        returns minimum distance from any of the specified objects to the specified flag. (returns -1 if there are no objects, or no flag, to check)
    net_safe_raw: yes
  - slug: map_info
    info:
      en: |-
        ```hsc
        (<void> map_info)
        ```
        prints the map, zone set, active bsps, and current bsp
  - slug: position_predict
    info:
      en: |-
        ```hsc
        (<void> position_predict <real> <real> <real>)
        ```
        in: x, y, z position. loads textures/geometry/sounds necessary to present locations that are about to come on-screen.
    net_safe_raw: unknown, assumed unsafe
  - slug: shader_predict
    info:
      en: |-
        ```hsc
        (<void> shader_predict <shader>)
        ```
        in: shader name. loads textures necessary for a shader.
    net_safe_raw: unknown, assumed unsafe
  - slug: bitmap_predict
    info:
      en: |-
        ```hsc
        (<void> bitmap_predict <bitmap>)
        ```
        in: bitmap name. loads all the bitmaps in that bitmap group
    net_safe_raw: unknown, assumed unsafe
  - slug: script_recompile
    info:
      en: |-
        ```hsc
        (<void> script_recompile)
        ```
        recompiles scripts.
    net_safe_raw: unknown, assumed unsafe
  - slug: script_doc
    info:
      en: |-
        ```hsc
        (<void> script_doc)
        ```
        saves a file called hs_doc.txt with parameters for all script commands.
    net_safe_raw: unknown, assumed unsafe
  - slug: help
    info:
      en: |-
        ```hsc
        (<void> help <string>)
        ```
        prints a description of the named function.
    net_safe_raw: unknown, assumed unsafe
  - slug: game_engine_objects
    info:
      en: |-
        ```hsc
        (<object_list> game_engine_objects)
        ```
        returns a list of the special game engine objects
    net_safe_raw: unknown, assumed unsafe
  - slug: random_range
    info:
      en: |-
        ```hsc
        (<short> random_range <short> <short>)
        ```
        returns a random value in the range \[lower bound, upper bound)
    net_safe_raw: unknown, assumed unsafe
  - slug: real_random_range
    info:
      en: |-
        ```hsc
        (<real> real_random_range <real> <real>)
        ```
        returns a random value in the range \[lower bound, upper bound)
    net_safe_raw: unknown, assumed unsafe
  - slug: physics_constants_reset
    info:
      en: |-
        ```hsc
        (<void> physics_constants_reset)
        ```
        resets all physics constants to earthly values
    net_safe_raw: unknown, assumed unsafe
  - slug: physics_set_gravity
    info:
      en: |-
        ```hsc
        (<void> physics_set_gravity <real>)
        ```
        set global gravity acceleration relative to halo standard gravity
    net_safe_raw: unknown, assumed unsafe
  - slug: physics_set_velocity_frame
    info:
      en: |-
        ```hsc
        (<void> physics_set_velocity_frame <real> <real> <real>)
        ```
        sets a local frame of motion for updating physics of things that wish to respect it
    net_safe_raw: unknown, assumed unsafe
  - slug: physics_disable_character_ground_adhesion_forces
    info:
      en: |-
        ```hsc
        (<void> physics_disable_character_ground_adhesion_forces <real>)
        ```
        turn off ground adhesion forces so you can play tricks with gravity
    net_safe_raw: unknown, assumed unsafe
  - slug: havok_debug_start
    info:
      en: |-
        ```hsc
        (<void> havok_debug_start)
        ```
        start up the havok visual debugger
    net_safe_raw: unknown, assumed unsafe
  - slug: havok_dump_world
    info:
      en: |-
        ```hsc
        (<void> havok_dump_world <string> <boolean>)
        ```
        dump the state of the havok world, with our without a movie
    net_safe_raw: unknown, assumed unsafe
  - slug: havok_dump_world_close_movie
    info:
      en: |-
        ```hsc
        (<void> havok_dump_world_close_movie)
        ```
        end the capture of a havok dump movie
    net_safe_raw: unknown, assumed unsafe
  - slug: havok_profile_start
    info:
      en: |-
        ```hsc
        (<void> havok_profile_start)
        ```
        start profiling havok
    net_safe_raw: unknown, assumed unsafe
  - slug: havok_profile_stop
    info:
      en: |-
        ```hsc
        (<void> havok_profile_stop)
        ```
        stop profiling havok, and save the results
    net_safe_raw: unknown, assumed unsafe
  - slug: havok_profile_range
    info:
      en: |-
        ```hsc
        (<void> havok_profile_range <long> <long>)
        ```
        captures timers and a movie of a specific tick range
    net_safe_raw: unknown, assumed unsafe
  - slug: havok_reset_allocated_state
    info:
      en: |-
        ```hsc
        (<void> havok_reset_allocated_state)
        ```
        strips down and builds back up all allocated havok memory
    net_safe_raw: unknown, assumed unsafe
  - slug: breakable_surfaces_enable
    info:
      en: |-
        ```hsc
        (<void> breakable_surfaces_enable <boolean>)
        ```
        enables or disables breakability of all breakable surfaces on level
    net_safe_raw: yes
  - slug: breakable_surfaces_reset
    info:
      en: |-
        ```hsc
        (<void> breakable_surfaces_reset)
        ```
        restores all breakable surfaces
    net_safe_raw: no
  - slug: recording_play
    info:
      en: |-
        ```hsc
        (<boolean> recording_play <unit> <cutscene_recording>)
        ```
        make the specified unit run the specified cutscene recording.
    net_safe_raw: unknown, assumed unsafe
  - slug: recording_play_and_delete
    info:
      en: |-
        ```hsc
        (<boolean> recording_play_and_delete <unit> <cutscene_recording>)
        ```
        make the specified unit run the specified cutscene recording, deletes the unit when the animation finishes.
    net_safe_raw: unknown, assumed unsafe
  - slug: recording_play_and_hover
    info:
      en: |-
        ```hsc
        (<boolean> recording_play_and_hover <vehicle> <cutscene_recording>)
        ```
        make the specified vehicle run the specified cutscene recording, hovers the vehicle when the animation finishes.
    net_safe_raw: unknown, assumed unsafe
  - slug: recording_kill
    info:
      en: |-
        ```hsc
        (<void> recording_kill <unit>)
        ```
        kill the specified unit's cutscene recording.
    net_safe_raw: unknown, assumed unsafe
  - slug: recording_time
    info:
      en: |-
        ```hsc
        (<short> recording_time <unit>)
        ```
        return the time remaining in the specified unit's cutscene recording.
    net_safe_raw: unknown, assumed unsafe
  - slug: render_lights
    info:
      en: |-
        ```hsc
        (<boolean> render_lights <boolean>)
        ```
        enables/disables dynamic lights
    net_safe_raw: unknown, assumed unsafe
  - slug: print_light_state
    info:
      en: |-
        ```hsc
        (<void> print_light_state)
        ```
        outputs text light state
    net_safe_raw: yes
  - slug: render_lights_enable_cinematic_shadow
    info:
      en: |-
        ```hsc
        (<void> render_lights_enable_cinematic_shadow <boolean> <object> <string_id> <real>)
        ```
        enable/disable the specified unit to receive cinematic shadows where the shadow is focused about a radius around a marker name
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_camera_set_object_marker
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_object_marker <object> <string_id> <real>)
        ```
        sets the render texture camera to a given object marker
  - slug: texture_camera_set_position
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_position <real> <real> <real>)
        ```
        sets the render texture camera position
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_camera_set_target
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_target <real> <real> <real>)
        ```
        sets the render texture camera target
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_camera_attach_to_object
    info:
      en: |-
        ```hsc
        (<void> texture_camera_attach_to_object <object> <string_id>)
        ```
        attaches the render texture camera to a given object marker
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_camera_target_object
    info:
      en: |-
        ```hsc
        (<void> texture_camera_target_object <object> <string_id>)
        ```
        targets the render texture camera to view a given object marker
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_camera_position_world_offset
    info:
      en: |-
        ```hsc
        (<void> texture_camera_position_world_offset <real> <real> <real>)
        ```
        adds a worldspace offset to the current texture camera position
  - slug: texture_camera_on
    info:
      en: |-
        ```hsc
        (<void> texture_camera_on)
        ```
        turns on the render texture camera
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_camera_bink
    info:
      en: |-
        ```hsc
        (<void> texture_camera_bink)
        ```
        turns on the render texture camera and renders a bink to it
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_camera_off
    info:
      en: |-
        ```hsc
        (<void> texture_camera_off)
        ```
        turns off the render texture camera
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_camera_set_aspect_ratio
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_aspect_ratio <real>)
        ```
        sets the texture camera aspet ratio
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_camera_set_resolution
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_resolution <long> <long>)
        ```
        sets the texture camera render resolution
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_camera_render_mode
    info:
      en: |-
        ```hsc
        (<void> texture_camera_render_mode <long>)
        ```
        switches the texture camera render mode
  - slug: texture_camera_set_fov
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_fov <real>)
        ```
        sets the field of view on the texture camera, in degrees
  - slug: texture_camera_set_fov_frame_target
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_fov_frame_target <real>)
        ```
        zooms the field of view to frame the target, with target zoom factor to zoom closer
  - slug: texture_camera_enable_dynamic_lights
    info:
      en: |-
        ```hsc
        (<void> texture_camera_enable_dynamic_lights <boolean>)
        ```
        toggle rendering of dynamic lights in the texture camera
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_texture_camera
    info:
      en: |-
        ```hsc
        (<void> render_debug_texture_camera <boolean>)
        ```
        toggles displaying the texture camera in the corner of the screen
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_structure_cluster
    info:
      en: |-
        ```hsc
        (<void> debug_structure_cluster <long> <long>)
        ```
        specify a structure and cluster to debug
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_cluster_fog
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_cluster_fog <long>)
        ```
        enables cluster fog debugging
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_fog_plane
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_plane <long>)
        ```
        enables fog plane debugging
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_fog_plane_infinite_extent
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_plane_infinite_extent <long>)
        ```
        enables fog plane debugging
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_fog_zone
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_zone <long>)
        ```
        enabled fog zone debugging
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_fog_zone_floodfill
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_zone_floodfill <long>)
        ```
        enables fog zone debugging
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_all_fog_planes
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_all_fog_planes <boolean>)
        ```
        enables fog plane debugging (all)
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_all_cluster_errors
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_all_cluster_errors <boolean>)
        ```
        enables cluster error debugging (all)
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_line_opacity
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_line_opacity <real> <real> <real> <real>)
        ```
        sets the opacity (0 is default)
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_text_opacity
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_text_opacity <real> <real> <real> <real>)
        ```
        sets the opacity (0 is default)
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_opacity
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_opacity <real> <real> <real> <real>)
        ```
        sets the opacity (0 is default)
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_non_occluded_fog_planes
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_non_occluded_fog_planes <boolean>)
        ```
        controls non-occluded fog plane debugging
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_lightmaps_use_pervertex
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_lightmaps_use_pervertex)
        ```
        sets the lightmap preference to per-vertex, ignores per-pixel if available
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_lightmaps_use_reset
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_lightmaps_use_reset)
        ```
        resets the lightmap preference setting and updates the internal lightmap bsp data if necessary
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_lightmaps_sample_enable
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_lightmaps_sample_enable)
        ```
        enables visualization of match samples if available
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_structure_lightmaps_sample_disable
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_lightmaps_sample_disable)
        ```
        disables visualization of match samples
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_query_object_bitmaps
    info:
      en: |-
        ```hsc
        (<void> render_debug_query_object_bitmaps <string>)
        ```
        substring of object definition name to spew out it's debug usage
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_query_bsp_resources
    info:
      en: |-
        ```hsc
        (<void> render_debug_query_bsp_resources <long> <boolean>)
        ```
        BSP index and whether to spit out all bitmaps used
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_query_all_object_resources
    info:
      en: |-
        ```hsc
        (<void> render_debug_query_all_object_resources)
        ```
        Outputs text of texture and geometry memory usage
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_query_d3d_resources
    info:
      en: |-
        ```hsc
        (<void> render_debug_query_d3d_resources)
        ```
        Outputs text of d3d resource usage
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_text_using_simple_font
    info:
      en: |-
        ```hsc
        (<void> render_debug_text_using_simple_font <boolean>)
        ```
        toggles use of the much faster simple_font system for debug text rendering
  - slug: render_postprocess_color_tweaking_reset
    info:
      en: |-
        ```hsc
        (<void> render_postprocess_color_tweaking_reset)
        ```
        resets hue saturation filters to default
    net_safe_raw: unknown, assumed unsafe
  - slug: scenery_animation_start
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start <scenery> <animation_graph> <string_id>)
        ```
        starts a custom animation playing on a piece of scenery
    net_safe_raw: unknown, assumed unsafe
  - slug: scenery_animation_start_loop
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_loop <scenery> <animation_graph> <string_id>)
        ```
        starts a custom looping animation playing on a piece of scenery
    net_safe_raw: unknown, assumed unsafe
  - slug: scenery_animation_start_relative
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_relative <scenery> <animation_graph> <string_id> <object>)
        ```
        starts a custom animation playing on a piece of scenery relative to a parent object
    net_safe_raw: unknown, assumed unsafe
  - slug: scenery_animation_start_relative_loop
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_relative_loop <scenery> <animation_graph> <string_id> <object>)
        ```
        starts a custom looping animation playing on a piece of scenery relative to a parent object
    net_safe_raw: unknown, assumed unsafe
  - slug: scenery_animation_start_at_frame
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_at_frame <scenery> <animation_graph> <string_id> <short>)
        ```
        starts a custom animation playing on a piece of scenery at a specific frame
    net_safe_raw: unknown, assumed unsafe
  - slug: scenery_animation_start_relative_at_frame
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_relative_at_frame <scenery> <animation_graph> <string_id> <object> <short>)
        ```
        starts a custom animation playing on a piece of scenery relative to a specific cutscene flag at a specific frame
    net_safe_raw: unknown, assumed unsafe
  - slug: scenery_animation_idle
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_idle <scenery>)
        ```
        starts the idle animation (if any) for a piece of scenery
    net_safe_raw: unknown, assumed unsafe
  - slug: scenery_get_animation_time
    info:
      en: |-
        ```hsc
        (<short> scenery_get_animation_time <scenery>)
        ```
        returns the number of ticks remaining in a custom animation (or zero, if the animation is over).
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_can_blink
    info:
      en: |-
        ```hsc
        (<void> unit_can_blink <unit> <boolean>)
        ```
        allows a unit to blink or not (units never blink when they are dead)
    net_safe_raw: no
  - slug: unit_set_active_camo
    info:
      en: |-
        ```hsc
        (<void> unit_set_active_camo <unit> <boolean> <real>)
        ```
        enable or disable active camo for the given unit over the specified number of seconds
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_open
    info:
      en: |-
        ```hsc
        (<void> unit_open <unit>)
        ```
        opens the hatches on the given unit
    net_safe_raw: no
  - slug: unit_close
    info:
      en: |-
        ```hsc
        (<void> unit_close <unit>)
        ```
        closes the hatches on a given unit
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_kill
    info:
      en: |-
        ```hsc
        (<void> unit_kill <unit>)
        ```
        kills a given unit, no saving throw
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_kill_silent
    info:
      en: |-
        ```hsc
        (<void> unit_kill_silent <unit>)
        ```
        kills a given unit silently (doesn't make them play their normal death animation or sound)
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_is_emitting
    info:
      en: |-
        ```hsc
        (<boolean> unit_is_emitting <unit>)
        ```
        returns whether or not the given unit is current emitting an ai
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_get_custom_animation_time
    info:
      en: |-
        ```hsc
        (<short> unit_get_custom_animation_time <unit>)
        ```
        returns the number of ticks remaining in a unit's custom animation (or zero, if the animation is over).
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_stop_custom_animation
    info:
      en: |-
        ```hsc
        (<void> unit_stop_custom_animation <unit>)
        ```
        stops the custom animation running on the given unit.
    net_safe_raw: unknown, assumed unsafe
  - slug: custom_animation
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation <unit> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: custom_animation_loop
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_loop <unit> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: custom_animation_relative
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_relative <unit> <animation_graph> <string_id> <boolean> <object>)
        ```
        starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: custom_animation_relative_loop
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_relative_loop <unit> <animation_graph> <string_id> <boolean> <object>)
        ```
        starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: custom_animation_list
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_list <object_list> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on a unit list (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_custom_animation_at_frame
    info:
      en: |-
        ```hsc
        (<boolean> unit_custom_animation_at_frame <unit> <animation_graph> <string_id> <boolean> <short>)
        ```
        starts a custom animation playing on a unit at a specific frame index(interpolates into animation if next to last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_custom_animation_relative_at_frame
    info:
      en: |-
        ```hsc
        (<boolean> unit_custom_animation_relative_at_frame <unit> <animation_graph> <string_id> <string_id> <boolean> <short>)
        ```
        starts a custom animation playing on a unit relative to a specific cutscene flag at a specific frame index(interpolates into animation if next to last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_is_playing_custom_animation
    info:
      en: |-
        ```hsc
        (<boolean> unit_is_playing_custom_animation <unit>)
        ```
        returns TRUE if the given unit is still playing a custom animation
    net_safe_raw: unknown, assumed unsafe
  - slug: object_set_custom_animations_hold_on_last_frame
    info:
      en: |-
        ```hsc
        (<void> object_set_custom_animations_hold_on_last_frame <boolean>)
        ```
        changes the default behavior for custom animations
    net_safe_raw: unknown, assumed unsafe
  - slug: object_set_custom_animations_prevent_lipsync_head_movement
    info:
      en: |-
        ```hsc
        (<void> object_set_custom_animations_prevent_lipsync_head_movement <boolean>)
        ```
        when true, prevents lipsync from bobbing the head during custom animations. default is true.
    net_safe_raw: unknown, assumed unsafe
  - slug: preferred_animation_list_add
    info:
      en: |-
        ```hsc
        (<boolean> preferred_animation_list_add <object> <string_id>)
        ```
        adds an animation into the 'preferred list' of animations
    net_safe_raw: unknown, assumed unsafe
  - slug: preferred_animation_list_clear
    info:
      en: |-
        ```hsc
        (<void> preferred_animation_list_clear)
        ```
        clears the 'preferred list' of animations
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_set_actively_controlled
    info:
      en: |-
        ```hsc
        (<void> unit_set_actively_controlled <unit> <boolean>)
        ```
        sets unit's actively controlled flag
    net_safe_raw: no
  - slug: unit_get_team_index
    info:
      en: |-
        ```hsc
        (<short> unit_get_team_index <unit>)
        ```
        returns the team index of the unit, returns -1 if the unit does not have a team
    net_safe_raw: yes
  - slug: unit_aim_without_turning
    info:
      en: |-
        ```hsc
        (<void> unit_aim_without_turning <unit> <boolean>)
        ```
        allows a unit to aim in place without turning
    net_safe_raw: yes
  - slug: unit_set_enterable_by_player
    info:
      en: |-
        ```hsc
        (<void> unit_set_enterable_by_player <unit> <boolean>)
        ```
        can be used to prevent the player from entering a vehicle
    net_safe_raw: yes
  - slug: unit_get_enterable_by_player
    info:
      en: |-
        ```hsc
        (<boolean> unit_get_enterable_by_player <unit>)
        ```
        returns true if a player may enter the vehicle
    net_safe_raw: yes
  - slug: unit_only_takes_damage_from_players_team
    info:
      en: |-
        ```hsc
        (<void> unit_only_takes_damage_from_players_team <unit> <boolean>)
        ```
        used for the tartarus boss fight
    net_safe_raw: no
  - slug: unit_enter_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_enter_vehicle <unit> <vehicle> <string_id>)
        ```
        puts the specified unit in the specified vehicle (in the named seat)
    net_safe_raw: yes (w/o animation on clients)
  - slug: unit_falling_damage_disable
    info:
      en: |-
        ```hsc
        (<void> unit_falling_damage_disable <unit> <boolean>)
        ```
        disables falling damage on unit
  - slug: object_get_turret_count
    info:
      en: |-
        ```hsc
        (<short> object_get_turret_count <object>)
        ```
        returns the number of turrets attached to the given object
    net_safe_raw: unknown, assumed unsafe
  - slug: object_get_turret
    info:
      en: |-
        ```hsc
        (<vehicle> object_get_turret <object> <short>)
        ```
        returns the nth turret attached to the given object
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_board_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_board_vehicle <unit> <string_id>)
        ```
        Causes the given unit to attempt to board the named seat
    net_safe_raw: yes
  - slug: unit_set_emotion
    info:
      en: |-
        ```hsc
        (<void> unit_set_emotion <unit> <long> <real> <real>)
        ```
        sets a unit's facial expression (-1 is none, other values depend on unit)
    net_safe_raw: no
  - slug: unit_set_emotion_by_name
    info:
      en: |-
        ```hsc
        (<void> unit_set_emotion_by_name <unit> <string_id> <real> <real>)
        ```
        sets a unit's facial expression by name with weight and transition time
    net_safe_raw: no
  - slug: unit_enable_eye_tracking
    info:
      en: |-
        ```hsc
        (<void> unit_enable_eye_tracking <unit> <boolean>)
        ```
        enable/disable eye aiming on a unit
    net_safe_raw: no
  - slug: unit_set_integrated_flashlight
    info:
      en: |-
        ```hsc
        (<void> unit_set_integrated_flashlight <unit> <boolean>)
        ```
        sets a unit's flashlight on or off
    net_safe_raw: no
  - slug: unit_set_voice
    info:
      en: |-
        ```hsc
        (<void> unit_set_voice <unit> <any tag>)
        ```
        set the dialogue for the given unit
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_in_vehicle
    info:
      en: |-
        ```hsc
        (<boolean> unit_in_vehicle <unit>)
        ```
        returns true if the given unit is seated on a parent unit
    net_safe_raw: unknown, assumed unsafe
  - slug: vehicle_test_seat_list
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_test_seat_list <vehicle> <string_id> <object_list>)
        ```
        tests whether the named seat has an object in the object list (use "" to test all seats for any unit in the list)
    net_safe_raw: unknown, assumed unsafe
  - slug: vehicle_test_seat
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_test_seat <vehicle> <string_id> <unit>)
        ```
        tests whether the named seat has a specified unit in it (use "" to test all seats for this unit)
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_set_prefer_tight_camera_track
    info:
      en: |-
        ```hsc
        (<void> unit_set_prefer_tight_camera_track <unit> <boolean>)
        ```
        sets the unit to prefer a tight camera track
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_exit_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_exit_vehicle <unit>)
        ```
        makes a unit exit its vehicle
    net_safe_raw: yes (w/o client animation)
  - slug: unit_exit_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_exit_vehicle <unit> <short>)
        ```
        makes a unit exit its vehicle (0 = normal exit to airborne, 1 = ejection, 2 = ejection + death, 3 = exit to ground)
    net_safe_raw: yes (w/o client animation)
  - slug: unit_set_maximum_vitality
    info:
      en: |-
        ```hsc
        (<void> unit_set_maximum_vitality <unit> <real> <real>)
        ```
        sets a unit's maximum body and shield vitality
    net_safe_raw: unknown, assumed unsafe
  - slug: units_set_maximum_vitality
    info:
      en: |-
        ```hsc
        (<void> units_set_maximum_vitality <object_list> <real> <real>)
        ```
        sets a group of units' maximum body and shield vitality
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_set_current_vitality
    info:
      en: |-
        ```hsc
        (<void> unit_set_current_vitality <unit> <real> <real>)
        ```
        sets a unit's current body and shield vitality
    net_safe_raw: unknown, assumed unsafe
  - slug: units_set_current_vitality
    info:
      en: |-
        ```hsc
        (<void> units_set_current_vitality <object_list> <real> <real>)
        ```
        sets a group of units' current body and shield vitality
    net_safe_raw: unknown, assumed unsafe
  - slug: vehicle_load_magic
    info:
      en: |-
        ```hsc
        (<short> vehicle_load_magic <object> <unit_seat_mapping> <object_list>)
        ```
        makes a list of units (named or by encounter) magically get into a vehicle, in the substring-specified seats (e.g. CD-passenger... empty string matches all seats)
    net_safe_raw: unknown, assumed unsafe
  - slug: vehicle_unload
    info:
      en: |-
        ```hsc
        (<short> vehicle_unload <object> <unit_seat_mapping>)
        ```
        makes units get out of an object from the substring-specified seats (e.g. CD-passenger... empty string matches all seats)
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_set_animation_mode
    info:
      en: |-
        ```hsc
        (<void> unit_set_animation_mode <unit> <string_id>)
        ```
        this unit will assume the named animation mode
    net_safe_raw: unknown, assumed unsafe
  - slug: magic_melee_attack
    info:
      en: |-
        ```hsc
        (<void> magic_melee_attack)
        ```
        causes player's unit to start a melee attack
    net_safe_raw: unknown, assumed unsafe
  - slug: vehicle_riders
    info:
      en: |-
        ```hsc
        (<object_list> vehicle_riders <unit>)
        ```
        returns a list of all riders in a vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: vehicle_driver
    info:
      en: |-
        ```hsc
        (<unit> vehicle_driver <unit>)
        ```
        returns the driver of a vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: vehicle_gunner
    info:
      en: |-
        ```hsc
        (<unit> vehicle_gunner <unit>)
        ```
        returns the gunner of a vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_get_health
    info:
      en: |-
        ```hsc
        (<real> unit_get_health <unit>)
        ```
        returns the health \[0,1\] of the unit, returns -1 if the unit does not exist
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_get_shield
    info:
      en: |-
        ```hsc
        (<real> unit_get_shield <unit>)
        ```
        returns the shield \[0,1\] of the unit, returns -1 if the unit does not exist
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_get_total_grenade_count
    info:
      en: |-
        ```hsc
        (<short> unit_get_total_grenade_count <unit>)
        ```
        returns the total number of grenades for the given unit, 0 if it does not exist
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_has_weapon
    info:
      en: |-
        ```hsc
        (<boolean> unit_has_weapon <unit> <object_definition>)
        ```
        returns TRUE if the <unit> has <object> as a weapon, FALSE otherwise
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_has_weapon_readied
    info:
      en: |-
        ```hsc
        (<boolean> unit_has_weapon_readied <unit> <object_definition>)
        ```
        returns TRUE if the <unit> has <object> as the primary weapon, FALSE otherwise
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_has_any_equipment
    info:
      en: |-
        ```hsc
        (<boolean> unit_has_any_equipment <unit>)
        ```
        returns TRUE if the <unit> has any equipment, FALSE otherwise
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_has_equipment
    info:
      en: |-
        ```hsc
        (<boolean> unit_has_equipment <unit> <object_definition>)
        ```
        returns TRUE if the <unit> has equipment <object> , FALSE otherwise
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_lower_weapon
    info:
      en: |-
        ```hsc
        (<void> unit_lower_weapon <unit> <short>)
        ```
        lower the units weapon over x ticks
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_raise_weapon
    info:
      en: |-
        ```hsc
        (<void> unit_raise_weapon <unit> <short>)
        ```
        raises the units weapon over x ticks
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_drop_support_weapon
    info:
      en: |-
        ```hsc
        (<void> unit_drop_support_weapon <unit>)
        ```
        forces the given unit to drop its support weapon, if it is holding one
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_spew_action
    info:
      en: |-
        ```hsc
        (<void> unit_spew_action <unit>)
        ```
        runs the spew unit action on the specified unit
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_force_reload
    info:
      en: |-
        ```hsc
        (<void> unit_force_reload <unit>)
        ```
        Force the give unit to reload his weapon
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_animation_forced_seat
    info:
      en: |-
        ```hsc
        (<void> unit_animation_forced_seat <string_id>)
        ```
        all units controlled by the player will assume the given seat name (valid values are 'asleep', 'alert', 'stand', 'crouch' and 'flee')
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_doesnt_drop_items
    info:
      en: |-
        ```hsc
        (<void> unit_doesnt_drop_items <object_list>)
        ```
        prevents any of the given units from dropping weapons or grenades when they die
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_impervious
    info:
      en: |-
        ```hsc
        (<void> unit_impervious <object_list> <boolean>)
        ```
        prevents any of the given units from being knocked around or playing ping animations
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_suspended
    info:
      en: |-
        ```hsc
        (<void> unit_suspended <unit> <boolean>)
        ```
        stops gravity from working on the given unit
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_add_equipment
    info:
      en: |-
        ```hsc
        (<void> unit_add_equipment <unit> <starting_profile> <boolean> <boolean>)
        ```
        adds/resets the unit's health, shield, and inventory (weapons and grenades) to the named profile. resets if third parameter is true, adds if false. weapons will be marked as garbage if fourth parameter is true (for respawning equipment).
    net_safe_raw: unknown, assumed unsafe
  - slug: weapon_hold_trigger
    info:
      en: |-
        ```hsc
        (<void> weapon_hold_trigger <weapon> <long> <boolean>)
        ```
        turns the trigger for a weapon  on/off
    net_safe_raw: unknown, assumed unsafe
  - slug: weapon_enable_warthog_chaingun_light
    info:
      en: |-
        ```hsc
        (<void> weapon_enable_warthog_chaingun_light <boolean>)
        ```
        turns the trigger for a weapon  on/off
    net_safe_raw: unknown, assumed unsafe
  - slug: device_set_never_appears_locked
    info:
      en: |-
        ```hsc
        (<void> device_set_never_appears_locked <device> <boolean>)
        ```
        changes a machine's never_appears_locked flag, but only if paul is a bastard
    net_safe_raw: no
  - slug: device_set_power
    info:
      en: |-
        ```hsc
        (<void> device_set_power <device> <real>)
        ```
        immediately sets the power of a named device to the given value
    net_safe_raw: yes
  - slug: device_get_power
    info:
      en: |-
        ```hsc
        (<real> device_get_power <device>)
        ```
        gets the current power of a named device
    net_safe_raw: yes
  - slug: device_set_position
    info:
      en: |-
        ```hsc
        (<boolean> device_set_position <device> <real>)
        ```
        set the desired position of the given device (used for devices without explicit device groups)
    net_safe_raw: yes
  - slug: device_get_position
    info:
      en: |-
        ```hsc
        (<real> device_get_position <device>)
        ```
        gets the current position of the given device (used for devices without explicit device groups)
    net_safe_raw: yes
  - slug: device_set_position_immediate
    info:
      en: |-
        ```hsc
        (<void> device_set_position_immediate <device> <real>)
        ```
        instantaneously changes the position of the given device (used for devices without explicit device groups
    net_safe_raw: no (only desired works, need to add immediate support)
  - slug: device_group_get
    info:
      en: |-
        ```hsc
        (<real> device_group_get <device_group>)
        ```
        returns the desired value of the specified device group.
    net_safe_raw: yes
  - slug: device_group_set
    info:
      en: |-
        ```hsc
        (<boolean> device_group_set <device> <device_group> <real>)
        ```
        changes the desired value of the specified device group.
    net_safe_raw: yes
  - slug: device_group_set_immediate
    info:
      en: |-
        ```hsc
        (<void> device_group_set_immediate <device_group> <real>)
        ```
        instantaneously changes the value of the specified device group.
    net_safe_raw: no (only desired works, need to add immediate support)
  - slug: device_one_sided_set
    info:
      en: |-
        ```hsc
        (<void> device_one_sided_set <device> <boolean>)
        ```
        TRUE makes the given device one-sided (only able to be opened from one direction), FALSE makes it two-sided
    net_safe_raw: no
  - slug: device_ignore_player_set
    info:
      en: |-
        ```hsc
        (<void> device_ignore_player_set <device> <boolean>)
        ```
        TRUE makes the given device ignore the player (won't open for players), FALSE makes it work for the player
    net_safe_raw: no
  - slug: device_operates_automatically_set
    info:
      en: |-
        ```hsc
        (<void> device_operates_automatically_set <device> <boolean>)
        ```
        TRUE makes the given device open automatically when any biped is nearby, FALSE makes it not
    net_safe_raw: no
  - slug: device_closes_automatically_set
    info:
      en: |-
        ```hsc
        (<void> device_closes_automatically_set <device> <boolean>)
        ```
        TRUE makes the given device close automatically after it has opened, FALSE makes it not
    net_safe_raw: no
  - slug: device_group_change_only_once_more_set
    info:
      en: |-
        ```hsc
        (<void> device_group_change_only_once_more_set <device_group> <boolean>)
        ```
        TRUE allows a device to change states only once
    net_safe_raw: no
  - slug: device_set_position_track
    info:
      en: |-
        ```hsc
        (<boolean> device_set_position_track <device> <string_id> <real>)
        ```
        set the desired position track animation to use (optional interpolation time onto track)
    net_safe_raw: unknown, assumed unsafe
  - slug: device_set_overlay_track
    info:
      en: |-
        ```hsc
        (<boolean> device_set_overlay_track <device> <string_id>)
        ```
        set the desired overlay animation to use
    net_safe_raw: unknown, assumed unsafe
  - slug: device_animate_position
    info:
      en: |-
        ```hsc
        (<void> device_animate_position <device> <real> <real> <real> <real> <boolean>)
        ```
        animate the position over time
    net_safe_raw: unknown, assumed unsafe
  - slug: device_animate_overlay
    info:
      en: |-
        ```hsc
        (<void> device_animate_overlay <device> <real> <real> <real> <real>)
        ```
        animate the overlay over time
    net_safe_raw: unknown, assumed unsafe
  - slug: cheat_all_powerups
    info:
      en: |-
        ```hsc
        (<void> cheat_all_powerups)
        ```
        drops all powerups near player
    net_safe_raw: yes
  - slug: cheat_all_weapons
    info:
      en: |-
        ```hsc
        (<void> cheat_all_weapons)
        ```
        drops all weapons near player
    net_safe_raw: yes
  - slug: cheat_all_vehicles
    info:
      en: |-
        ```hsc
        (<void> cheat_all_vehicles)
        ```
        drops all vehicles on player
    net_safe_raw: yes
  - slug: cheat_teleport_to_camera
    info:
      en: |-
        ```hsc
        (<void> cheat_teleport_to_camera)
        ```
        teleports player to camera location
    net_safe_raw: yes
  - slug: cheat_active_camouflage
    info:
      en: |-
        ```hsc
        (<void> cheat_active_camouflage <boolean>)
        ```
        gives the player active camouflage
    net_safe_raw: yes
  - slug: cheat_active_camouflage_by_player
    info:
      en: |-
        ```hsc
        (<void> cheat_active_camouflage_by_player <short> <boolean>)
        ```
        gives a specific player active camouflage
    net_safe_raw: yes
  - slug: cheats_load
    info:
      en: |-
        ```hsc
        (<void> cheats_load)
        ```
        reloads the cheats.txt file
    net_safe_raw: unknown, assumed unsafe
  - slug: drop_safe
    info:
      en: |-
        ```hsc
        (<void> drop_safe <any tag>)
        ```
        drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle
    net_safe_raw: yes, for objects
  - slug: drop
    info:
      en: |-
        ```hsc
        (<void> drop <string>)
        ```
        drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle
    net_safe_raw: yes, for objects
  - slug: drop_variant
    info:
      en: |-
        ```hsc
        (<void> drop_variant <string> <string>)
        ```
        drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle using the specified variant name
    net_safe_raw: yes, for objects
  - slug: drop_permutation
    info:
      en: |-
        ```hsc
        (<void> drop_permutation <string> <string>)
        ```
        drops the named tag e.g. objects\characters\brute\brute.biped using the specified permutation. permutations are specified as a comma-delimited string of region=permutation pairs (e.g. region1=permutation1,region2=permutation2).
  - slug: ai_enable
    info:
      en: |-
        ```hsc
        (<void> ai_enable <boolean>)
        ```
        turns all AI on or off.
    net_safe_raw: yes
  - slug: ai_enabled
    info:
      en: |-
        ```hsc
        (<boolean> ai_enabled)
        ```
        returns whether AI is turned on or off.
    net_safe_raw: yes
  - slug: ai_grenades
    info:
      en: |-
        ```hsc
        (<void> ai_grenades <boolean>)
        ```
        turns grenade inventory on or off.
    net_safe_raw: yes
  - slug: ai_dialogue_enable
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_enable <boolean>)
        ```
        turn combat dialogue on/off
    net_safe_raw: no
  - slug: ai_infection_suppress
    info:
      en: |-
        ```hsc
        (<void> ai_infection_suppress <long>)
        ```
        disable infection for this number of ticks
    net_safe_raw: yes
  - slug: ai_dialogue_log_reset
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_log_reset)
        ```
        reset the dialogue log
    net_safe_raw: yes (local)
  - slug: ai_dialogue_log_dump
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_log_dump <string>)
        ```
        dump a file of the given name with csv statistics on vocalizations
    net_safe_raw: yes
  - slug: ai_get_object
    info:
      en: |-
        ```hsc
        (<object> ai_get_object <ai>)
        ```
        returns the unit/object corresponding to the given actor
    net_safe_raw: yes
  - slug: ai_get_unit
    info:
      en: |-
        ```hsc
        (<unit> ai_get_unit <ai>)
        ```
        returns the unit/object corresponding to the given actor
    net_safe_raw: yes
  - slug: ai_get_squad
    info:
      en: |-
        ```hsc
        (<ai> ai_get_squad <ai>)
        ```
        returns the squad of the given actor. Invalid if the given ai is NOT an actor-type (i.e. is itself a squad or squad group or task
    net_safe_raw: yes
  - slug: ai_get_turret_ai
    info:
      en: |-
        ```hsc
        (<ai> ai_get_turret_ai <ai> <short>)
        ```
        returns an the ai controlling the Nth turret attached to the given ai (or its vehicle)
    net_safe_raw: yes
  - slug: ai_random_smart_point
    info:
      en: |-
        ```hsc
        (<point_reference> ai_random_smart_point <point_reference> <real> <real> <real>)
        ```
        returns a point in the given point set that a player is probably going to be able to see. Args are \[point set\], \[min distance\], \[max distance\], \[angle-from-forward\], all relative to the player
    net_safe_raw: yes
  - slug: ai_nearest_point
    info:
      en: |-
        ```hsc
        (<point_reference> ai_nearest_point <object> <point_reference>)
        ```
        returns the nearest point in the given point set to the given object
    net_safe_raw: yes
  - slug: ai_get_point_count
    info:
      en: |-
        ```hsc
        (<long> ai_get_point_count <point_reference>)
        ```
        returns the number of points in the given point set
    net_safe_raw: yes
  - slug: ai_point_set_get_point
    info:
      en: |-
        ```hsc
        (<point_reference> ai_point_set_get_point <point_reference> <short>)
        ```
        returns Nth point in the point set
    net_safe_raw: yes
  - slug: ai_place
    info:
      en: |-
        ```hsc
        (<void> ai_place <ai>)
        ```
        places the specified squad on the map.
    net_safe_raw: yes
  - slug: ai_place
    info:
      en: |-
        ```hsc
        (<void> ai_place <ai> <short>)
        ```
        places the given number of members of the specified squad.
    net_safe_raw: yes
  - slug: ai_place_in_vehicle
    info:
      en: |-
        ```hsc
        (<void> ai_place_in_vehicle <ai> <ai>)
        ```
        places the specified squad (1st arg) on the map in the vehicles belonging to the specified vehicle squad (2nd arg).
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_cannot_die
    info:
      en: |-
        ```hsc
        (<void> ai_cannot_die <ai> <boolean>)
        ```
        AI cannot die from damage (as opposed to by scripting)
    net_safe_raw: yes
  - slug: ai_vitality_pinned
    info:
      en: |-
        ```hsc
        (<boolean> ai_vitality_pinned <ai>)
        ```
        Returns true if the ai's units are ALL vitality pinned (see object_vitality_pinned)
    net_safe_raw: yes
  - slug: ai_resurrect
    info:
      en: |-
        ```hsc
        (<void> ai_resurrect <object>)
        ```
        Resurrect the specified mission critical AI character.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_kill
    info:
      en: |-
        ```hsc
        (<void> ai_kill <ai>)
        ```
        instantly kills the specified encounter and/or squad.
    net_safe_raw: yes
  - slug: ai_kill_silent
    info:
      en: |-
        ```hsc
        (<void> ai_kill_silent <ai>)
        ```
        instantly and silently (no animation or sound played) kills the specified encounter and/or squad.
    net_safe_raw: yes
  - slug: ai_erase
    info:
      en: |-
        ```hsc
        (<void> ai_erase <ai>)
        ```
        erases the specified encounter and/or squad.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_erase_all
    info:
      en: |-
        ```hsc
        (<void> ai_erase_all)
        ```
        erases all AI.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_disposable
    info:
      en: |-
        ```hsc
        (<void> ai_disposable <ai> <boolean>)
        ```
        enables or disables automatic garbage collection for actors in the specified encounter and/or squad.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_select
    info:
      en: |-
        ```hsc
        (<void> ai_select <ai>)
        ```
        selects the specified squad.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_deselect
    info:
      en: |-
        ```hsc
        (<void> ai_deselect)
        ```
        clears the selected encounter.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_set_deaf
    info:
      en: |-
        ```hsc
        (<void> ai_set_deaf <ai> <boolean>)
        ```
        enables or disables hearing for actors in the specified encounter.
    net_safe_raw: yes
  - slug: ai_set_blind
    info:
      en: |-
        ```hsc
        (<void> ai_set_blind <ai> <boolean>)
        ```
        enables or disables sight for actors in the specified encounter.
    net_safe_raw: yes
  - slug: ai_set_weapon_up
    info:
      en: |-
        ```hsc
        (<void> ai_set_weapon_up <ai> <boolean>)
        ```
        force actor to hold their weapon up, instead of lowering it when idle. this does NOT cause them to draw their weapon if stowed
    net_safe_raw: yes
  - slug: ai_flood_disperse
    info:
      en: |-
        ```hsc
        (<void> ai_flood_disperse <ai> <ai>)
        ```
        Disperese a flood encounter, stimulating the various forms to break down into infections and transition to the new objective
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_magically_see
    info:
      en: |-
        ```hsc
        (<void> ai_magically_see <ai> <ai>)
        ```
        Make one squad magically aware of another.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_magically_see_object
    info:
      en: |-
        ```hsc
        (<void> ai_magically_see_object <ai> <object>)
        ```
        Make a squad magically aware of a particular object.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_set_active_camo
    info:
      en: |-
        ```hsc
        (<void> ai_set_active_camo <ai> <boolean>)
        ```
        Turn on active camoflage on actor/squad/squad-group
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_suppress_combat
    info:
      en: |-
        ```hsc
        (<void> ai_suppress_combat <ai> <boolean>)
        ```
        Turn on/off combat suppression on actor/squad/squad-group
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_migrate
    info:
      en: |-
        ```hsc
        (<void> ai_migrate <ai> <ai>)
        ```
        makes all or part of an encounter move to another encounter.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_migrate_persistent
    info:
      en: |-
        ```hsc
        (<void> ai_migrate_persistent <ai> <ai>)
        ```
        makes all or part of an encounter move to another encounter, and all script commands will function on the migrated squad
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_allegiance
    info:
      en: |-
        ```hsc
        (<void> ai_allegiance <team> <team>)
        ```
        creates an allegiance between two teams.
    net_safe_raw: yes
  - slug: ai_allegiance_remove
    info:
      en: |-
        ```hsc
        (<void> ai_allegiance_remove <team> <team>)
        ```
        destroys an allegiance between two teams.
    net_safe_raw: yes
  - slug: ai_allegiance_break
    info:
      en: |-
        ```hsc
        (<void> ai_allegiance_break <team> <team>)
        ```
        fake a betrayal incident between two teams
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_braindead
    info:
      en: |-
        ```hsc
        (<void> ai_braindead <ai> <boolean>)
        ```
        makes a group of actors braindead, or restores them to life (in their initial state)
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_braindead_by_unit
    info:
      en: |-
        ```hsc
        (<void> ai_braindead_by_unit <object_list> <boolean>)
        ```
        makes a list of objects braindead, or restores them to life. if you pass in a vehicle index, it makes all actors in that vehicle braindead (including any built-in guns)
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_disregard
    info:
      en: |-
        ```hsc
        (<void> ai_disregard <object_list> <boolean>)
        ```
        if TRUE, forces all actors to completely disregard the specified units, otherwise lets them acknowledge the units again
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_prefer_target
    info:
      en: |-
        ```hsc
        (<void> ai_prefer_target <object_list> <boolean>)
        ```
        if TRUE, *ALL* enemies will prefer to attack the specified units. if FALSE, removes the preference.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_prefer_target_team
    info:
      en: |-
        ```hsc
        (<void> ai_prefer_target_team <ai> <team>)
        ```
        the given ai will prefer the indicated team.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_prefer_target_ai
    info:
      en: |-
        ```hsc
        (<void> ai_prefer_target_ai <ai> <ai> <boolean>)
        ```
        the given ai (actor, squad, task, etc.) will prefer the given other ai (actor, squad, task, etc.)
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_set_targeting_group
    info:
      en: |-
        ```hsc
        (<void> ai_set_targeting_group <ai> <short>)
        ```
        Set the AI to only target other guys of targetin group X
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_set_targeting_group
    info:
      en: |-
        ```hsc
        (<void> ai_set_targeting_group <ai> <short> <boolean>)
        ```
        Set the AI to only target other guys of targetin group X (true/false whether the player should also be targeted)
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_teleport_to_starting_location_if_outside_bsp
    info:
      en: |-
        ```hsc
        (<void> ai_teleport_to_starting_location_if_outside_bsp <ai>)
        ```
        teleports a group of actors to the starting locations of their current squad(s) if they are currently outside the world.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_teleport
    info:
      en: |-
        ```hsc
        (<void> ai_teleport <ai> <point_reference>)
        ```
        teleports the given squad to the given point.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_bring_forward
    info:
      en: |-
        ```hsc
        (<void> ai_bring_forward <object> <real>)
        ```
        teleports the given mission critical AI character to the current encounter, if beyond the given range from a player
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_migrate_form
    info:
      en: |-
        ```hsc
        (<short> ai_migrate_form <ai> <ai> <short>)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_morph
    info:
      en: |-
        ```hsc
        (<boolean> ai_morph <ai> <short>)
        ```
        Cause an ai (or a group of ai) to morph to the given form
    net_safe_raw: unknown, assumed unsafe
  - slug: biped_morph
    info:
      en: |-
        ```hsc
        (<boolean> biped_morph <object>)
        ```
        Cause a biped to morph to its floodified form
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_renew
    info:
      en: |-
        ```hsc
        (<void> ai_renew <ai>)
        ```
        refreshes the health and grenade count of a group of actors, so they are as good as new
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_force_active
    info:
      en: |-
        ```hsc
        (<void> ai_force_active <ai> <boolean>)
        ```
        forces an encounter to remain active (i.e. not freeze in place) even if there are no players nearby
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_force_active_by_unit
    info:
      en: |-
        ```hsc
        (<void> ai_force_active_by_unit <unit> <boolean>)
        ```
        forces a named actor that is NOT in an encounter to remain active (i.e. not freeze in place) even if there are no players nearby
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_playfight
    info:
      en: |-
        ```hsc
        (<void> ai_playfight <ai> <boolean>)
        ```
        sets an encounter to be playfighting or not
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_reconnect
    info:
      en: |-
        ```hsc
        (<void> ai_reconnect)
        ```
        reconnects all AI information to the current structure bsp (use this after you create encounters or command lists in sapien, or place new firing points or command list points)
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_berserk
    info:
      en: |-
        ```hsc
        (<void> ai_berserk <ai> <boolean>)
        ```
        forces a group of actors to start or stop berserking
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_set_team
    info:
      en: |-
        ```hsc
        (<void> ai_set_team <ai> <team>)
        ```
        makes an encounter change to a new team
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_allow_dormant
    info:
      en: |-
        ```hsc
        (<void> ai_allow_dormant <ai> <boolean>)
        ```
        either enables or disables automatic dormancy for a group of actors
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_is_attacking
    info:
      en: |-
        ```hsc
        (<boolean> ai_is_attacking <ai>)
        ```
        returns whether a platoon is in the attacking mode (or if an encounter is specified, returns whether any platoon in that encounter is attacking)
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_fighting_count
    info:
      en: |-
        ```hsc
        (<short> ai_fighting_count <ai>)
        ```
        return the number of actors that are fighting in a squad or squad_group
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_living_count
    info:
      en: |-
        ```hsc
        (<short> ai_living_count <ai>)
        ```
        return the number of living actors in the specified encounter and/or squad.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_living_fraction
    info:
      en: |-
        ```hsc
        (<real> ai_living_fraction <ai>)
        ```
        return the fraction \[0-1\] of living actors in the specified encounter and/or squad.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_in_vehicle_count
    info:
      en: |-
        ```hsc
        (<short> ai_in_vehicle_count <ai>)
        ```
        return the number of living actors in the specified encounter and/or squad who are currently in a vehicle.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_body_count
    info:
      en: |-
        ```hsc
        (<short> ai_body_count <ai>)
        ```
        return the number of actors who have died in the completiong of the given objective/task.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_strength
    info:
      en: |-
        ```hsc
        (<real> ai_strength <ai>)
        ```
        return the current strength (average body vitality from 0-1) of the specified encounter and/or squad.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_swarm_count
    info:
      en: |-
        ```hsc
        (<short> ai_swarm_count <ai>)
        ```
        return the number of swarm actors in the specified encounter and/or squad.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_nonswarm_count
    info:
      en: |-
        ```hsc
        (<short> ai_nonswarm_count <ai>)
        ```
        return the number of non-swarm actors in the specified encounter and/or squad.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_actors
    info:
      en: |-
        ```hsc
        (<object_list> ai_actors <ai>)
        ```
        converts an ai reference to an object list.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_allegiance_broken
    info:
      en: |-
        ```hsc
        (<boolean> ai_allegiance_broken <team> <team>)
        ```
        returns whether two teams have an allegiance that is currently broken by traitorous behavior
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_spawn_count
    info:
      en: |-
        ```hsc
        (<short> ai_spawn_count <ai>)
        ```
        returns the number of actors spawned in the given squad or squad group
    net_safe_raw: unknown, assumed unsafe
  - slug: object_get_ai
    info:
      en: |-
        ```hsc
        (<ai> object_get_ai <object>)
        ```
        returns the ai attached to this object, if any
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_rotate_scenario
    info:
      en: |-
        ```hsc
        (<boolean> ai_rotate_scenario <real> <real> <real> <real>)
        ```
        rotates ai points and normals (e.g. firing points, starting locations) around the given axis (x,y,z) by the given rotation angle (degrees)
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_translate_scenario
    info:
      en: |-
        ```hsc
        (<boolean> ai_translate_scenario <real> <real> <real>)
        ```
        translates ai points and objects by the given x y z.
    net_safe_raw: unknown, assumed unsafe
  - slug: scenario_duplicate_bsp_objects
    info:
      en: |-
        ```hsc
        (<void> scenario_duplicate_bsp_objects <string> <string>)
        ```
        <input bsp> <output bsp>: duplicate all the objects in the first BSP into the second BSP
    net_safe_raw: unknown, assumed unsafe
  - slug: scenario_duplicate_bsp_objects
    info:
      en: |-
        ```hsc
        (<void> scenario_duplicate_bsp_objects <string> <string> <string>)
        ```
        <input bsp> <output bsp> <filter>: duplicate filtered objects in the first BSP into the second BSP; available filters: all, crates, scenery, bipeds, machines, terminals, controls, arg_devices
    net_safe_raw: unknown, assumed unsafe
  - slug: scenario_rotate
    info:
      en: |-
        ```hsc
        (<void> scenario_rotate <real> <real> <real> <real>)
        ```
        rotates scenario objects (including decals and decorators) around the given axis (x,y,z) by the given amount (degrees)
    net_safe_raw: unknown, assumed unsafe
  - slug: scenario_reflect
    info:
      en: |-
        ```hsc
        (<void> scenario_reflect <real> <real> <real> <real>)
        ```
        reflects scenario objects (including decals and decorators) across the given plane (specified by normal x,y,z and offset k)
    net_safe_raw: unknown, assumed unsafe
  - slug: scenario_translate
    info:
      en: |-
        ```hsc
        (<void> scenario_translate <real> <real> <real>)
        ```
        translates scenario objects (including decals and decorators) the given amount (x,y,z)
    net_safe_raw: unknown, assumed unsafe
  - slug: scenario_rotate
    info:
      en: |-
        ```hsc
        (<void> scenario_rotate <real> <real> <real> <real> <string> <string>)
        ```
        rotates scenario objects (specified by the filter) in the specified BSP around the given axis (x,y,z) by the given amount (degrees)
    net_safe_raw: unknown, assumed unsafe
  - slug: scenario_reflect
    info:
      en: |-
        ```hsc
        (<void> scenario_reflect <real> <real> <real> <real> <string> <string>)
        ```
        reflects scenario objects (specified by the filter) in the specified BSP across the given plane (specified by normal x,y,z and offset k)
    net_safe_raw: unknown, assumed unsafe
  - slug: scenario_translate
    info:
      en: |-
        ```hsc
        (<void> scenario_translate <real> <real> <real> <string> <string>)
        ```
        translates scenario objects (specified by the filter) in the specified BSP the given amount (x,y,z)
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_set_task
    info:
      en: |-
        ```hsc
        (<boolean> ai_set_task <ai> <string_id> <string_id>)
        ```
        Sets the current task of the current task
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_set_objective
    info:
      en: |-
        ```hsc
        (<boolean> ai_set_objective <ai> <string_id>)
        ```
        Sets the squad's current objective
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_task_status
    info:
      en: |-
        ```hsc
        (<short> ai_task_status <ai>)
        ```
        Returns the status of the given objective/task. See ai_task_status_<tab> for return codes.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_set_task_condition
    info:
      en: |-
        ```hsc
        (<boolean> ai_set_task_condition <ai> <boolean>)
        ```
        Latches the task condition true or false
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_leadership
    info:
      en: |-
        ```hsc
        (<boolean> ai_leadership <ai>)
        ```
        Returns whether a squad or task has a leader
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_leadership_all
    info:
      en: |-
        ```hsc
        (<boolean> ai_leadership_all <ai>)
        ```
        Returns whether a task or any of its children has a leader
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_task_count
    info:
      en: |-
        ```hsc
        (<short> ai_task_count <ai>)
        ```
        Returns the living count of the AI in the given task OR any of its children
    net_safe_raw: unknown, assumed unsafe
  - slug: generate_pathfinding
    info:
      en: |-
        ```hsc
        (<boolean> generate_pathfinding)
        ```
        Generate pathfinding info for all structure bsps in the current scenario
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_render_paths_all
    info:
      en: |-
        ```hsc
        (<void> ai_render_paths_all)
        ```
        Turns on raw, smoothed, avoided paths and avoidance obstacles
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_activity_set
    info:
      en: |-
        ```hsc
        (<void> ai_activity_set <ai> <string_id>)
        ```
        Set the given activity running on the given AI(s)
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_activity_abort
    info:
      en: |-
        ```hsc
        (<void> ai_activity_abort <ai>)
        ```
        Aborts the activities running on the given AI(s)
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_vehicle_get
    info:
      en: |-
        ```hsc
        (<vehicle> ai_vehicle_get <ai>)
        ```
        Returns the vehicle that the given actor is in.
    net_safe_raw: yes
  - slug: ai_vehicle_get_from_starting_location
    info:
      en: |-
        ```hsc
        (<vehicle> ai_vehicle_get_from_starting_location <ai>)
        ```
        Returns the vehicle that was spawned at the given starting location.
    net_safe_raw: yes
  - slug: ai_vehicle_get_squad_count
    info:
      en: |-
        ```hsc
        (<short> ai_vehicle_get_squad_count <ai>)
        ```
        Returns the number of vehicles in the given squad.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_vehicle_get_from_squad
    info:
      en: |-
        ```hsc
        (<vehicle> ai_vehicle_get_from_squad <ai> <short>)
        ```
        Returns the nth vehicle from the given squad.
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_vehicle_reserve_seat
    info:
      en: |-
        ```hsc
        (<boolean> ai_vehicle_reserve_seat <vehicle> <unit_seat_mapping> <boolean>)
        ```
        Reserves the given seat on the given vehicle (so that AI may not enter it
    net_safe_raw: yes
  - slug: ai_vehicle_reserve
    info:
      en: |-
        ```hsc
        (<boolean> ai_vehicle_reserve <vehicle> <boolean>)
        ```
        Reserves the given vehicle (so that AI may not enter it
    net_safe_raw: yes
  - slug: ai_player_get_vehicle_squad
    info:
      en: |-
        ```hsc
        (<ai> ai_player_get_vehicle_squad <unit>)
        ```
        Returns the squad (if any) of the vehicle the player is riding in (note, the argument is a UNIT)
    net_safe_raw: yes
  - slug: ai_vehicle_count
    info:
      en: |-
        ```hsc
        (<short> ai_vehicle_count <ai>)
        ```
        Returns the number of vehicles being driven / ridden by the actors in the given squad/squad-group/task/etc.
    net_safe_raw: yes
  - slug: ai_carrying_player
    info:
      en: |-
        ```hsc
        (<boolean> ai_carrying_player <ai>)
        ```
        Returns whether any of the given AI are in a vehicle with the player
    net_safe_raw: yes
  - slug: player_in_vehicle
    info:
      en: |-
        ```hsc
        (<boolean> player_in_vehicle <vehicle>)
        ```
        Returns whether any players are in the given vehicle
    net_safe_raw: yes
  - slug: ai_player_needs_vehicle
    info:
      en: |-
        ```hsc
        (<boolean> ai_player_needs_vehicle <unit>)
        ```
        Returns if the given player needs a vehicle at the moment
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_player_any_needs_vehicle
    info:
      en: |-
        ```hsc
        (<boolean> ai_player_any_needs_vehicle)
        ```
        Returns if any player needs a vehicle at the moment
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_vehicle_enter
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter <ai> <unit> <unit_seat_mapping>)
        ```
        tells a group of actors to get into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles
    net_safe_raw: yes
  - slug: ai_vehicle_enter
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter <ai> <unit>)
        ```
        tells a group of actors to get into a vehicle... does not interrupt any actors who are already going to vehicles
    net_safe_raw: yes
  - slug: ai_vehicle_enter_immediate
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter_immediate <ai> <unit> <unit_seat_mapping>)
        ```
        the given group of actors is snapped into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles
    net_safe_raw: yes
  - slug: ai_vehicle_enter_immediate
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter_immediate <ai> <unit>)
        ```
        the given group of actors is snapped into a vehicle
    net_safe_raw: yes
  - slug: ai_enter_squad_vehicles
    info:
      en: |-
        ```hsc
        (<short> ai_enter_squad_vehicles <ai>)
        ```
        Instructs the ai in the given squad to get in all their vehicles
    net_safe_raw: yes
  - slug: ai_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_exit <ai> <unit_seat_mapping>)
        ```
        tells a group of actors to get out of any vehicles that they are in (if their seat matches the substring)
    net_safe_raw: yes
  - slug: ai_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_exit <ai>)
        ```
        tells a group of actors to get out of any vehicles that they are in
    net_safe_raw: yes
  - slug: vehicle_overturned
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_overturned <vehicle>)
        ```
        Returns true if the vehicle is overturned
    net_safe_raw: yes
  - slug: vehicle_flip
    info:
      en: |-
        ```hsc
        (<void> vehicle_flip <vehicle>)
        ```
        Flips an overturned vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_combat_status
    info:
      en: |-
        ```hsc
        (<short> ai_combat_status <ai>)
        ```
        Returns the highest integer combat status in the given squad-group/squad/actor
    net_safe_raw: unknown, assumed unsafe
  - slug: flock_start
    info:
      en: |-
        ```hsc
        (<boolean> flock_start <string_id>)
        ```
        The flock starts producing boids
    net_safe_raw: unknown, assumed unsafe
  - slug: flock_stop
    info:
      en: |-
        ```hsc
        (<boolean> flock_stop <string_id>)
        ```
        The flock stops producing boids
    net_safe_raw: unknown, assumed unsafe
  - slug: flock_create
    info:
      en: |-
        ```hsc
        (<boolean> flock_create <string_id>)
        ```
        Create the given flock
    net_safe_raw: unknown, assumed unsafe
  - slug: flock_delete
    info:
      en: |-
        ```hsc
        (<boolean> flock_delete <string_id>)
        ```
        Delete the given flock
    net_safe_raw: unknown, assumed unsafe
  - slug: flock_definition_set
    info:
      en: |-
        ```hsc
        (<boolean> flock_definition_set <string_id> <any tag>)
        ```
        Set the definition of the given flock to the given tag
    net_safe_raw: unknown, assumed unsafe
  - slug: flock_unperch
    info:
      en: |-
        ```hsc
        (<void> flock_unperch <string_id>)
        ```
        Cause the given flock to unperch (if it is perched)
    net_safe_raw: unknown, assumed unsafe
  - slug: drop_ai
    info:
      en: |-
        ```hsc
        (<void> drop_ai <string> <string>)
        ```
        Drop an ai with the given weapon at the current camera position
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_verify_tags
    info:
      en: |-
        ```hsc
        (<void> ai_verify_tags)
        ```
        Verifies state of ai-related tags (e.g. orders, squads, zones, etc.)
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_wall_lean
    info:
      en: |-
        ```hsc
        (<boolean> ai_wall_lean <ai>)
        ```
        Makes the actor lean against a wall RIGHT NOW
    net_safe_raw: no
  - slug: ai_play_line
    info:
      en: |-
        ```hsc
        (<real> ai_play_line <ai> <ai_line>)
        ```
        Play the given mission dialogue line on the given ai
    net_safe_raw: no
  - slug: ai_play_line_at_player
    info:
      en: |-
        ```hsc
        (<real> ai_play_line_at_player <ai> <ai_line>)
        ```
        Play the given mission dialogue line on the given ai, directing the ai's gaze at the nearest visible player
    net_safe_raw: no
  - slug: ai_play_line_on_object
    info:
      en: |-
        ```hsc
        (<real> ai_play_line_on_object <object> <ai_line>)
        ```
        Play the given mission dialogue line on the given object (uses first available variant)
    net_safe_raw: no
  - slug: ai_play_line_on_object_for_team
    info:
      en: |-
        ```hsc
        (<real> ai_play_line_on_object_for_team <object> <ai_line> <mp_team>)
        ```
        Play the given mission dialogue line on the given object (uses first available variant) if anyone on the local box is on the specified team
    net_safe_raw: yes
  - slug: ai_play_line_on_point_set
    info:
      en: |-
        ```hsc
        (<short> ai_play_line_on_point_set <string_id> <point_reference> <short>)
        ```
        Play the given line on the N closest point to players in the given point set
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_play_line_on_point_set
    info:
      en: |-
        ```hsc
        (<short> ai_play_line_on_point_set <string_id> <point_reference> <short> <string_id>)
        ```
        Play the given line (with the given 3-letter variant) on the N closest point to players in the given point set
    net_safe_raw: unknown, assumed unsafe
  - slug: campaign_metagame_time_pause
    info:
      en: |-
        ```hsc
        (<void> campaign_metagame_time_pause <boolean>)
        ```
        pause meta game time, while paused your completion multiplier stops going down
    net_safe_raw: yes
  - slug: campaign_metagame_award_points
    info:
      en: |-
        ```hsc
        (<void> campaign_metagame_award_points <object> <short>)
        ```
        award bonus metagame points to a player
    net_safe_raw: yes
  - slug: campaign_metagame_award_primary_skull
    info:
      en: |-
        ```hsc
        (<void> campaign_metagame_award_primary_skull <object> <short>)
        ```
        award a primary skull to a player
    net_safe_raw: yes
  - slug: campaign_metagame_award_secondary_skull
    info:
      en: |-
        ```hsc
        (<void> campaign_metagame_award_secondary_skull <object> <short>)
        ```
        award a secondary skull to a player
    net_safe_raw: yes
  - slug: campaign_metagame_enabled
    info:
      en: |-
        ```hsc
        (<boolean> campaign_metagame_enabled)
        ```
        TRUE if the metagame is enabled
    net_safe_raw: unknown, assumed unsafe
  - slug: campaign_is_finished_easy
    info:
      en: |-
        ```hsc
        (<boolean> campaign_is_finished_easy)
        ```
        TRUE if any of the players have finished the campaign on easy
    net_safe_raw: unknown, assumed unsafe
  - slug: campaign_is_finished_normal
    info:
      en: |-
        ```hsc
        (<boolean> campaign_is_finished_normal)
        ```
        TRUE if any of the players have finished the campaign on normal
    net_safe_raw: unknown, assumed unsafe
  - slug: campaign_is_finished_heroic
    info:
      en: |-
        ```hsc
        (<boolean> campaign_is_finished_heroic)
        ```
        TRUE if any of the players have finished the campaign on heroic
    net_safe_raw: unknown, assumed unsafe
  - slug: campaign_is_finished_legendary
    info:
      en: |-
        ```hsc
        (<boolean> campaign_is_finished_legendary)
        ```
        TRUE if any of the players have finished the campaign on legendary
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_run_command_script
    info:
      en: |-
        ```hsc
        (<void> cs_run_command_script <ai> <ai_command_script>)
        ```
        Causes the specified actor(s) to start executing a command script immediately (discarding any other command scripts in the queue)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_queue_command_script
    info:
      en: |-
        ```hsc
        (<void> cs_queue_command_script <ai> <ai_command_script>)
        ```
        Add a command script onto the end of an actor's command script queue
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_stack_command_script
    info:
      en: |-
        ```hsc
        (<void> cs_stack_command_script <ai> <ai_command_script>)
        ```
        Push a command script to the top of the actor's command script queue
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_reserve
    info:
      en: |-
        ```hsc
        (<void> vs_reserve <ai> <short>)
        ```
        Reserves the specified actor(s) for the use of the current script (discarding any other command scripts in the queue)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_reserve
    info:
      en: |-
        ```hsc
        (<void> vs_reserve <ai> <boolean> <short>)
        ```
        Reserves the specified actor(s) for the use of the current script (discarding any other command scripts in the queue)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id>)
        ```
        Cast 1 actor for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id>)
        ```
        Cast 2 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id>)
        ```
        Cast 3 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id>)
        ```
        Cast 4 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id> <string_id>)
        ```
        Cast 5 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id> <string_id> <string_id>)
        ```
        Cast 6 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id> <string_id> <string_id> <string_id>)
        ```
        Cast 7 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_role
    info:
      en: |-
        ```hsc
        (<ai> vs_role <short>)
        ```
        Returns the given member of the cast (as per more recent vs_cast call)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_abort_on_alert
    info:
      en: |-
        ```hsc
        (<void> vs_abort_on_alert <boolean>)
        ```
        Command script ends prematurely when actor's combat status raises to 'alert' or higher
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_abort_on_damage
    info:
      en: |-
        ```hsc
        (<void> vs_abort_on_damage <boolean>)
        ```
        Command script ends prematurely when actor is damaged
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_abort_on_combat_status
    info:
      en: |-
        ```hsc
        (<void> vs_abort_on_combat_status <short>)
        ```
        Command script ends prematurely when actor's combat status rises to given level
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_abort_on_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> vs_abort_on_vehicle_exit <boolean>)
        ```
        Command script ends prematurely when actor gets out of its vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_abort_on_alert
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_alert <boolean>)
        ```
        Command script ends prematurely when actor's combat status raises to 'alert' or higher
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_abort_on_damage
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_damage <boolean>)
        ```
        Command script ends prematurely when actor is damaged
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_abort_on_combat_status
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_combat_status <short>)
        ```
        Command script ends prematurely when actor's combat status rises to given level
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_abort_on_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_vehicle_exit <boolean>)
        ```
        Command script ends prematurely when actor gets out of its vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_abort_on_alert
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_alert <boolean>)
        ```
        Command script ends prematurely when given actor's combat status raises to 'alert' or higher
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_abort_on_alert
    info:
      en: |-
        ```hsc
        (<void> vs_abort_on_alert <ai> <boolean>)
        ```
        Command script ends prematurely when given actor's combat status raises to 'alert' or higher
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_abort_on_damage
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_damage <boolean>)
        ```
        Command script ends prematurely when actor is damaged
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_abort_on_damage
    info:
      en: |-
        ```hsc
        (<void> vs_abort_on_damage <ai> <boolean>)
        ```
        Command script ends prematurely when actor is damaged
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_abort_on_combat_status
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_combat_status <short>)
        ```
        Command script ends prematurely when actor's combat status rises to given level
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_abort_on_combat_status
    info:
      en: |-
        ```hsc
        (<void> vs_abort_on_combat_status <ai> <short>)
        ```
        Command script ends prematurely when actor's combat status rises to given level
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_abort_on_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_vehicle_exit <boolean>)
        ```
        Command script ends prematurely when actor gets out of its vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_abort_on_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> vs_abort_on_vehicle_exit <ai> <boolean>)
        ```
        Command script ends prematurely when actor gets out of its vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_set_cleanup_script
    info:
      en: |-
        ```hsc
        (<void> vs_set_cleanup_script <script>)
        ```
        Sets the script that is automatically called when the current thread ends
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_release
    info:
      en: |-
        ```hsc
        (<void> vs_release <ai>)
        ```
        Lets the given ai out of the current command script
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_release_all
    info:
      en: |-
        ```hsc
        (<void> vs_release_all)
        ```
        Releases all the ai attached to the current thread 
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_command_script_running
    info:
      en: |-
        ```hsc
        (<boolean> cs_command_script_running <ai> <ai_command_script>)
        ```
        Returns true if the ai is running the command script in question
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_command_script_queued
    info:
      en: |-
        ```hsc
        (<boolean> cs_command_script_queued <ai> <ai_command_script>)
        ```
        Returns true if the command script is in the ai's cs queue
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_number_queued
    info:
      en: |-
        ```hsc
        (<short> cs_number_queued <ai>)
        ```
        Returns the number of queued command scripts
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_moving
    info:
      en: |-
        ```hsc
        (<boolean> cs_moving)
        ```
        Returns TRUE if the actor is currently following a path
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_moving
    info:
      en: |-
        ```hsc
        (<boolean> cs_moving <ai>)
        ```
        Returns TRUE if the actor is currently following a path
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_running_atom
    info:
      en: |-
        ```hsc
        (<boolean> vs_running_atom <ai>)
        ```
        Returns true if the ai is running any atom
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_running_atom_movement
    info:
      en: |-
        ```hsc
        (<boolean> vs_running_atom_movement <ai>)
        ```
        Returns true if the ai is running an atom on the movement channel
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_running_atom_action
    info:
      en: |-
        ```hsc
        (<boolean> vs_running_atom_action <ai>)
        ```
        Returns true if the ai is running an atom on the action channel
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_running_atom_dialogue
    info:
      en: |-
        ```hsc
        (<boolean> vs_running_atom_dialogue <ai>)
        ```
        Returns true if the ai is running an atom on the dialogue channel
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_fly_to
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to <point_reference>)
        ```
        Flies the actor to the given point
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_fly_to
    info:
      en: |-
        ```hsc
        (<void> vs_fly_to <ai> <boolean> <point_reference>)
        ```
        Flies the actor to the given point
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_fly_to
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to <point_reference> <real>)
        ```
        Flies the actor to the given point (within the given tolerance)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_fly_to
    info:
      en: |-
        ```hsc
        (<void> vs_fly_to <ai> <boolean> <point_reference> <real>)
        ```
        Flies the actor to the given point (within the given tolerance)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_fly_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to_and_face <point_reference> <point_reference>)
        ```
        Flies the actor to the given point and orients him in the appropriate direction
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_fly_to_and_face
    info:
      en: |-
        ```hsc
        (<void> vs_fly_to_and_face <ai> <boolean> <point_reference> <point_reference>)
        ```
        Flies the actor to the given point and orients him in the appropriate direction
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_fly_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to_and_face <point_reference> <point_reference> <real>)
        ```
        Flies the actor to the given point and orients him in the appropriate direction (within the given tolerance)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_fly_to_and_face
    info:
      en: |-
        ```hsc
        (<void> vs_fly_to_and_face <ai> <boolean> <point_reference> <point_reference> <real>)
        ```
        Flies the actor to the given point and orients him in the appropriate direction (within the given tolerance)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_fly_by
    info:
      en: |-
        ```hsc
        (<void> cs_fly_by <point_reference>)
        ```
        Flies the actor through the given point
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_fly_by
    info:
      en: |-
        ```hsc
        (<void> vs_fly_by <ai> <boolean> <point_reference>)
        ```
        Flies the actor through the given point
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_fly_by
    info:
      en: |-
        ```hsc
        (<void> cs_fly_by <point_reference> <real>)
        ```
        Flies the actor through the given point (within the given tolerance)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_fly_by
    info:
      en: |-
        ```hsc
        (<void> vs_fly_by <ai> <boolean> <point_reference> <real>)
        ```
        Flies the actor through the given point (within the given tolerance)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_go_to
    info:
      en: |-
        ```hsc
        (<void> cs_go_to <point_reference>)
        ```
        Moves the actor to a specified point
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_go_to
    info:
      en: |-
        ```hsc
        (<void> vs_go_to <ai> <boolean> <point_reference>)
        ```
        Moves the actor to a specified point
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_go_to
    info:
      en: |-
        ```hsc
        (<void> cs_go_to <point_reference> <real>)
        ```
        Moves the actor to a specified point, attenuating throttle by the given amount when near the goal
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_go_to
    info:
      en: |-
        ```hsc
        (<void> vs_go_to <ai> <boolean> <point_reference> <real>)
        ```
        Moves the actor to a specified point, attenuating throttle by the given amount when near the goal
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_go_by
    info:
      en: |-
        ```hsc
        (<void> cs_go_by <point_reference> <point_reference>)
        ```
        Actor moves toward the point, and considers it hit when it breaks the indicated plane
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_go_by
    info:
      en: |-
        ```hsc
        (<void> vs_go_by <ai> <boolean> <point_reference> <point_reference>)
        ```
        Actor moves toward the point, and considers it hit when it breaks the indicated plane
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_go_by
    info:
      en: |-
        ```hsc
        (<void> cs_go_by <point_reference> <point_reference> <real>)
        ```
        Actor moves toward the point, and considers it hit when it breaks the indicated plane, attenuating throttle by the given amount when near the goal
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_go_by
    info:
      en: |-
        ```hsc
        (<void> vs_go_by <ai> <boolean> <point_reference> <point_reference> <real>)
        ```
        Actor moves toward the point, and considers it hit when it breaks the indicated plane, attenuating throttle by the given amount when near the goal
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_go_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_and_face <point_reference> <point_reference>)
        ```
        Moves the actor to a specified point and has him face the second point
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_go_to_and_face
    info:
      en: |-
        ```hsc
        (<void> vs_go_to_and_face <ai> <boolean> <point_reference> <point_reference>)
        ```
        Moves the actor to a specified point and has him face the second point
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_go_to_and_posture
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_and_posture <point_reference> <string_id>)
        ```
        Actor moves to the point and performs a posture once there
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_go_to_and_posture
    info:
      en: |-
        ```hsc
        (<void> vs_go_to_and_posture <ai> <boolean> <point_reference> <string_id>)
        ```
        Actor moves to the point and performs a posture once there
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_go_to_nearest
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_nearest <point_reference>)
        ```
        Given a point set, AI goes toward the nearest point
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_go_to_nearest
    info:
      en: |-
        ```hsc
        (<void> vs_go_to_nearest <ai> <boolean> <point_reference>)
        ```
        Given a point set, AI goes toward the nearest point
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_move_in_direction
    info:
      en: |-
        ```hsc
        (<void> cs_move_in_direction <real> <real> <real>)
        ```
        Actor moves at given angle, for the given distance, optionally with the given facing (angle, distance, facing)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_move_in_direction
    info:
      en: |-
        ```hsc
        (<void> vs_move_in_direction <ai> <boolean> <real> <real> <real>)
        ```
        Actor moves at given angle, for the given distance, optionally with the given facing (angle, distance, facing)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_move_towards
    info:
      en: |-
        ```hsc
        (<void> cs_move_towards <object>)
        ```
        Move in the direction of the given object
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_move_towards
    info:
      en: |-
        ```hsc
        (<void> vs_move_towards <ai> <boolean> <object>)
        ```
        Move in the direction of the given object
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_move_towards
    info:
      en: |-
        ```hsc
        (<void> cs_move_towards <object> <boolean>)
        ```
        Move in the direction of the given object (and melee the target or not)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_move_towards
    info:
      en: |-
        ```hsc
        (<void> vs_move_towards <ai> <boolean> <object> <boolean>)
        ```
        Move in the direction of the given object (and melee the target or not)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_swarm_to
    info:
      en: |-
        ```hsc
        (<void> cs_swarm_to <point_reference> <real>)
        ```
        A swarm swarms towards the point (or point set) in question, the individual forms stopping when they get within the given radius
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_swarm_to
    info:
      en: |-
        ```hsc
        (<void> vs_swarm_to <ai> <boolean> <point_reference> <real>)
        ```
        A swarm swarms towards the point (or point set) in question, the individual forms stopping when they get within the given radius
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_swarm_from
    info:
      en: |-
        ```hsc
        (<void> cs_swarm_from <point_reference> <real>)
        ```
        A swarm swarms away from the point in question, going at least the given distance
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_swarm_from
    info:
      en: |-
        ```hsc
        (<void> vs_swarm_from <ai> <boolean> <point_reference> <real>)
        ```
        A swarm swarms away from the point in question, going at least the given distance
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_pause
    info:
      en: |-
        ```hsc
        (<void> cs_pause <real>)
        ```
        The actor does nothing for the given number of seconds
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_pause
    info:
      en: |-
        ```hsc
        (<void> vs_pause <ai> <boolean> <real>)
        ```
        The actor does nothing for the given number of seconds
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_grenade
    info:
      en: |-
        ```hsc
        (<void> cs_grenade <point_reference> <short>)
        ```
        Actor throws a grenade, either by tossing (arg2=0), lobbing (1) or bouncing (2)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_grenade
    info:
      en: |-
        ```hsc
        (<void> vs_grenade <ai> <boolean> <point_reference> <short>)
        ```
        Actor throws a grenade, either by tossing (arg2=0), lobbing (1) or bouncing (2)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_equipment
    info:
      en: |-
        ```hsc
        (<void> cs_equipment <point_reference>)
        ```
        Actor throws their equipment in the direction of the given point
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_equipment
    info:
      en: |-
        ```hsc
        (<void> vs_equipment <ai> <boolean> <point_reference>)
        ```
        Actor throws their equipment in the direction of the given point
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_jump
    info:
      en: |-
        ```hsc
        (<void> cs_jump <real> <real>)
        ```
        Actor jumps in direction of angle at the given velocity (angle, velocity)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_jump
    info:
      en: |-
        ```hsc
        (<void> vs_jump <ai> <boolean> <real> <real>)
        ```
        Actor jumps in direction of angle at the given velocity (angle, velocity)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_jump_to_point
    info:
      en: |-
        ```hsc
        (<void> cs_jump_to_point <real> <real>)
        ```
        Actor jumps with given horizontal and vertical velocity
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_jump_to_point
    info:
      en: |-
        ```hsc
        (<void> vs_jump_to_point <ai> <boolean> <real> <real>)
        ```
        Actor jumps with given horizontal and vertical velocity
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_vocalize
    info:
      en: |-
        ```hsc
        (<void> cs_vocalize <short>)
        ```
        Actor emits vocalization of given type
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_vocalize
    info:
      en: |-
        ```hsc
        (<void> vs_vocalize <ai> <boolean> <short>)
        ```
        Actor emits vocalization of given type
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <sound>)
        ```
        Actor plays an impulse sound and the atom blocks until it is complete
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_play_sound
    info:
      en: |-
        ```hsc
        (<void> vs_play_sound <ai> <boolean> <sound>)
        ```
        Actor plays an impulse sound and the atom blocks until it is complete
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <sound> <real>)
        ```
        Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_play_sound
    info:
      en: |-
        ```hsc
        (<void> vs_play_sound <ai> <boolean> <sound> <real>)
        ```
        Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <sound> <real> <real>)
        ```
        Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length, at the given volume (0..1)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_play_sound
    info:
      en: |-
        ```hsc
        (<void> vs_play_sound <ai> <boolean> <sound> <real> <real>)
        ```
        Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length, at the given volume (0..1)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_action
    info:
      en: |-
        ```hsc
        (<void> cs_action <point_reference> <short>)
        ```
        Actor plays an AI action towards the given point. ai_action_<tab> to see action options
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_action
    info:
      en: |-
        ```hsc
        (<void> vs_action <ai> <boolean> <point_reference> <short>)
        ```
        Actor plays an AI action towards the given point. ai_action_<tab> to see action options
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_action_at_object
    info:
      en: |-
        ```hsc
        (<void> cs_action_at_object <object> <short>)
        ```
        Actor plays an AI action towards the given object. ai_action_<tab> to see action options
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_action_at_object
    info:
      en: |-
        ```hsc
        (<void> vs_action_at_object <ai> <boolean> <object> <short>)
        ```
        Actor plays an AI action towards the given object. ai_action_<tab> to see action options
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_action_at_player
    info:
      en: |-
        ```hsc
        (<void> cs_action_at_player <short>)
        ```
        Actor plays an AI action towards the nearest_player. ai_action_<tab> to see action options
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_action_at_player
    info:
      en: |-
        ```hsc
        (<void> vs_action_at_player <ai> <boolean> <short>)
        ```
        Actor plays an AI action towards the nearest_player. ai_action_<tab> to see action options
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_custom_animation
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_custom_animation
    info:
      en: |-
        ```hsc
        (<void> vs_custom_animation <ai> <boolean> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_custom_animation
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_custom_animation
    info:
      en: |-
        ```hsc
        (<void> vs_custom_animation <ai> <boolean> <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_custom_animation_death
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_death <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_custom_animation_death
    info:
      en: |-
        ```hsc
        (<void> vs_custom_animation_death <ai> <boolean> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_custom_animation_death
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_death <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_custom_animation_death
    info:
      en: |-
        ```hsc
        (<void> vs_custom_animation_death <ai> <boolean> <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_custom_animation_loop
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_loop <animation_graph> <string_id> <boolean>)
        ```
        starts a looping custom animation playing on the actor (interpolates into animation if last parameter is TRUE) NON-BLOCKING
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_custom_animation_loop
    info:
      en: |-
        ```hsc
        (<void> vs_custom_animation_loop <ai> <animation_graph> <string_id> <boolean>)
        ```
        starts a looping custom animation playing on the actor (interpolates into animation if last parameter is TRUE) NON-BLOCKING
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_custom_animation_loop
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_loop <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a looping custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE) NON-BLOCKING
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_custom_animation_loop
    info:
      en: |-
        ```hsc
        (<void> vs_custom_animation_loop <ai> <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a looping custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE) NON-BLOCKING
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_play_line
    info:
      en: |-
        ```hsc
        (<void> cs_play_line <ai_line>)
        ```
        Play the named line in the current scene
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_play_line
    info:
      en: |-
        ```hsc
        (<void> vs_play_line <ai> <boolean> <ai_line>)
        ```
        Play the named line in the current scene
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_die
    info:
      en: |-
        ```hsc
        (<void> cs_die <short>)
        ```
        Actor dies in specified manner
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_die
    info:
      en: |-
        ```hsc
        (<void> vs_die <ai> <boolean> <short>)
        ```
        Actor dies in specified manner
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_deploy_turret
    info:
      en: |-
        ```hsc
        (<void> cs_deploy_turret <point_reference>)
        ```
        Deploy a turret at the given script point
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_deploy_turret
    info:
      en: |-
        ```hsc
        (<void> vs_deploy_turret <ai> <boolean> <point_reference>)
        ```
        Deploy a turret at the given script point
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_approach
    info:
      en: |-
        ```hsc
        (<void> cs_approach <object> <real> <real> <real>)
        ```
        (approach <object> <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_approach
    info:
      en: |-
        ```hsc
        (<void> vs_approach <ai> <boolean> <object> <real> <real> <real>)
        ```
        (approach <object> <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_approach_player
    info:
      en: |-
        ```hsc
        (<void> cs_approach_player <real> <real> <real>)
        ```
        (approach player <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_approach_player
    info:
      en: |-
        ```hsc
        (<void> vs_approach_player <ai> <boolean> <real> <real> <real>)
        ```
        (approach player <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_go_to_vehicle
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_vehicle <vehicle>)
        ```
        Actor gets in the appropriate vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_go_to_vehicle
    info:
      en: |-
        ```hsc
        (<void> vs_go_to_vehicle <ai> <boolean> <vehicle>)
        ```
        Actor gets in the appropriate vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_go_to_vehicle
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_vehicle <vehicle> <unit_seat_mapping>)
        ```
        Actor gets in the named seat of the appropriate vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_go_to_vehicle
    info:
      en: |-
        ```hsc
        (<void> vs_go_to_vehicle <ai> <boolean> <vehicle> <unit_seat_mapping>)
        ```
        Actor gets in the named seat of the appropriate vehicle
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_set_style
    info:
      en: |-
        ```hsc
        (<void> cs_set_style <style>)
        ```
        Override the actor's style
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_set_style
    info:
      en: |-
        ```hsc
        (<void> vs_set_style <ai> <style>)
        ```
        Override the actor's style
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_force_combat_status
    info:
      en: |-
        ```hsc
        (<void> cs_force_combat_status <short>)
        ```
        Force the actor's combat status (0= no override, 1=idle, 2= alert, 3= active)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_force_combat_status
    info:
      en: |-
        ```hsc
        (<void> vs_force_combat_status <ai> <short>)
        ```
        Force the actor's combat status (0= no override, 1=idle, 2= alert, 3= active)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_enable_targeting
    info:
      en: |-
        ```hsc
        (<void> cs_enable_targeting <boolean>)
        ```
        Actor autonomous target selection enabled/disabled.
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_enable_targeting
    info:
      en: |-
        ```hsc
        (<void> vs_enable_targeting <ai> <boolean>)
        ```
        Actor autonomous target selection enabled/disabled.
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_enable_looking
    info:
      en: |-
        ```hsc
        (<void> cs_enable_looking <boolean>)
        ```
        Actor autonomous looking enabled/disabled.
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_enable_looking
    info:
      en: |-
        ```hsc
        (<void> vs_enable_looking <ai> <boolean>)
        ```
        Actor autonomous looking enabled/disabled.
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_enable_moving
    info:
      en: |-
        ```hsc
        (<void> cs_enable_moving <boolean>)
        ```
        Actor autonomous moving enabled/disabled.
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_enable_moving
    info:
      en: |-
        ```hsc
        (<void> vs_enable_moving <ai> <boolean>)
        ```
        Actor autonomous moving enabled/disabled.
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_enable_dialogue
    info:
      en: |-
        ```hsc
        (<void> cs_enable_dialogue <boolean>)
        ```
        Actor combat dialogue enabled/disabled.
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_enable_dialogue
    info:
      en: |-
        ```hsc
        (<void> vs_enable_dialogue <ai> <boolean>)
        ```
        Actor combat dialogue enabled/disabled.
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_suppress_activity_termination
    info:
      en: |-
        ```hsc
        (<void> cs_suppress_activity_termination <boolean>)
        ```
        Autonomous termination of activities is suppressed for the remainder of the command script
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_suppress_activity_termination
    info:
      en: |-
        ```hsc
        (<void> vs_suppress_activity_termination <ai> <boolean>)
        ```
        Autonomous termination of activities is suppressed for the remainder of the command script
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_suppress_dialogue_global
    info:
      en: |-
        ```hsc
        (<void> cs_suppress_dialogue_global <boolean>)
        ```
        Combat dialogue is suppressed for the remainder of the command script
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_suppress_dialogue_global
    info:
      en: |-
        ```hsc
        (<void> vs_suppress_dialogue_global <ai> <boolean>)
        ```
        Combat dialogue is suppressed for the remainder of the command script
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_look
    info:
      en: |-
        ```hsc
        (<void> cs_look <boolean> <point_reference>)
        ```
        Actor looks at the point for the remainder of the cs, or until overridden
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_look
    info:
      en: |-
        ```hsc
        (<void> vs_look <ai> <boolean> <point_reference>)
        ```
        Actor looks at the point for the remainder of the cs, or until overridden
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_look_player
    info:
      en: |-
        ```hsc
        (<void> cs_look_player <boolean>)
        ```
        Actor looks at nearest player for the duration of the cs, or until overridden
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_look_player
    info:
      en: |-
        ```hsc
        (<void> vs_look_player <ai> <boolean>)
        ```
        Actor looks at nearest player for the duration of the cs, or until overridden
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_look_object
    info:
      en: |-
        ```hsc
        (<void> cs_look_object <boolean> <object>)
        ```
        Actor looks at the object for the duration of the cs, or until overridden
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_look_object
    info:
      en: |-
        ```hsc
        (<void> vs_look_object <ai> <boolean> <object>)
        ```
        Actor looks at the object for the duration of the cs, or until overridden
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_aim
    info:
      en: |-
        ```hsc
        (<void> cs_aim <boolean> <point_reference>)
        ```
        Actor aims at the point for the remainder of the cs, or until overridden (overrides look)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_aim
    info:
      en: |-
        ```hsc
        (<void> vs_aim <ai> <boolean> <point_reference>)
        ```
        Actor aims at the point for the remainder of the cs, or until overridden (overrides look)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_aim_player
    info:
      en: |-
        ```hsc
        (<void> cs_aim_player <boolean>)
        ```
        Actor aims at nearest player for the duration of the cs, or until overridden (overrides look)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_aim_player
    info:
      en: |-
        ```hsc
        (<void> vs_aim_player <ai> <boolean>)
        ```
        Actor aims at nearest player for the duration of the cs, or until overridden (overrides look)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_aim_object
    info:
      en: |-
        ```hsc
        (<void> cs_aim_object <boolean> <object>)
        ```
        Actor aims at the object for the duration of the cs, or until overridden (overrides look)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_aim_object
    info:
      en: |-
        ```hsc
        (<void> vs_aim_object <ai> <boolean> <object>)
        ```
        Actor aims at the object for the duration of the cs, or until overridden (overrides look)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_face
    info:
      en: |-
        ```hsc
        (<void> cs_face <boolean> <point_reference>)
        ```
        Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_face
    info:
      en: |-
        ```hsc
        (<void> vs_face <ai> <boolean> <point_reference>)
        ```
        Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_face_player
    info:
      en: |-
        ```hsc
        (<void> cs_face_player <boolean>)
        ```
        Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_face_player
    info:
      en: |-
        ```hsc
        (<void> vs_face_player <ai> <boolean>)
        ```
        Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_face_object
    info:
      en: |-
        ```hsc
        (<void> cs_face_object <boolean> <object>)
        ```
        Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_face_object
    info:
      en: |-
        ```hsc
        (<void> vs_face_object <ai> <boolean> <object>)
        ```
        Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_shoot
    info:
      en: |-
        ```hsc
        (<void> cs_shoot <boolean>)
        ```
        Actor is allowed to shoot at its target or not
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_shoot
    info:
      en: |-
        ```hsc
        (<void> vs_shoot <ai> <boolean>)
        ```
        Actor is allowed to shoot at its target or not
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_shoot
    info:
      en: |-
        ```hsc
        (<void> cs_shoot <boolean> <object>)
        ```
        Actor shoots at given target
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_shoot
    info:
      en: |-
        ```hsc
        (<void> vs_shoot <ai> <boolean> <object>)
        ```
        Actor shoots at given target
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_shoot_point
    info:
      en: |-
        ```hsc
        (<void> cs_shoot_point <boolean> <point_reference>)
        ```
        Actor shoots at given point
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_shoot_point
    info:
      en: |-
        ```hsc
        (<void> vs_shoot_point <ai> <boolean> <point_reference>)
        ```
        Actor shoots at given point
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_shoot_secondary_trigger
    info:
      en: |-
        ```hsc
        (<void> cs_shoot_secondary_trigger <boolean>)
        ```
        Actor uses secondary trigger whenever he shoots
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_shoot_secondary_trigger
    info:
      en: |-
        ```hsc
        (<void> vs_shoot_secondary_trigger <ai> <boolean>)
        ```
        Actor uses secondary trigger whenever he shoots
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_lower_weapon
    info:
      en: |-
        ```hsc
        (<void> cs_lower_weapon <boolean>)
        ```
        Actor keeps weapon lowered
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_lower_weapon
    info:
      en: |-
        ```hsc
        (<void> vs_lower_weapon <ai> <boolean>)
        ```
        Actor keeps weapon lowered
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_vehicle_speed
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_speed <real>)
        ```
        Set the speed at which the actor will drive a vehicle, expressed as a multiplier 0-1
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_vehicle_speed
    info:
      en: |-
        ```hsc
        (<void> vs_vehicle_speed <ai> <real>)
        ```
        Set the speed at which the actor will drive a vehicle, expressed as a multiplier 0-1
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_vehicle_speed_instantaneous
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_speed_instantaneous <real>)
        ```
        Set the instantaneous speed of the vehicle we're driving
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_vehicle_speed_instantaneous
    info:
      en: |-
        ```hsc
        (<void> vs_vehicle_speed_instantaneous <ai> <real>)
        ```
        Set the instantaneous speed of the vehicle we're driving
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_vehicle_boost
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_boost <boolean>)
        ```
        Enables or disables boost
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_vehicle_boost
    info:
      en: |-
        ```hsc
        (<void> vs_vehicle_boost <ai> <boolean>)
        ```
        Enables or disables boost
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_turn_sharpness
    info:
      en: |-
        ```hsc
        (<void> cs_turn_sharpness <boolean> <real>)
        ```
        Set the sharpness of a vehicle turn (values 0 -> 1). Only applicable to nondirectional flying vehicles (e.g. dropships)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_turn_sharpness
    info:
      en: |-
        ```hsc
        (<void> vs_turn_sharpness <ai> <boolean> <real>)
        ```
        Set the sharpness of a vehicle turn (values 0 -> 1). Only applicable to nondirectional flying vehicles (e.g. dropships)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_enable_pathfinding_failsafe
    info:
      en: |-
        ```hsc
        (<void> cs_enable_pathfinding_failsafe <boolean>)
        ```
        Actor blocks until pathfinding calls succeed
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_enable_pathfinding_failsafe
    info:
      en: |-
        ```hsc
        (<void> vs_enable_pathfinding_failsafe <ai> <boolean>)
        ```
        Actor blocks until pathfinding calls succeed
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_set_pathfinding_radius
    info:
      en: |-
        ```hsc
        (<void> cs_set_pathfinding_radius <real>)
        ```
        Sets the actor's pathfinding radius (this distance at which a destination is considered to have been reached) for the remainder of the command script
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_set_pathfinding_radius
    info:
      en: |-
        ```hsc
        (<void> vs_set_pathfinding_radius <ai> <real>)
        ```
        Sets the actor's pathfinding radius (this distance at which a destination is considered to have been reached) for the remainder of the command script
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_ignore_obstacles
    info:
      en: |-
        ```hsc
        (<void> cs_ignore_obstacles <boolean>)
        ```
        Actor does not avoid obstacles when true
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_ignore_obstacles
    info:
      en: |-
        ```hsc
        (<void> vs_ignore_obstacles <ai> <boolean>)
        ```
        Actor does not avoid obstacles when true
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_approach_stop
    info:
      en: |-
        ```hsc
        (<void> cs_approach_stop)
        ```
        Actor stops approaching
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_approach_stop
    info:
      en: |-
        ```hsc
        (<void> vs_approach_stop <ai>)
        ```
        Actor stops approaching
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_movement_mode
    info:
      en: |-
        ```hsc
        (<void> cs_movement_mode <short>)
        ```
        Actor switches to given animation mode
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_movement_mode
    info:
      en: |-
        ```hsc
        (<void> vs_movement_mode <ai> <short>)
        ```
        Actor switches to given animation mode
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_crouch
    info:
      en: |-
        ```hsc
        (<void> cs_crouch <boolean>)
        ```
        Actor crouches for the remainder of the command script, or until overridden
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_crouch
    info:
      en: |-
        ```hsc
        (<void> vs_crouch <ai> <boolean>)
        ```
        Actor crouches for the remainder of the command script, or until overridden
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_crouch
    info:
      en: |-
        ```hsc
        (<void> cs_crouch <boolean> <real>)
        ```
        Actor crouches / uncrouches, transitioning over the given number of seconds
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_crouch
    info:
      en: |-
        ```hsc
        (<void> vs_crouch <ai> <boolean> <real>)
        ```
        Actor crouches / uncrouches, transitioning over the given number of seconds
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_walk
    info:
      en: |-
        ```hsc
        (<void> cs_walk <boolean>)
        ```
        Actor walks for the remainder of the command script, or until overridden
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_walk
    info:
      en: |-
        ```hsc
        (<void> vs_walk <ai> <boolean>)
        ```
        Actor walks for the remainder of the command script, or until overridden
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_posture_set
    info:
      en: |-
        ```hsc
        (<void> cs_posture_set <string_id> <boolean>)
        ```
        Actor enters the given posture (enters immediately rather than plays the entry animation if argument is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_posture_set
    info:
      en: |-
        ```hsc
        (<void> vs_posture_set <ai> <string_id> <boolean>)
        ```
        Actor enters the given posture (enters immediately rather than plays the entry animation if argument is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_posture_exit
    info:
      en: |-
        ```hsc
        (<void> cs_posture_exit)
        ```
        Actor exits the posture it's in
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_posture_exit
    info:
      en: |-
        ```hsc
        (<void> vs_posture_exit <ai>)
        ```
        Actor exits the posture it's in
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_stow
    info:
      en: |-
        ```hsc
        (<void> cs_stow)
        ```
        Actor stows its current weapon
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_stow
    info:
      en: |-
        ```hsc
        (<void> vs_stow <ai>)
        ```
        Actor stows its current weapon
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_draw
    info:
      en: |-
        ```hsc
        (<void> cs_draw)
        ```
        Actor draws its current weapon
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_draw
    info:
      en: |-
        ```hsc
        (<void> vs_draw <ai>)
        ```
        Actor draws its current weapon
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_teleport
    info:
      en: |-
        ```hsc
        (<void> cs_teleport <point_reference> <point_reference>)
        ```
        Actor teleports to point1 facing point2
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_teleport
    info:
      en: |-
        ```hsc
        (<void> vs_teleport <ai> <point_reference> <point_reference>)
        ```
        Actor teleports to point1 facing point2
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_stop_custom_animation
    info:
      en: |-
        ```hsc
        (<void> cs_stop_custom_animation)
        ```
        Stop running a custom animation
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_stop_custom_animation
    info:
      en: |-
        ```hsc
        (<void> vs_stop_custom_animation <ai>)
        ```
        Stop running a custom animation
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_stop_sound
    info:
      en: |-
        ```hsc
        (<void> cs_stop_sound <sound>)
        ```
        Stops the specified impulse sound.
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_stop_sound
    info:
      en: |-
        ```hsc
        (<void> vs_stop_sound <ai> <sound>)
        ```
        Stops the specified impulse sound.
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_player_melee
    info:
      en: |-
        ```hsc
        (<void> cs_player_melee <long>)
        ```
        Actor performs player-specific melee
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_player_melee
    info:
      en: |-
        ```hsc
        (<void> vs_player_melee <ai> <boolean> <long>)
        ```
        Actor performs player-specific melee
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_melee_direction
    info:
      en: |-
        ```hsc
        (<void> cs_melee_direction <long>)
        ```
        Actor performs melee in provided direction (0= front, 1= back, 2= offhand, 3= tackle)
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_melee_direction
    info:
      en: |-
        ```hsc
        (<void> vs_melee_direction <ai> <boolean> <long>)
        ```
        Actor performs melee in provided direction (0= front, 1= back, 2= offhand, 3= tackle)
    net_safe_raw: unknown, assumed unsafe
  - slug: cs_smash_direction
    info:
      en: |-
        ```hsc
        (<void> cs_smash_direction <long>)
        ```
        Actor performs smash in provided direction
    net_safe_raw: unknown, assumed unsafe
  - slug: vs_smash_direction
    info:
      en: |-
        ```hsc
        (<void> vs_smash_direction <ai> <boolean> <long>)
        ```
        Actor performs smash in provided direction
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_control
    info:
      en: |-
        ```hsc
        (<void> camera_control <boolean>)
        ```
        toggles script control of the camera.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set
    info:
      en: |-
        ```hsc
        (<void> camera_set <cutscene_camera_point> <short>)
        ```
        moves the camera to the specified camera point over the specified number of ticks.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_relative
    info:
      en: |-
        ```hsc
        (<void> camera_set_relative <cutscene_camera_point> <short> <object>)
        ```
        moves the camera to the specified camera point over the specified number of ticks (position is relative to the specified object).
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_animation
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation <animation_graph> <string_id>)
        ```
        begins a prerecorded camera animation.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_animation_relative
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation_relative <animation_graph> <string_id> <unit> <cutscene_flag>)
        ```
        begins a prerecorded camera animation synchronized to unit relative to cutscene flag.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_animation_with_speed
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation_with_speed <animation_graph> <string_id> <real>)
        ```
        begins a prerecorded camera animation.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_animation_relative_with_speed
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation_relative_with_speed <animation_graph> <string_id> <unit> <cutscene_flag> <real>)
        ```
        begins a prerecorded camera animation synchronized to unit relative to cutscene flag.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_animation_relative_with_speed_loop
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation_relative_with_speed_loop <animation_graph> <string_id> <unit> <cutscene_flag> <real> <boolean>)
        ```
        begins a prerecorded camera animation synchronized to unit relative to cutscene flag.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_animation_relative_with_speed_loop_offset
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation_relative_with_speed_loop_offset <animation_graph> <string_id> <unit> <cutscene_flag> <real> <boolean> <real>)
        ```
        begins a prerecorded camera animation synchronized to unit relative to cutscene flag.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_predict_resources_at_frame
    info:
      en: |-
        ```hsc
        (<void> camera_predict_resources_at_frame <animation_graph> <string_id> <unit> <cutscene_flag> <long>)
        ```
        predict resources at a frame in camera animation.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_predict_resources_at_point
    info:
      en: |-
        ```hsc
        (<void> camera_predict_resources_at_point <cutscene_camera_point>)
        ```
        predict resources given a camera point
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_first_person
    info:
      en: |-
        ```hsc
        (<void> camera_set_first_person <unit>)
        ```
        makes the scripted camera follow a unit.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_cinematic
    info:
      en: |-
        ```hsc
        (<void> camera_set_cinematic)
        ```
        makes the scripted camera follow the path of a cinematic scene.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_cinematic_scene
    info:
      en: |-
        ```hsc
        (<void> camera_set_cinematic_scene <cinematic scene definition> <long> <cutscene_flag>)
        ```
        sets the scene, shot, and cutscene flag for the cinematic camera (NOTE: camera must be in cinematic mode by calling camera_set_cinematic).
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_place_relative
    info:
      en: |-
        ```hsc
        (<void> camera_place_relative <object>)
        ```
        all subsequent camera placement in sapien be marked as relative to this object
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_place_worldspace
    info:
      en: |-
        ```hsc
        (<void> camera_place_worldspace)
        ```
        all subsequent camera placement in sapien will be marked as worldspace
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_time
    info:
      en: |-
        ```hsc
        (<short> camera_time)
        ```
        returns the number of ticks remaining in the current camera interpolation.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_field_of_view
    info:
      en: |-
        ```hsc
        (<void> camera_set_field_of_view <real> <short>)
        ```
        sets the field of view
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_camera_set_easing_in
    info:
      en: |-
        ```hsc
        (<void> cinematic_camera_set_easing_in <real> <real> <real> <real> <real> <real>)
        ```
        controls the camera easing from player position
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_camera_set_easing_out
    info:
      en: |-
        ```hsc
        (<void> cinematic_camera_set_easing_out <real>)
        ```
        controls the camera easing back to the player position
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_print
    info:
      en: |-
        ```hsc
        (<void> cinematic_print <string>)
        ```
        Print status lines for cinematic debugging
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_pan
    info:
      en: |-
        ```hsc
        (<void> camera_set_pan <cutscene_camera_point> <short>)
        ```
        moves the camera to the specified camera point over the specified number of ticks with a constant speed.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_pan
    info:
      en: |-
        ```hsc
        (<void> camera_pan <cutscene_camera_point> <cutscene_camera_point> <short> <short> <real> <short> <real>)
        ```
        camera_pan <start point> <end point> <ticks> <ease-in ticks> <start velocity scale> <ease-out ticks> <end velocity scale>
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_camera_save
    info:
      en: |-
        ```hsc
        (<void> debug_camera_save)
        ```
        saves the camera position and facing.
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_camera_load
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load)
        ```
        loads the saved camera position and facing.
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_camera_save_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_save_name <string>)
        ```
        saves the camera position and facing to filename
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_camera_load_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load_name <string>)
        ```
        loads the camera position and facing from filename
    net_safe_raw: unknown, assumed unsafe
  - slug: director_debug_camera
    info:
      en: |-
        ```hsc
        (<void> director_debug_camera <boolean>)
        ```
        enable/disable camera debugging
    net_safe_raw: unknown, assumed unsafe
  - slug: game_difficulty_get
    info:
      en: |-
        ```hsc
        (<game_difficulty> game_difficulty_get)
        ```
        returns the current difficulty setting, but lies to you and will never return easy, instead returning normal
    net_safe_raw: unknown, assumed unsafe
  - slug: game_difficulty_get_real
    info:
      en: |-
        ```hsc
        (<game_difficulty> game_difficulty_get_real)
        ```
        returns the actual current difficulty setting without lying
    net_safe_raw: unknown, assumed unsafe
  - slug: game_insertion_point_get
    info:
      en: |-
        ```hsc
        (<short> game_insertion_point_get)
        ```
        returns the number of the insertion point the map was started at
    net_safe_raw: yes.
  - slug: game_insertion_point_set
    info:
      en: |-
        ```hsc
        (<void> game_insertion_point_set <short>)
        ```
        retroactively sets the insertion point that we started at.
    net_safe_raw: unknown, assumed unsafe.
  - slug: pvs_set_object
    info:
      en: |-
        ```hsc
        (<void> pvs_set_object <object>)
        ```
        sets the specified object as the special place that activates everything it sees.
    net_safe_raw: unknown, assumed unsafe
  - slug: pvs_set_camera
    info:
      en: |-
        ```hsc
        (<void> pvs_set_camera <cutscene_camera_point>)
        ```
        sets the specified cutscene camera point as the special place that activates everything it sees.
    net_safe_raw: unknown, assumed unsafe
  - slug: pvs_clear
    info:
      en: |-
        ```hsc
        (<void> pvs_clear)
        ```
        removes the special place that activates everything it sees.
    net_safe_raw: unknown, assumed unsafe
  - slug: pvs_reset
    info:
      en: |-
        ```hsc
        (<void> pvs_reset)
        ```
        forces pvs to empty then back to full.
    net_safe_raw: unknown, assumed unsafe
  - slug: players_unzoom_all
    info:
      en: |-
        ```hsc
        (<void> players_unzoom_all)
        ```
        resets zoom levels on all players
    net_safe_raw: unknown, assumed unsafe
  - slug: player_enable_input
    info:
      en: |-
        ```hsc
        (<void> player_enable_input <boolean>)
        ```
        toggle player input. the player can still free-look, but nothing else.
    net_safe_raw: unknown, assumed unsafe
  - slug: player_disable_movement
    info:
      en: |-
        ```hsc
        (<void> player_disable_movement <boolean>)
        ```
        toggle player input. the look stick works, but nothing else.
    net_safe_raw: unknown, assumed unsafe
  - slug: player_disable_weapon_pickup
    info:
      en: |-
        ```hsc
        (<void> player_disable_weapon_pickup <boolean>)
        ```
        enable/disable all players' ability to pick up weapons
    net_safe_raw: unknown, assumed unsafe
  - slug: player_flashlight_on
    info:
      en: |-
        ```hsc
        (<boolean> player_flashlight_on)
        ```
        returns true if any player has a flashlight on
    net_safe_raw: unknown, assumed unsafe
  - slug: player_active_camouflage_on
    info:
      en: |-
        ```hsc
        (<boolean> player_active_camouflage_on)
        ```
        returns true if any player is active camouflaged
    net_safe_raw: unknown, assumed unsafe
  - slug: player_camera_control
    info:
      en: |-
        ```hsc
        (<boolean> player_camera_control <boolean>)
        ```
        enables/disables camera control globally
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_reset
    info:
      en: |-
        ```hsc
        (<void> player_action_test_reset)
        ```
        resets the player action test state so that all tests will return false.
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_jump
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_jump)
        ```
        returns true if any player has jumped since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_primary_trigger
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_primary_trigger)
        ```
        returns true if any player has used primary trigger since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_grenade_trigger
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_grenade_trigger)
        ```
        returns true if any player has used grenade trigger since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_vision_trigger
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_vision_trigger)
        ```
        returns true if any player has used vision trigger since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_zoom
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_zoom)
        ```
        returns true if any player has hit the zoom button since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_rotate_weapons
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_rotate_weapons)
        ```
        returns true if any player has hit the rotate-weapon button since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_rotate_grenades
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_rotate_grenades)
        ```
        returns true if any player has hit the rotate-grenades button since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_melee
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_melee)
        ```
        returns true if any player has hit the melee button since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_action
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_action)
        ```
        returns true if any player has hit the action key since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_accept
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_accept)
        ```
        returns true if any player has hit accept since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_cancel
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_cancel)
        ```
        returns true if any player has hit cancel key since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_look_relative_up
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_up)
        ```
        returns true if any player has looked up since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_look_relative_down
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_down)
        ```
        returns true if any player has looked down since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_look_relative_left
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_left)
        ```
        returns true if any player has looked left since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_look_relative_right
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_right)
        ```
        returns true if any player has looked right since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_look_relative_all_directions
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_all_directions)
        ```
        returns true if any player has looked up, down, left, and right since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_move_relative_all_directions
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_move_relative_all_directions)
        ```
        returns true if any player has moved forward, backward, left, and right since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_cinematic_skip
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_cinematic_skip)
        ```
        returns true if any player has pressed the cinematic skip button (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_start
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_start)
        ```
        returns true if any player has pressed the start button since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_back
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_back)
        ```
        returns true if any player has pressed the back button since the last call to (player_action_test_reset).
    net_safe_raw: unknown, assumed unsafe
  - slug: player0_looking_up
    info:
      en: |-
        ```hsc
        (<boolean> player0_looking_up)
        ```
        true if the first player is looking up
    net_safe_raw: unknown, assumed unsafe
  - slug: player0_looking_down
    info:
      en: |-
        ```hsc
        (<boolean> player0_looking_down)
        ```
        true if the first player is looking down
    net_safe_raw: unknown, assumed unsafe
  - slug: player0_set_pitch
    info:
      en: |-
        ```hsc
        (<void> player0_set_pitch <real> <long>)
        ```
        sets up player look up test
    net_safe_raw: unknown, assumed unsafe
  - slug: player1_set_pitch
    info:
      en: |-
        ```hsc
        (<void> player1_set_pitch <real> <long>)
        ```
        sets up player look up test
    net_safe_raw: unknown, assumed unsafe
  - slug: player2_set_pitch
    info:
      en: |-
        ```hsc
        (<void> player2_set_pitch <real> <long>)
        ```
        sets up player look up test
    net_safe_raw: unknown, assumed unsafe
  - slug: player3_set_pitch
    info:
      en: |-
        ```hsc
        (<void> player3_set_pitch <real> <long>)
        ```
        sets up player look up test
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_look_up_begin
    info:
      en: |-
        ```hsc
        (<void> player_action_test_look_up_begin <real> <real>)
        ```
        sets up player look up test
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_look_down_begin
    info:
      en: |-
        ```hsc
        (<void> player_action_test_look_down_begin <real> <real>)
        ```
        sets down player look down test
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_look_pitch_end
    info:
      en: |-
        ```hsc
        (<void> player_action_test_look_pitch_end)
        ```
        ends the look pitch testing
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_lookstick_forward
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_lookstick_forward)
        ```
        true if the first player pushed forward on lookstick
    net_safe_raw: unknown, assumed unsafe
  - slug: player_action_test_lookstick_backward
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_lookstick_backward)
        ```
        true if the first player pushed backward on lookstick
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_teleport_player
    info:
      en: |-
        ```hsc
        (<void> debug_teleport_player <long> <long>)
        ```
        for testing: teleports one player to another's location
    net_safe_raw: unknown, assumed unsafe
  - slug: map_reset
    info:
      en: |-
        ```hsc
        (<void> map_reset)
        ```
        starts the map from the beginning.
    net_safe_raw: unknown, assumed unsafe
  - slug: map_reset_random
    info:
      en: |-
        ```hsc
        (<void> map_reset_random)
        ```
        starts the map from the beginning with a new random seed.
    net_safe_raw: unknown, assumed unsafe
  - slug: switch_bsp
    info:
      en: |-
        ```hsc
        (<void> switch_bsp <long>)
        ```
        switches to a different zone set
    net_safe_raw: unknown, assumed unsafe
  - slug: switch_zone_set
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> switch_zone_set <zone_set>)
        ```
        switches to a different zone set
    net_safe_raw: unknown, assumed unsafe
  - slug: current_zone_set
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<long> current_zone_set)
        ```
        returns the current zone set
    net_safe_raw: unknown, assumed unsafe
  - slug: current_zone_set_fully_active
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<long> current_zone_set_fully_active)
        ```
        returns the current zone set
    net_safe_raw: unknown, assumed unsafe
  - slug: switch_map_and_zone_set
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> switch_map_and_zone_set <string> <long>)
        ```
        switches to a different scenario and zone set
    net_safe_raw: unknown, assumed unsafe
  - slug: crash
    info:
      en: |-
        ```hsc
        (<void> crash <string>)
        ```
        crashes (for debugging).
    net_safe_raw: unknown, assumed unsafe
  - slug: version
    info:
      en: |-
        ```hsc
        (<void> version)
        ```
        prints the build version.
    net_safe_raw: unknown, assumed unsafe
  - slug: status
    info:
      en: |-
        ```hsc
        (<void> status)
        ```
        prints the value of all global status variables.
    net_safe_raw: unknown, assumed unsafe
  - slug: record_movie
    info:
      en: |-
        ```hsc
        (<void> record_movie <short> <real> <short> <short>)
        ```
        <frame rate> <seconds> <width> <height>
    net_safe_raw: unknown, assumed unsafe
  - slug: record_movie_distributed
    info:
      en: |-
        ```hsc
        (<void> record_movie_distributed <short> <long> <short> <long> <long>)
        ```
        <frame rate> <seconds> <screen size> <mod count> <mod index>
    net_safe_raw: unknown, assumed unsafe
  - slug: screenshot
    info:
      en: |-
        ```hsc
        (<void> screenshot <string>)
        ```
        takes a screenshot and saves as <name>.tif
    net_safe_raw: unknown, assumed unsafe
  - slug: screenshot_debug
    info:
      en: |-
        ```hsc
        (<void> screenshot_debug)
        ```
        takes a screenshot and saves as <name>.tif
    net_safe_raw: unknown, assumed unsafe
  - slug: screenshot_big
    info:
      en: |-
        ```hsc
        (<void> screenshot_big <short> <string>)
        ```
        takes an NxN multiple-page screenshot and saves as <name>.tif
    net_safe_raw: unknown, assumed unsafe
  - slug: screenshot_big_raw
    info:
      en: |-
        ```hsc
        (<void> screenshot_big_raw <short> <string>)
        ```
        takes an NxN multiple-page screenshot and saves as an HDR <name>.tif
    net_safe_raw: unknown, assumed unsafe
  - slug: screenshot_size
    info:
      en: |-
        ```hsc
        (<void> screenshot_size <short> <short> <string>)
        ```
        takes a <width> x <height> screenshot and saves as an HDR <name>.tif
    net_safe_raw: unknown, assumed unsafe
  - slug: screenshot_simple
    info:
      en: |-
        ```hsc
        (<void> screenshot_simple <string>)
        ```
        takes a simple screenshot and saves as <name>.tif
    net_safe_raw: unknown, assumed unsafe
  - slug: screenshot_cubemap
    info:
      en: |-
        ```hsc
        (<void> screenshot_cubemap <string>)
        ```
        takes a cubemap screenshot and saves as <name>.tif
    net_safe_raw: unknown, assumed unsafe
  - slug: screenshot_webmap
    info:
      en: |-
        ```hsc
        (<void> screenshot_webmap <string>)
        ```
        takes two special screenshots and saves them, along with the camera information, as <name>.tif, <name>_secondary.tif and <name>_camera.txt
    net_safe_raw: unknown, assumed unsafe
  - slug: cubemap_dynamic_generate
    info:
      en: |-
        ```hsc
        (<void> cubemap_dynamic_generate)
        ```
        Generates a dynamic cubemap and saves in the cubemaps directory.
        See [this guide](~dynamic-cubemaps) for more details.
    net_safe_raw: unknown, assumed unsafe
  - slug: main_menu
    info:
      en: |-
        ```hsc
        (<void> main_menu)
        ```
        goes back to the main menu
    net_safe_raw: unknown, assumed unsafe
  - slug: main_halt
    info:
      en: |-
        ```hsc
        (<void> main_halt)
        ```
        goes to a halted pregame state
    net_safe_raw: unknown, assumed unsafe
  - slug: map_name
    info:
      en: |-
        ```hsc
        (<void> map_name <string>)
        ```
        the same as game_start: launches a game for debugging purposes
    net_safe_raw: unknown, assumed unsafe
  - slug: game_multiplayer
    info:
      en: |-
        ```hsc
        (<void> game_multiplayer <string>)
        ```
        debug map launching: sets the multiplayer engine for the next map.
    net_safe_raw: no, for init.txt only
  - slug: game_splitscreen
    info:
      en: |-
        ```hsc
        (<void> game_splitscreen <long>)
        ```
        debug map launching: sets the number of multiplayer splitscreen players for the next map.
    net_safe_raw: no, for init.txt only
  - slug: game_difficulty
    info:
      en: |-
        ```hsc
        (<void> game_difficulty <game_difficulty>)
        ```
        debug map launching: sets the difficulty of the next map.
    net_safe_raw: no, for init.txt only
  - slug: game_active_primary_skulls
    info:
      en: |-
        ```hsc
        (<void> game_active_primary_skulls <long>)
        ```
        debug map launching: sets the active primary skulls of the next map.
    net_safe_raw: no, for init.txt only
  - slug: game_active_secondary_skulls
    info:
      en: |-
        ```hsc
        (<void> game_active_secondary_skulls <long>)
        ```
        debug map launching: sets the active primary skulls of the next map.
    net_safe_raw: no, for init.txt only
  - slug: game_coop_players
    info:
      en: |-
        ```hsc
        (<void> game_coop_players <long>)
        ```
        debug map launching: sets the number of coop players for the next map.
    net_safe_raw: no, for init.txt only
  - slug: game_initial_zone_set
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> game_initial_zone_set <long>)
        ```
        debug map launching: sets the initial bsp for the next map.
    net_safe_raw: no, for init.txt only
  - slug: game_tick_rate
    info:
      en: |-
        ```hsc
        (<void> game_tick_rate <long>)
        ```
        debug map launching: sets the tick rate for the next map.
    net_safe_raw: no, for init.txt only
  - slug: game_start
    info:
      en: |-
        ```hsc
        (<void> game_start <string>)
        ```
        debug map launching: starts a game on the specified map.
    net_safe_raw: no, for init.txt only
  - slug: game_start_when_ready
    info:
      en: |-
        ```hsc
        (<void> game_start_when_ready)
        ```
        nicely starts the current game once the pregame lobby is stable
    net_safe_raw: no, for init.txt only
  - slug: game_start_when_joined
    info:
      en: |-
        ```hsc
        (<void> game_start_when_joined <long>)
        ```
        nicely starts a game when the specified number of users are in the lobby
    net_safe_raw: no, for init.txt only
  - slug: game_rate
    info:
      en: |-
        ```hsc
        (<void> game_rate <real> <real> <real>)
        ```
        changes game update rate (DANGER: only use if you know what you're doing!)
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_cache_flush
    info:
      en: |-
        ```hsc
        (<void> texture_cache_flush)
        ```
        don't make me kick your ass
    net_safe_raw: unknown, assumed unsafe
  - slug: geometry_cache_flush
    info:
      en: |-
        ```hsc
        (<void> geometry_cache_flush)
        ```
        we fear change
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_cache_flush
    info:
      en: |-
        ```hsc
        (<void> sound_cache_flush)
        ```
        i'm a rebel!
    net_safe_raw: unknown, assumed unsafe
  - slug: animation_cache_flush
    info:
      en: |-
        ```hsc
        (<void> animation_cache_flush)
        ```
        it's just sooooo wrong
    net_safe_raw: unknown, assumed unsafe
  - slug: font_cache_flush
    info:
      en: |-
        ```hsc
        (<void> font_cache_flush)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: language_set
    info:
      en: |-
        ```hsc
        (<void> language_set <string>)
        ```
        change the language for localization
    net_safe_raw: unknown, assumed unsafe
  - slug: texture_cache_test_malloc
    info:
      en: |-
        ```hsc
        (<void> texture_cache_test_malloc)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_memory
    info:
      en: |-
        ```hsc
        (<void> debug_memory)
        ```
        dumps memory leaks.
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_memory_by_file
    info:
      en: |-
        ```hsc
        (<void> debug_memory_by_file)
        ```
        dumps memory leaks by source file.
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_memory_for_file
    info:
      en: |-
        ```hsc
        (<void> debug_memory_for_file <string>)
        ```
        dumps memory leaks from the specified source file.
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_tags
    info:
      en: |-
        ```hsc
        (<void> debug_tags)
        ```
        writes all memory being used by tag files into tag_dump.txt
    net_safe_raw: unknown, assumed unsafe
  - slug: tags_verify_all
    info:
      en: |-
        ```hsc
        (<void> tags_verify_all)
        ```
        verifies usage of infidel fields is correct
    net_safe_raw: unknown, assumed unsafe
  - slug: profiler_enable
    info:
      en: |-
        ```hsc
        (<void> profiler_enable <boolean>)
        ```
        toggles the profile display on/off
    net_safe_raw: unknown, assumed unsafe
  - slug: profiler_set_thread
    info:
      en: |-
        ```hsc
        (<void> profiler_set_thread <long>)
        ```
        sets the thread index being profiled
    net_safe_raw: unknown, assumed unsafe
  - slug: profiler_set_sort_method
    info:
      en: |-
        ```hsc
        (<void> profiler_set_sort_method <long>)
        ```
        sets the sorting method used
    net_safe_raw: unknown, assumed unsafe
  - slug: profiler_set_range
    info:
      en: |-
        ```hsc
        (<void> profiler_set_range <long>)
        ```
        sets the collection range used
    net_safe_raw: unknown, assumed unsafe
  - slug: profiler_set_attribute
    info:
      en: |-
        ```hsc
        (<void> profiler_set_attribute <string>)
        ```
        sets an attribute to profile by name
    net_safe_raw: unknown, assumed unsafe
  - slug: trace_next_frame
    info:
      en: |-
        ```hsc
        (<void> trace_next_frame <long>)
        ```
        creates a tracedump of the next frame
    net_safe_raw: unknown, assumed unsafe
  - slug: trace_next_frame_to_file
    info:
      en: |-
        ```hsc
        (<void> trace_next_frame_to_file <long> <string>)
        ```
        creates a tracedump of the next frame in a specific file
    net_safe_raw: unknown, assumed unsafe
  - slug: trace_tick
    info:
      en: |-
        ```hsc
        (<void> trace_tick <long>)
        ```
        creates a tracedump of a specific game tick
    net_safe_raw: unknown, assumed unsafe
  - slug: collision_log_enable
    info:
      en: |-
        ```hsc
        (<void> collision_log_enable <boolean>)
        ```
        enables or disables collision logging.
    net_safe_raw: unknown, assumed unsafe
  - slug: damage_control_get
    info:
      en: |-
        ```hsc
        (<void> damage_control_get <string>)
        ```
        gets a damage control setting by string
    net_safe_raw: unknown, assumed unsafe
  - slug: damage_control_set
    info:
      en: |-
        ```hsc
        (<void> damage_control_set <string> <boolean>)
        ```
        sets a damage control setting by string
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_lines
    info:
      en: |-
        ```hsc
        (<void> ai_lines)
        ```
        cycles through AI line-spray modes
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_dialogue_break_on_vocalization
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_break_on_vocalization <string_id>)
        ```
        break when the following vocalization is chosen for utterance
    net_safe_raw: unknown, assumed unsafe
  - slug: fade_in
    info:
      en: |-
        ```hsc
        (<void> fade_in <real> <real> <real> <short>)
        ```
        does a screen fade in from a particular color
    net_safe_raw: unknown, assumed unsafe
  - slug: fade_out
    info:
      en: |-
        ```hsc
        (<void> fade_out <real> <real> <real> <short>)
        ```
        does a screen fade out to a particular color
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_start
    info:
      en: |-
        ```hsc
        (<void> cinematic_start)
        ```
        initializes game to start a cinematic (interruptive) cutscene
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_stop
    info:
      en: |-
        ```hsc
        (<void> cinematic_stop)
        ```
        initializes the game to end a cinematic (interruptive) cutscene
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_skip_start_internal
    info:
      en: |-
        ```hsc
        (<void> cinematic_skip_start_internal)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_skip_stop_internal
    info:
      en: |-
        ```hsc
        (<void> cinematic_skip_stop_internal)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_show_letterbox
    info:
      en: |-
        ```hsc
        (<void> cinematic_show_letterbox <boolean>)
        ```
        sets or removes the letterbox bars
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_show_letterbox_immediate
    info:
      en: |-
        ```hsc
        (<void> cinematic_show_letterbox_immediate <boolean>)
        ```
        sets or removes the letterbox bars
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_set_title
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_title <cutscene_title>)
        ```
        activates the chapter title
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_set_title_delayed
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_title_delayed <cutscene_title> <real>)
        ```
        activates the chapter title, delayed by <real> seconds
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_suppress_bsp_object_creation
    info:
      en: |-
        ```hsc
        (<void> cinematic_suppress_bsp_object_creation <boolean>)
        ```
        suppresses or enables the automatic creation of objects during cutscenes due to a bsp switch
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_subtitle
    info:
      en: |-
        ```hsc
        (<void> cinematic_subtitle <string_id> <real>)
        ```
        displays the named subtitle for <real> seconds
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_set
    info:
      en: |-
        ```hsc
        (<void> cinematic_set <cinematic definition>)
        ```
        sets the cinematic name for the current cinematic.
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_set_shot
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_shot <cinematic scene definition> <long>)
        ```
        sets the scene and shot for the current cinematic.
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_get_shot
    info:
      en: |-
        ```hsc
        (<void> cinematic_get_shot)
        ```
        Print the stored scene and shot information to the screen
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_set_early_exit
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_early_exit <long>)
        ```
        Used to store the state of skippable cinematics
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_get_early_exit
    info:
      en: |-
        ```hsc
        (<long> cinematic_get_early_exit)
        ```
        Used to retrieve the state of skippable cinematics
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_set_active_camera
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_active_camera <string_id>)
        ```
        Used to change the rasterizer to display one of the texture cameras
  - slug: cinematic_object_create
    info:
      en: |-
        ```hsc
        (<void> cinematic_object_create <string>)
        ```
        Creates an object for use by cinematics
  - slug: cinematic_object_create_cinematic_anchor
    info:
      en: |-
        ```hsc
        (<void> cinematic_object_create_cinematic_anchor <string> <cutscene_flag>)
        ```
        Creates a cinematic anchor object for use by cinematics
  - slug: cinematic_object_destroy
    info:
      en: |-
        ```hsc
        (<void> cinematic_object_destroy <string>)
        ```
        Destroys an object created by cinematic_object_create
  - slug: cinematic_destroy
    info:
      en: |-
        ```hsc
        (<void> cinematic_destroy)
        ```
        Releases everything created by the cinematics system
  - slug: cinematic_clips_initialize_for_shot
    info:
      en: |-
        ```hsc
        (<void> cinematic_clips_initialize_for_shot <long>)
        ```
        intializes the cinematic clip planes for the given shot of the current cinematic
  - slug: cinematic_clips_destroy
    info:
      en: |-
        ```hsc
        (<void> cinematic_clips_destroy)
        ```
        destroys any existing cinematic clip planes for the current cinematic
  - slug: cinematic_lights_initialize_for_shot
    info:
      en: |-
        ```hsc
        (<void> cinematic_lights_initialize_for_shot <long>)
        ```
        intializes the cinematic lighting for the given shot of the current cinematic
  - slug: cinematic_lights_destroy
    info:
      en: |-
        ```hsc
        (<void> cinematic_lights_destroy)
        ```
        destroys any existing cinematic lights for the current cinematic
  - slug: cinematic_light_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_light_object <object> <string_id> <cinematic_lightprobe> <cutscene_camera_point>)
        ```
        attaches cinematic lights to <object> at <marker> using scenario cinematic lighting palette entry <scenario-cinematic-lighting-name> from point of view of camera reference <camera>
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_light_object_off
    info:
      en: |-
        ```hsc
        (<void> cinematic_light_object_off <object>)
        ```
        Turn off cinematic lighting for the object.
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_lighting_rebuild_all
    info:
      en: |-
        ```hsc
        (<void> cinematic_lighting_rebuild_all)
        ```
        Rebuild all cinematic lighting (SH only)
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_object_get
    info:
      en: |-
        ```hsc
        (<object> cinematic_object_get <string>)
        ```
        Returns an object created by cinematic_object_create
  - slug: cinematic_object_get_unit
    info:
      en: |-
        ```hsc
        (<unit> cinematic_object_get_unit <string>)
        ```
        Returns a unit created by cinematic_object_create
  - slug: cinematic_object_get_scenery
    info:
      en: |-
        ```hsc
        (<scenery> cinematic_object_get_scenery <string>)
        ```
        Returns a scenery object created by cinematic_object_create
  - slug: cinematic_object_get_effect_scenery
    info:
      en: |-
        ```hsc
        (<effect_scenery> cinematic_object_get_effect_scenery <string>)
        ```
        Returns a scenery object created by cinematic_object_create
  - slug: cinematic_reset
    info:
      en: |-
        ```hsc
        (<void> cinematic_reset)
        ```
        Resets the cinematics internal state
  - slug: camera_set_briefing
    info:
      en: |-
        ```hsc
        (<void> camera_set_briefing <boolean>)
        ```
        Used for briefing cinematics
  - slug: definition>
    info:
      en: |-
        ```hsc
        (<cinematic definition> cinematic_tag_reference_get_cinematic <long>)
        ```
        Retrieve a cinematic tag from the cinematic system
  - slug: scene
    info:
      en: |-
        ```hsc
        (<cinematic scene definition> cinematic_tag_reference_get_scene <long> <long>)
        ```
        Retrieve a cinematic tag from the cinematic system
  - slug: cinematic_tag_reference_get_effect
    info:
      en: |-
        ```hsc
        (<effect> cinematic_tag_reference_get_effect <long> <long> <long> <long>)
        ```
        Retrieve an effect tag from the cinematic system
  - slug: cinematic_tag_reference_get_dialogue
    info:
      en: |-
        ```hsc
        (<sound> cinematic_tag_reference_get_dialogue <long> <long> <long> <long>)
        ```
        Retrieve a sound tag from the cinematic system
  - slug: cinematic_tag_reference_get_music
    info:
      en: |-
        ```hsc
        (<sound> cinematic_tag_reference_get_music <long> <long> <long> <long>)
        ```
        Retrieve a sound tag from the cinematic system
  - slug: cinematic_tag_reference_get_music_looping
    info:
      en: |-
        ```hsc
        (<looping_sound> cinematic_tag_reference_get_music_looping <long> <long> <long> <long>)
        ```
        Retrieve a looping sound tag from the cinematic system
  - slug: cinematic_tag_reference_get_animation
    info:
      en: |-
        ```hsc
        (<animation_graph> cinematic_tag_reference_get_animation <long> <long> <long>)
        ```
        Retrieve a looping sound tag from the cinematic system
  - slug: cinematic_scripting_object_coop_flags_valid
    info:
      en: |-
        ```hsc
        (<boolean> cinematic_scripting_object_coop_flags_valid <long> <long> <long>)
        ```
        Evaluate if a cinematic object should be displayed for the current coop flags
  - slug: cinematic_scripting_fade_out
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_fade_out <real> <real> <real> <short>)
        ```
        Fade out at the end of the cinematic
  - slug: cinematic_scripting_create_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_object <long> <long> <long> <object_name>)
        ```
        Create a manually placed cinematic object
  - slug: cinematic_scripting_create_cinematic_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_cinematic_object <long> <long> <long>)
        ```
        Create a manually placed cinematic object
  - slug: cinematic_scripting_start_animation
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_start_animation <long> <long> <long> <object> <string_id>)
        ```
        Animate a manually placed cinematic object
  - slug: cinematic_scripting_destroy_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_destroy_object <long> <long> <long> <object>)
        ```
        Destroy a cinematic object
  - slug: cinematic_scripting_start_effect
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_start_effect <long> <long> <long> <long> <object>)
        ```
        Play a cinematic effect
  - slug: cinematic_scripting_start_music
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_start_music <long> <long> <long> <long>)
        ```
        Play a cinematic music
  - slug: cinematic_scripting_start_dialogue
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_start_dialogue <long> <long> <long> <long> <object>)
        ```
        Play a cinematic dialogue
  - slug: cinematic_scripting_stop_music
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_stop_music <long> <long> <long> <long>)
        ```
        Stops a cinematic music
  - slug: cinematic_scripting_create_and_animate_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_and_animate_object <long> <long> <long> <object_name> <object> <string_id> <boolean>)
        ```
        Create and Animate a cinematic object.
  - slug: cinematic_scripting_create_and_animate_cinematic_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_and_animate_cinematic_object <long> <long> <long> <object> <string_id> <boolean>)
        ```
        Create and Animate a cinematic object.
  - slug: cinematic_scripting_create_and_animate_object_no_animation
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_and_animate_object_no_animation <long> <long> <long> <object_name> <object> <boolean>)
        ```
        Create and Animate a cinematic object.
  - slug: cinematic_scripting_create_and_animate_cinematic_object_no_animation
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_and_animate_cinematic_object_no_animation <long> <long> <long> <object> <boolean>)
        ```
        Create and Animate a cinematic object.
  - slug: cinematic_scripting_play_cortana_effect
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_play_cortana_effect <long> <long> <long> <long>)
        ```
        Play the associated cortana effect.
  - slug: attract_mode_start
    info:
      en: |-
        ```hsc
        (<void> attract_mode_start)
        ```
        starts an attract mode movie
    net_safe_raw: unknown, assumed unsafe
  - slug: attract_mode_set_seconds
    info:
      en: |-
        ```hsc
        (<void> attract_mode_set_seconds <long>)
        ```
        sets number of seconds of the attract mode countdown timer.
    net_safe_raw: unknown, assumed unsafe
  - slug: game_won
    info:
      en: |-
        ```hsc
        (<void> game_won)
        ```
        causes the player to successfully finish the current level and move to the next
    net_safe_raw: unknown, assumed unsafe
  - slug: game_lost
    info:
      en: |-
        ```hsc
        (<void> game_lost <boolean>)
        ```
        marks the game as lost or not lost
    net_safe_raw: unknown, assumed unsafe
  - slug: game_revert
    info:
      en: |-
        ```hsc
        (<void> game_revert)
        ```
        causes the player to revert to their previous saved game (for testing and cinematic skipping only please!)
    net_safe_raw: unknown, assumed unsafe
  - slug: game_is_cooperative
    info:
      en: |-
        ```hsc
        (<boolean> game_is_cooperative)
        ```
        returns TRUE if the game is cooperative
    net_safe_raw: unknown, assumed unsafe
  - slug: game_is_playtest
    info:
      en: |-
        ```hsc
        (<boolean> game_is_playtest)
        ```
        returns the hs global boolean 'global_playtest_mode' which can be set in your init.txt
    net_safe_raw: unknown, assumed unsafe
  - slug: game_can_use_flashlights
    info:
      en: |-
        ```hsc
        (<void> game_can_use_flashlights <boolean>)
        ```
        allows or disallows the user of player flashlights
    net_safe_raw: unknown, assumed unsafe
  - slug: game_save_and_quit
    info:
      en: |-
        ```hsc
        (<void> game_save_and_quit)
        ```
        save & quit to the main menu
    net_safe_raw: unknown, assumed unsafe
  - slug: game_save_unsafe
    info:
      en: |-
        ```hsc
        (<void> game_save_unsafe)
        ```
        saves right now, even if the game is in an immediate-loss state (NEVER USE THIS! EVER!)
    net_safe_raw: unknown, assumed unsafe
  - slug: game_insertion_point_unlock
    info:
      en: |-
        ```hsc
        (<void> game_insertion_point_unlock <short>)
        ```
        unlocks the given insertion point for the current map for all players
    net_safe_raw: unknown, assumed unsafe
  - slug: game_insertion_point_lock
    info:
      en: |-
        ```hsc
        (<void> game_insertion_point_lock <short>)
        ```
        unlocks the given insertion point for the current map for all players
    net_safe_raw: unknown, assumed unsafe
  - slug: saved_games_enumerate
    info:
      en: |-
        ```hsc
        (<void> saved_games_enumerate <controller>)
        ```
        test enumeration of saved game files on a controller
    net_safe_raw: unknown, assumed unsafe
  - slug: saved_games_delete_campaign_save
    info:
      en: |-
        ```hsc
        (<void> saved_games_delete_campaign_save <controller>)
        ```
        delete the campaign saved game file for a controller
    net_safe_raw: unknown, assumed unsafe
  - slug: saved_games_save_last_film
    info:
      en: |-
        ```hsc
        (<void> saved_games_save_last_film <controller>)
        ```
        test saving of last recorded film for a controller
    net_safe_raw: unknown, assumed unsafe
  - slug: saved_games_autosave_free_up_space
    info:
      en: |-
        ```hsc
        (<void> saved_games_autosave_free_up_space)
        ```
        tell the autosave queue to run its cleanup routine for each content type
    net_safe_raw: unknown, assumed unsafe
  - slug: content_catalogue_display_status
    info:
      en: |-
        ```hsc
        (<void> content_catalogue_display_status <controller> <boolean> <boolean>)
        ```
        display the status of content catalogue for a controller, optionally showing only open content items
    net_safe_raw: unknown, assumed unsafe
  - slug: achievement_was_earned_by_player
    info:
      en: |-
        ```hsc
        (<boolean> achievement_was_earned_by_player <short> <string_id>)
        ```
        check if player has been awarded named achievement
    net_safe_raw: unknown, assumed unsafe
  - slug: achievement_grant_to_player
    info:
      en: |-
        ```hsc
        (<void> achievement_grant_to_player <short> <string_id>)
        ```
        award named achievement to player
    net_safe_raw: unknown, assumed unsafe
  - slug: achievements_enable
    info:
      en: |-
        ```hsc
        (<void> achievements_enable <boolean>)
        ```
        enable or disable the awarding of achievements
    net_safe_raw: unknown, assumed unsafe
  - slug: achievements_skip_validation_checks
    info:
      en: |-
        ```hsc
        (<void> achievements_skip_validation_checks <boolean>)
        ```
        toggle the disabling of validation checks on achievement awarding
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_influencers
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_influencers <boolean>)
        ```
        toggle debugging of any & all dynamic respawn influencers
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_respawn_zones
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_respawn_zones <boolean>)
        ```
        debugs respawn zone influences
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_proximity_forbid
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_proximity_forbid <boolean>)
        ```
        debugs enemy proximity forbid influences
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_moving_vehicle
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_moving_vehicle <boolean>)
        ```
        debugs moving vehicle danger influences
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_weapon_influences
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_weapon_influences <boolean>)
        ```
        debugs enemy weapon danger influences
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_dangerous_projectiles
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_dangerous_projectiles <boolean>)
        ```
        debugs dangerous projectile influences
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_deployed_equipment
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_deployed_equipment <boolean>)
        ```
        debugs deployed equipment influences
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_proximity_enemy
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_proximity_enemy <boolean>)
        ```
        debugs enemy proximity bias influences
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_teammates
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_teammates <boolean>)
        ```
        debugs teammate proximity bias influences
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_random_influence
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_random_influence <boolean>)
        ```
        toggles display of random influence contribution
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_nominal_weight
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_nominal_weight <boolean>)
        ```
        toggles display of the nominal weight influence contribution
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_natural_weight
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_natural_weight <boolean>)
        ```
        toggles display of the natural weight influence contribution
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_target
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_target <string>)
        ```
        sets target player for respawn influencer debugging display
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_spawning_use_history
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_use_history <long>)
        ```
        sets the saved respawn state for respawn influencer debugging display
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_initial_spawn_point_objects
    info:
      en: |-
        ```hsc
        (<void> debug_initial_spawn_point_objects <boolean>)
        ```
        toggles debug cycling through multiplayer initial spawn points objects
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_respawn_point_objects
    info:
      en: |-
        ```hsc
        (<void> debug_respawn_point_objects <boolean>)
        ```
        toggles debug cycling through multiplayer respawn points objects
    net_safe_raw: unknown, assumed unsafe
  - slug: game_export_variant_settings
    info:
      en: |-
        ```hsc
        (<void> game_export_variant_settings <string>)
        ```
        export the current game engine variant settings to the specified text file
    net_safe_raw: no
  - slug: game_engine_event_test_general
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_general <long>)
        ```
        test game engine general event
    net_safe_raw: unkown, assumed unsafe
  - slug: game_engine_event_test_flavor
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_flavor <long>)
        ```
        test game engine flavor event
    net_safe_raw: unkown, assumed unsafe
  - slug: game_engine_event_test_slayer
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_slayer <long>)
        ```
        test game engine slayer event
    net_safe_raw: unkown, assumed unsafe
  - slug: game_engine_event_test_ctf
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_ctf <long>)
        ```
        test game engine ctf event
    net_safe_raw: unkown, assumed unsafe
  - slug: game_engine_event_test_oddball
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_oddball <long>)
        ```
        test game engine oddball event
    net_safe_raw: unkown, assumed unsafe
  - slug: game_engine_event_test_king
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_king <long>)
        ```
        test game engine king event
    net_safe_raw: unkown, assumed unsafe
  - slug: game_engine_event_test_vip
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_vip <long>)
        ```
        test game engine vip event
    net_safe_raw: unkown, assumed unsafe
  - slug: game_engine_event_test_juggernaut
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_juggernaut <long>)
        ```
        test game engine juggernaut event
    net_safe_raw: unkown, assumed unsafe
  - slug: game_engine_event_test_territories
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_territories <long>)
        ```
        test game engine territories event
    net_safe_raw: unkown, assumed unsafe
  - slug: game_engine_event_test_assault
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_assault <long>)
        ```
        test game engine assault event
    net_safe_raw: unkown, assumed unsafe
  - slug: game_engine_event_test_infection
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_infection <long>)
        ```
        test game engine infection event
    net_safe_raw: unkown, assumed unsafe
  - slug: core_load
    info:
      en: |-
        ```hsc
        (<void> core_load)
        ```
        loads debug game state from core\core.bin
    net_safe_raw: unknown, assumed unsafe
  - slug: core_load_name
    info:
      en: |-
        ```hsc
        (<void> core_load_name <string>)
        ```
        loads debug game state from core\<path>
    net_safe_raw: unknown, assumed unsafe
  - slug: core_save
    info:
      en: |-
        ```hsc
        (<void> core_save)
        ```
        saves debug game state to core\core.bin
    net_safe_raw: unknown, assumed unsafe
  - slug: core_save_name
    info:
      en: |-
        ```hsc
        (<void> core_save_name <string>)
        ```
        saves debug game state to core\<path>
    net_safe_raw: unknown, assumed unsafe
  - slug: core_load_game
    info:
      en: |-
        ```hsc
        (<void> core_load_game)
        ```
        loads level and game state from core\core.bin
    net_safe_raw: unknown, assumed unsafe
  - slug: core_load_game_name
    info:
      en: |-
        ```hsc
        (<void> core_load_game_name <string>)
        ```
        loads level and game state from core\<path>
    net_safe_raw: unknown, assumed unsafe
  - slug: core_regular_upload_to_debug_server
    info:
      en: |-
        ```hsc
        (<void> core_regular_upload_to_debug_server <boolean>)
        ```
        toggle periodic core uploading to debug server
    net_safe_raw: unknown, assumed unsafe
  - slug: core_set_upload_option
    info:
      en: |-
        ```hsc
        (<void> core_set_upload_option <string>)
        ```
        sets options for game state uploading (current options are 'default', 'repro', and 'stress'
    net_safe_raw: unknown, assumed unsafe
  - slug: force_debugger_not_present
    info:
      en: |-
        ```hsc
        (<void> force_debugger_not_present <boolean>)
        ```
        forces is_debugger_present() to return false
    net_safe_raw: unknown, assumed unsafe
  - slug: force_debugger_always_present
    info:
      en: |-
        ```hsc
        (<void> force_debugger_always_present <boolean>)
        ```
        forces is_debugger_present() to return true
    net_safe_raw: unknown, assumed unsafe
  - slug: game_safe_to_save
    info:
      en: |-
        ```hsc
        (<boolean> game_safe_to_save)
        ```
        returns FALSE if it would be a bad idea to save the player's game right now
    net_safe_raw: unknown, assumed unsafe
  - slug: game_safe_to_speak
    info:
      en: |-
        ```hsc
        (<boolean> game_safe_to_speak)
        ```
        returns FALSE if it would be a bad idea to play mission dialog right now
    net_safe_raw: unknown, assumed unsafe
  - slug: game_all_quiet
    info:
      en: |-
        ```hsc
        (<boolean> game_all_quiet)
        ```
        returns FALSE if there are bad guys around, projectiles in the air, etc.
    net_safe_raw: unknown, assumed unsafe
  - slug: game_save
    info:
      en: |-
        ```hsc
        (<void> game_save)
        ```
        checks to see if it is safe to save game, then saves (gives up after 8 seconds)
    net_safe_raw: unknown, assumed unsafe
  - slug: game_save_cancel
    info:
      en: |-
        ```hsc
        (<void> game_save_cancel)
        ```
        cancels any pending game_save, timeout or not
    net_safe_raw: unknown, assumed unsafe
  - slug: game_save_no_timeout
    info:
      en: |-
        ```hsc
        (<void> game_save_no_timeout)
        ```
        checks to see if it is safe to save game, then saves (this version never gives up)
    net_safe_raw: unknown, assumed unsafe
  - slug: game_save_immediate
    info:
      en: |-
        ```hsc
        (<void> game_save_immediate)
        ```
        disregards player's current situation and saves (BE VERY CAREFUL!)
    net_safe_raw: unknown, assumed unsafe
  - slug: game_saving
    info:
      en: |-
        ```hsc
        (<boolean> game_saving)
        ```
        checks to see if the game is trying to save the map.
    net_safe_raw: unknown, assumed unsafe
  - slug: game_reverted
    info:
      en: |-
        ```hsc
        (<boolean> game_reverted)
        ```
        don't use this for anything, you black-hearted bastards.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_set_tag_parameter_unsafe
    info:
      en: |-
        ```hsc
        (<void> sound_set_tag_parameter_unsafe <string> <string> <long> <long> <long> <real> <real> <real>)
        ```
        this is the second sign of the coming of the antichrist
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_predict
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_predict <sound>)
        ```
        your mom part 2.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_trigger
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_trigger <sound> <object> <real> <long>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_start
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start <sound> <object> <real>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_start_cinematic
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_cinematic <sound> <object> <real> <real> <real>)
        ```
        <sound> <object> <scale> <3d gain> <first person gain> plays an impulse sound from the specified source object.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_start_effect
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_effect <sound> <object> <real> <string_id>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale and effect.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_start_with_subtitle
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_with_subtitle <sound> <object> <real> <string_id> <string_id>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale and displays a subtitle.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_time
    info:
      en: |-
        ```hsc
        (<long> sound_impulse_time <sound>)
        ```
        returns the time remaining for the specified impulse sound.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_time
    info:
      en: |-
        ```hsc
        (<long> sound_impulse_time <sound> <long>)
        ```
        <sound> <total playing time> returns the time remaining for the specified impulse sound based on <total playing time>.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_language_time
    info:
      en: |-
        ```hsc
        (<long> sound_impulse_language_time <sound>)
        ```
        returns the time remaining for the specified impulse sound. DO NOT CALL IN CUTSCENES.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_stop
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_stop <sound>)
        ```
        stops the specified impulse sound.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_start_3d
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_3d <sound> <real> <real>)
        ```
        <sound> <azimuth> <scale> at the sound's minimum distance
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_mark_as_outro
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_mark_as_outro <sound>)
        ```
        marks a sound as outro (meaning it plays past an unskipped cinematic).
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_impulse_start_naked
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_naked <sound> <string_id> <string_id>)
        ```
        <sound> <pitch range name> <permutation index name> through the speakers it was encoded for
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_looping_predict
    info:
      en: |-
        ```hsc
        (<void> sound_looping_predict <looping_sound>)
        ```
        your mom.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_looping_start
    info:
      en: |-
        ```hsc
        (<void> sound_looping_start <looping_sound> <object> <real>)
        ```
        plays a looping sound from the specified source object (or "none"), with the specified scale.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_looping_stop
    info:
      en: |-
        ```hsc
        (<void> sound_looping_stop <looping_sound>)
        ```
        stops the specified looping sound.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_looping_stop_immediately
    info:
      en: |-
        ```hsc
        (<void> sound_looping_stop_immediately <looping_sound>)
        ```
        stops the specified looping sound immediately.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_looping_set_scale
    info:
      en: |-
        ```hsc
        (<void> sound_looping_set_scale <looping_sound> <real>)
        ```
        changes the scale of the sound (which should affect the volume) within the range 0 to 1.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_looping_set_alternate
    info:
      en: |-
        ```hsc
        (<void> sound_looping_set_alternate <looping_sound> <boolean>)
        ```
        enables or disables the alternate loop/alternate end for a looping sound.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_loop_spam
    info:
      en: |-
        ```hsc
        (<void> sound_loop_spam)
        ```
        start all loaded looping sounds
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_class_show_channel
    info:
      en: |-
        ```hsc
        (<void> sound_class_show_channel <string> <boolean>)
        ```
        shows/hides sound classes w/ substring in debug_sound_channels view
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_class_debug_sound_start
    info:
      en: |-
        ```hsc
        (<void> sound_class_debug_sound_start <string> <boolean>)
        ```
        shows/hides when sounds of sound classes w/ substring start
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_sounds_enable
    info:
      en: |-
        ```hsc
        (<void> debug_sounds_enable <string> <boolean>)
        ```
        enables or disables all sound classes matching the substring.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_class_set_gain
    info:
      en: |-
        ```hsc
        (<void> sound_class_set_gain <string> <real> <short>)
        ```
        changes the gain on the specified sound class(es) to the specified gain over the specified number of ticks.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_class_set_gain_db
    info:
      en: |-
        ```hsc
        (<void> sound_class_set_gain_db <string> <real> <short>)
        ```
        changes the gain on the specified sound class(es) to the specified gain(dB) over the specified number of ticks.
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_class_enable_ducker
    info:
      en: |-
        ```hsc
        (<void> sound_class_enable_ducker <string> <boolean>)
        ```
        enables or disables the ducker on all sound classes matching the substring.
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_sound_environment_parameter
    info:
      en: |-
        ```hsc
        (<void> debug_sound_environment_parameter <long> <real>)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_set_global_effect
    info:
      en: |-
        ```hsc
        (<void> sound_set_global_effect <string_id> <real>)
        ```
        bleh
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_set_global_effect_scale
    info:
      en: |-
        ```hsc
        (<void> sound_set_global_effect_scale <string_id> <real>)
        ```
        more bleh
    net_safe_raw: unknown, assumed unsafe
  - slug: vehicle_auto_turret
    info:
      en: |-
        ```hsc
        (<void> vehicle_auto_turret <vehicle> <trigger_volume> <real> <real> <real>)
        ```
        Sets the specified trigger volume and parameters for an auto turret
    net_safe_raw: unknown, assumed unsafe
  - slug: vehicle_hover
    info:
      en: |-
        ```hsc
        (<void> vehicle_hover <vehicle> <boolean>)
        ```
        stops the vehicle from running real physics and runs fake hovering physics instead.
    net_safe_raw: unknown, assumed unsafe
  - slug: vehicle_count_bipeds_killed
    info:
      en: |-
        ```hsc
        (<long> vehicle_count_bipeds_killed <vehicle>)
        ```
        returns how many people this vehicle has killed
    net_safe_raw: unknown, assumed unsafe
  - slug: biped_ragdoll
    info:
      en: |-
        ```hsc
        (<void> biped_ragdoll <unit>)
        ```
        given a dead biped, turns on ragdoll
    net_safe_raw: unknown, assumed unsafe
  - slug: water_float_reset
    info:
      en: |-
        ```hsc
        (<void> water_float_reset <object>)
        ```
        allows an object to continue floating
  - slug: hud_show_training_text
    info:
      en: |-
        ```hsc
        (<void> hud_show_training_text <boolean>)
        ```
        true turns on scripted training text
    net_safe_raw: unknown, assumed unsafe
  - slug: hud_set_training_text
    info:
      en: |-
        ```hsc
        (<void> hud_set_training_text <string_id>)
        ```
        sets the string id fo the scripted training text
    net_safe_raw: unknown, assumed unsafe
  - slug: hud_enable_training
    info:
      en: |-
        ```hsc
        (<void> hud_enable_training <boolean>)
        ```
        true turns training on, false turns it off.
    net_safe_raw: unknown, assumed unsafe
  - slug: player_training_activate_flashlight
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_flashlight)
        ```
        guess
    net_safe_raw: unknown, assumed unsafe
  - slug: player_training_activate_crouch
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_crouch)
        ```
        guess
    net_safe_raw: unknown, assumed unsafe
  - slug: player_training_activate_stealth
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_stealth)
        ```
        guess
    net_safe_raw: unknown, assumed unsafe
  - slug: player_training_activate_equipment
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_equipment)
        ```
        guess
    net_safe_raw: unknown, assumed unsafe
  - slug: player_training_activate_jump
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_jump)
        ```
        guess
    net_safe_raw: unknown, assumed unsafe
  - slug: hud_activate_team_nav_point_flag
    info:
      en: |-
        ```hsc
        (<void> hud_activate_team_nav_point_flag <team> <cutscene_flag> <real>)
        ```
        activates a nav point type <string> attached to a team anchored to a flag with a vertical offset <real>. If the player is not local to the machine, this will fail
    net_safe_raw: unknown, assumed unsafe
  - slug: hud_deactivate_team_nav_point_flag
    info:
      en: |-
        ```hsc
        (<void> hud_deactivate_team_nav_point_flag <team> <cutscene_flag>)
        ```
        deactivates a nav point type attached to a team anchored to a flag
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_cortana_suck
    info:
      en: |-
        ```hsc
        (<void> chud_cortana_suck <object> <string_id> <boolean>)
        ```
        turns on the cortana suck, attached to the object at the given marker
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_texture_cam
    info:
      en: |-
        ```hsc
        (<void> chud_texture_cam <boolean>)
        ```
        turns the chud texturecam on/off
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_cortana_set_range_multiplier
    info:
      en: |-
        ```hsc
        (<void> chud_cortana_set_range_multiplier <real>)
        ```
        scales the cortana effect distances
    net_safe_raw: unknown, assumed unsafe
  - slug: play_cortana_effect
    info:
      en: |-
        ```hsc
        (<void> play_cortana_effect <string_id>)
        ```
        scales the cortana effect distances
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_show
    info:
      en: |-
        ```hsc
        (<void> chud_show <boolean>)
        ```
        hides/shows the entire chud
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_show_weapon_stats
    info:
      en: |-
        ```hsc
        (<void> chud_show_weapon_stats <boolean>)
        ```
        hides/shows the weapon huds
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_show_crosshair
    info:
      en: |-
        ```hsc
        (<void> chud_show_crosshair <boolean>)
        ```
        hides/shows the crosshair
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_show_shield
    info:
      en: |-
        ```hsc
        (<void> chud_show_shield <boolean>)
        ```
        hides/shows the shield
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_show_grenades
    info:
      en: |-
        ```hsc
        (<void> chud_show_grenades <boolean>)
        ```
        hides/shows the grenade hud
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_show_messages
    info:
      en: |-
        ```hsc
        (<void> chud_show_messages <boolean>)
        ```
        hides/shows the chud messages
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_show_motion_sensor
    info:
      en: |-
        ```hsc
        (<void> chud_show_motion_sensor <boolean>)
        ```
        hides/shows the motion sensor chud
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_show_spike_grenades
    info:
      en: |-
        ```hsc
        (<void> chud_show_spike_grenades <boolean>)
        ```
        hides/shows the spike grenade chud
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_show_fire_grenades
    info:
      en: |-
        ```hsc
        (<void> chud_show_fire_grenades <boolean>)
        ```
        hides/shows the firebomb chud
    net_safe_raw: unknown, assumed unsafe
  - slug: chud_cinematic_fade
    info:
      en: |-
        ```hsc
        (<void> chud_cinematic_fade <real> <real>)
        ```
        parameter 1 is how, parameter 2 is when
    net_safe_raw: unknown, assumed unsafe
  - slug: cls
    info:
      en: |-
        ```hsc
        (<void> cls)
        ```
        clears console text from the screen
    net_safe_raw: unknown, assumed unsafe
  - slug: events_spam_suppression_enable
    info:
      en: |-
        ```hsc
        (<void> events_spam_suppression_enable <boolean>)
        ```
        enables or disables the suppression of event spamming
    net_safe_raw: unknown, assumed unsafe
  - slug: error_geometry_show
    info:
      en: |-
        ```hsc
        (<void> error_geometry_show <string>)
        ```
        highlights all error geometry with a name that includes the given substring
    net_safe_raw: unknown, assumed unsafe
  - slug: error_geometry_hide
    info:
      en: |-
        ```hsc
        (<void> error_geometry_hide <string>)
        ```
        hides all error geometry with a name that includes the given substring
    net_safe_raw: unknown, assumed unsafe
  - slug: error_geometry_show_all
    info:
      en: |-
        ```hsc
        (<void> error_geometry_show_all)
        ```
        highlights all error geometry
    net_safe_raw: unknown, assumed unsafe
  - slug: error_geometry_hide_all
    info:
      en: |-
        ```hsc
        (<void> error_geometry_hide_all)
        ```
        hides all error geometry
    net_safe_raw: unknown, assumed unsafe
  - slug: error_geometry_list
    info:
      en: |-
        ```hsc
        (<void> error_geometry_list)
        ```
        prints out a list of all error geometry types and counts
    net_safe_raw: unknown, assumed unsafe
  - slug: player_effect_set_max_translation
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_translation <real> <real> <real>)
        ```
        <x> <y> <z>
    net_safe_raw: unknown, assumed unsafe
  - slug: player_effect_set_max_rotation
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_rotation <real> <real> <real>)
        ```
        <yaw> <pitch> <roll>
    net_safe_raw: unknown, assumed unsafe
  - slug: player_effect_set_max_rumble
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_rumble <real> <real>)
        ```
        <left> <right>
    net_safe_raw: unknown, assumed unsafe
  - slug: player_effect_start
    info:
      en: |-
        ```hsc
        (<void> player_effect_start <real> <real>)
        ```
        <max_intensity> <attack time>
    net_safe_raw: unknown, assumed unsafe
  - slug: player_effect_stop
    info:
      en: |-
        ```hsc
        (<void> player_effect_stop <real>)
        ```
        <decay>
    net_safe_raw: unknown, assumed unsafe
  - slug: time_code_show
    info:
      en: |-
        ```hsc
        (<void> time_code_show <boolean>)
        ```
        shows the time code timer
    net_safe_raw: unknown, assumed unsafe
  - slug: time_code_start
    info:
      en: |-
        ```hsc
        (<void> time_code_start <boolean>)
        ```
        starts/stops the time code timer
    net_safe_raw: unknown, assumed unsafe
  - slug: time_code_reset
    info:
      en: |-
        ```hsc
        (<void> time_code_reset)
        ```
        resets the time code timer
    net_safe_raw: unknown, assumed unsafe
  - slug: render_atmosphere_fog
    info:
      en: |-
        ```hsc
        (<void> render_atmosphere_fog <boolean>)
        ```
        enable/disable atmosphere fog
    net_safe_raw: unknown, assumed unsafe
  - slug: motion_blur
    info:
      en: |-
        ```hsc
        (<void> motion_blur <boolean>)
        ```
        enable/disable motion blur
    net_safe_raw: unknown, assumed unsafe
  - slug: render_weather
    info:
      en: |-
        ```hsc
        (<void> render_weather <boolean>)
        ```
        enable/disable atmosphere fog
    net_safe_raw: unknown, assumed unsafe
  - slug: render_patchy_fog
    info:
      en: |-
        ```hsc
        (<void> render_patchy_fog <boolean>)
        ```
        enable/disable patchy fog
    net_safe_raw: unknown, assumed unsafe
  - slug: player_has_skills
    info:
      en: |-
        ```hsc
        (<boolean> player_has_skills)
        ```
        Are you the best?
    net_safe_raw: unknown, assumed unsafe
  - slug: player_has_mad_secret_skills
    info:
      en: |-
        ```hsc
        (<void> player_has_mad_secret_skills <long>)
        ```
        You are the best!
    net_safe_raw: unknown, assumed unsafe
  - slug: controller_invert_look
    info:
      en: |-
        ```hsc
        (<void> controller_invert_look)
        ```
        invert look on all attached controllers
    net_safe_raw: unknown, assumed unsafe
  - slug: controller_look_speed
    info:
      en: |-
        ```hsc
        (<void> controller_look_speed <short>)
        ```
        set look speed for all attached controllers
    net_safe_raw: unknown, assumed unsafe
  - slug: controller_set_look_invert
    info:
      en: |-
        ```hsc
        (<void> controller_set_look_invert <boolean>)
        ```
        invert player0's look
    net_safe_raw: unknown, assumed unsafe
  - slug: controller_get_look_invert
    info:
      en: |-
        ```hsc
        (<boolean> controller_get_look_invert)
        ```
        returns TRUE if player0's look pitch is inverted
    net_safe_raw: unknown, assumed unsafe
  - slug: user_interface_controller_get_last_level_played
    info:
      en: |-
        ```hsc
        (<long> user_interface_controller_get_last_level_played <short>)
        ```
        returns index of last completed solo level for profile index passed in
    net_safe_raw: unknown, assumed unsafe
  - slug: controller_set_look_inverted
    info:
      en: |-
        ```hsc
        (<void> controller_set_look_inverted <controller> <boolean>)
        ```
        set look inversion for specified controller
    net_safe_raw: no
  - slug: controller_set_vibration_enabled
    info:
      en: |-
        ```hsc
        (<void> controller_set_vibration_enabled <controller> <boolean>)
        ```
        set vibration for specified controller
    net_safe_raw: no
  - slug: controller_set_flight_stick_aircraft_controls
    info:
      en: |-
        ```hsc
        (<void> controller_set_flight_stick_aircraft_controls <controller> <boolean>)
        ```
        set airrcraft flight stick controls for specified controller
    net_safe_raw: no
  - slug: controller_set_auto_center_look
    info:
      en: |-
        ```hsc
        (<void> controller_set_auto_center_look <controller> <boolean>)
        ```
        set auto center look for specified controller
    net_safe_raw: no
  - slug: controller_set_crouch_lock
    info:
      en: |-
        ```hsc
        (<void> controller_set_crouch_lock <controller> <boolean>)
        ```
        set crouch lock for specified controller
    net_safe_raw: no
  - slug: controller_set_button_preset
    info:
      en: |-
        ```hsc
        (<void> controller_set_button_preset <controller> <button preset>)
        ```
        set button preset for specified controller
    net_safe_raw: no
  - slug: controller_set_joystick_preset
    info:
      en: |-
        ```hsc
        (<void> controller_set_joystick_preset <controller> <joystick preset>)
        ```
        set joystick preset for specified controller
    net_safe_raw: no
  - slug: controller_set_look_sensitivity
    info:
      en: |-
        ```hsc
        (<void> controller_set_look_sensitivity <controller> <short>)
        ```
        set look sensitivity for specified controller
    net_safe_raw: no
  - slug: controller_unlock_single_player_levels
    info:
      en: |-
        ```hsc
        (<void> controller_unlock_single_player_levels <controller>)
        ```
        <controller> unlock all single player levels for specified controller
    net_safe_raw: no
  - slug: controller_lock_single_player_levels
    info:
      en: |-
        ```hsc
        (<void> controller_lock_single_player_levels <controller>)
        ```
        <controller> lock all single player levels for specified controller
    net_safe_raw: no
  - slug: controller_unlock_skulls
    info:
      en: |-
        ```hsc
        (<void> controller_unlock_skulls <controller>)
        ```
        <controller> unlock all campaign skulls for specified controller
    net_safe_raw: no
  - slug: controller_lock_skulls
    info:
      en: |-
        ```hsc
        (<void> controller_lock_skulls <controller>)
        ```
        <controller> lock all campaign skulls for specified controller
    net_safe_raw: no
  - slug: controller_unlock_models
    info:
      en: |-
        ```hsc
        (<void> controller_unlock_models <controller>)
        ```
        <controller> unlock all model permutations for specified controller
    net_safe_raw: no
  - slug: controller_lock_models
    info:
      en: |-
        ```hsc
        (<void> controller_lock_models <controller>)
        ```
        <controller> lock all model permutations for specified controller
    net_safe_raw: no
  - slug: controller_set_single_player_level_completed
    info:
      en: |-
        ```hsc
        (<void> controller_set_single_player_level_completed <controller> <long> <boolean> <game_difficulty> <boolean>)
        ```
        <controller> <level index> <co-op> <difficulty> <completed> set the single player levels completed state for specified controller
    net_safe_raw: no
  - slug: controller_set_primary_change_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_primary_change_color <controller> <player color>)
        ```
        set primary change color for specified controller
    net_safe_raw: no
  - slug: controller_set_secondary_change_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_secondary_change_color <controller> <player color>)
        ```
        set secondary change color for specified controller
    net_safe_raw: no
  - slug: controller_set_tertiary_change_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_tertiary_change_color <controller> <player color>)
        ```
        set tertiary color for specified controller
    net_safe_raw: no
  - slug: controller_set_primary_emblem_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_primary_emblem_color <controller> <player color>)
        ```
        set primary change color for specified controller
    net_safe_raw: no
  - slug: controller_set_secondary_emblem_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_secondary_emblem_color <controller> <player color>)
        ```
        set secondary change color for specified controller
    net_safe_raw: no
  - slug: controller_set_background_emblem_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_background_emblem_color <controller> <player color>)
        ```
        set tertiary color for specified controller
    net_safe_raw: no
  - slug: controller_set_player_character_type
    info:
      en: |-
        ```hsc
        (<void> controller_set_player_character_type <controller> <player character type>)
        ```
        set player character type for specified controller
    net_safe_raw: no
  - slug: controller_set_emblem_info
    info:
      en: |-
        ```hsc
        (<void> controller_set_emblem_info <controller> <short> <short>)
        ```
        set emblem for specified controller
    net_safe_raw: no
  - slug: controller_set_voice_output_setting
    info:
      en: |-
        ```hsc
        (<void> controller_set_voice_output_setting <controller> <voice output setting>)
        ```
        set voice output setting for specified controller
    net_safe_raw: no
  - slug: controller_set_voice_mask
    info:
      en: |-
        ```hsc
        (<void> controller_set_voice_mask <controller> <voice mask>)
        ```
        set voice mask for specified controller
    net_safe_raw: no
  - slug: controller_set_subtitle_setting
    info:
      en: |-
        ```hsc
        (<void> controller_set_subtitle_setting <controller> <subtitle setting>)
        ```
        set subtitle setting for specified controller
    net_safe_raw: no
  - slug: controller_set_unsignedin_user
    info:
      en: |-
        ```hsc
        (<void> controller_set_unsignedin_user <controller> <boolean>)
        ```
        Toggle controller as unsigned-in user
    net_safe_raw: unknown, assumed unsafe
  - slug: controller_display_storage_device_selection
    info:
      en: |-
        ```hsc
        (<void> controller_display_storage_device_selection <controller>)
        ```
        display storage device selection ui for the specified controller
    net_safe_raw: unknown, assumed unsafe
  - slug: font_cache_bitmap_save
    info:
      en: |-
        ```hsc
        (<void> font_cache_bitmap_save <string>)
        ```
        save font cache bitmap to targa file
    net_safe_raw: unknown, assumed unsafe
  - slug: ui_debug_load_main_menu
    info:
      en: |-
        ```hsc
        (<void> ui_debug_load_main_menu)
        ```
        loads the main menu screen
    net_safe_raw: unknown, assumed unsafe
  - slug: ui_debug_text_bounds
    info:
      en: |-
        ```hsc
        (<void> ui_debug_text_bounds <boolean>)
        ```
        toggle rendering of ui text boundaries
    net_safe_raw: unknown, assumed unsafe
  - slug: ui_debug_text_font
    info:
      en: |-
        ```hsc
        (<void> ui_debug_text_font <boolean>)
        ```
        toggle display of ui text font
    net_safe_raw: unknown, assumed unsafe
  - slug: ui_debug_show_title_safe_bounds
    info:
      en: |-
        ```hsc
        (<void> ui_debug_show_title_safe_bounds <boolean>)
        ```
        toggle display of title safe boundary
    net_safe_raw: unknown, assumed unsafe
  - slug: ui_debug_element_bounds
    info:
      en: |-
        ```hsc
        (<void> ui_debug_element_bounds <boolean>)
        ```
        toggle rendering of widget tag block bounds
    net_safe_raw: unknown, assumed unsafe
  - slug: ui_memory_dump
    info:
      en: |-
        ```hsc
        (<void> ui_memory_dump <string>)
        ```
        dump the UI memory tracked allocations to a specified file
    net_safe_raw: unknown, assumed unsafe
  - slug: ui_time_scale_step
    info:
      en: |-
        ```hsc
        (<void> ui_time_scale_step <real>)
        ```
        move the ui time forward by a specified amount on next tick
    net_safe_raw: unknown, assumed unsafe
  - slug: xoverlapped_debug_render
    info:
      en: |-
        ```hsc
        (<void> xoverlapped_debug_render <boolean>)
        ```
        toggle display a list of active xoverlapped tasks
    net_safe_raw: unknown, assumed unsafe
  - slug: gui_load_screen
    info:
      en: |-
        ```hsc
        (<void> gui_load_screen <string_id>)
        ```
        load the named screen
    net_safe_raw: no
  - slug: gui_reset
    info:
      en: |-
        ```hsc
        (<void> gui_reset)
        ```
        cleans out the halox ui screens and errors
  - slug: gui_start
    info:
      en: |-
        ```hsc
        (<void> gui_start)
        ```
        tells the window location manager to resume
  - slug: gui_stop
    info:
      en: |-
        ```hsc
        (<void> gui_stop)
        ```
        tells the window location manager to stop bringing up screens on its own
  - slug: gui_error_post
    info:
      en: |-
        ```hsc
        (<void> gui_error_post <string_id> <long> <boolean>)
        ```
        <error_code> <controller_index> <must_be_cleared> sets an error condition in the ui
  - slug: gui_error_post_toast
    info:
      en: |-
        ```hsc
        (<void> gui_error_post_toast <string_id> <long> <boolean>)
        ```
        <error_code> <controller_index> <must_be_cleared> sets an error condition in the ui
  - slug: gui_error_resolve
    info:
      en: |-
        ```hsc
        (<void> gui_error_resolve <string_id> <long>)
        ```
        <error_name> <controller_index> resolves an error condition in the ui
  - slug: gui_error_clear
    info:
      en: |-
        ```hsc
        (<void> gui_error_clear <string_id> <long>)
        ```
        <error_name> <controller_index> clears an error condition in the ui
  - slug: gui_dialog_show
    info:
      en: |-
        ```hsc
        (<void> gui_dialog_show <string_id>)
        ```
        <dialog name>
  - slug: gui_spartan_milestone_show
    info:
      en: |-
        ```hsc
        (<void> gui_spartan_milestone_show <short>)
        ```
        show dialog for milestone upgrade (1..3)
    net_safe_raw: no
  - slug: gui_spartan_rank_show
    info:
      en: |-
        ```hsc
        (<void> gui_spartan_rank_show <short>)
        ```
        show toast for rank upgrade (1..36)
    net_safe_raw: no
  - slug: gui_print_active_screens
    info:
      en: |-
        ```hsc
        (<void> gui_print_active_screens)
        ```
        display list of active halox ui screens
  - slug: gui_print_active_screen_strings
    info:
      en: |-
        ```hsc
        (<void> gui_print_active_screen_strings)
        ```
        display strings tag file name for current topmost screen
    net_safe_raw: no
  - slug: gui_debug_screen_name
    info:
      en: |-
        ```hsc
        (<void> gui_debug_screen_name <string_id> <boolean> <boolean>)
        ```
        Toggle display of given screen's name, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_screen_animation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_screen_animation <string_id> <boolean> <boolean>)
        ```
        Toggle display of given screen animations, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_screen_bounds
    info:
      en: |-
        ```hsc
        (<void> gui_debug_screen_bounds <string_id> <boolean> <boolean>)
        ```
        Toggle display of given screen's bounds, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_screen_rotation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_screen_rotation <string_id> <boolean> <boolean>)
        ```
        Toggle display of given screen's rotation, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_group_name
    info:
      en: |-
        ```hsc
        (<void> gui_debug_group_name <string_id> <boolean> <boolean>)
        ```
        Toggle display of given group's name, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_group_animation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_group_animation <string_id> <boolean> <boolean>)
        ```
        Toggle display of given group's animations, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_group_bounds
    info:
      en: |-
        ```hsc
        (<void> gui_debug_group_bounds <string_id> <boolean> <boolean>)
        ```
        Toggle display of given group's bounds, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_group_rotation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_group_rotation <string_id> <boolean> <boolean>)
        ```
        Toggle display of given group's rotation, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_list_name
    info:
      en: |-
        ```hsc
        (<void> gui_debug_list_name <string_id> <boolean> <boolean>)
        ```
        Toggle display of given list's name, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_list_animation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_list_animation <string_id> <boolean> <boolean>)
        ```
        Toggle display of given list's animations, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_list_bounds
    info:
      en: |-
        ```hsc
        (<void> gui_debug_list_bounds <string_id> <boolean> <boolean>)
        ```
        Toggle display of given list's bounds, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_list_rotation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_list_rotation <string_id> <boolean> <boolean>)
        ```
        Toggle display of given list's rotation, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_list_item_name
    info:
      en: |-
        ```hsc
        (<void> gui_debug_list_item_name <string_id> <boolean> <boolean>)
        ```
        Toggle display of given list item's name, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_list_item_animation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_list_item_animation <string_id> <boolean> <boolean>)
        ```
        Toggle display of given list item's animation, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_list_item_bounds
    info:
      en: |-
        ```hsc
        (<void> gui_debug_list_item_bounds <string_id> <boolean> <boolean>)
        ```
        Toggle display of given list item's bounds, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_list_item_rotation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_list_item_rotation <string_id> <boolean> <boolean>)
        ```
        Toggle display of given list item's rotation, optionally recursive
    net_safe_raw: no
  - slug: gui_debug_text_name
    info:
      en: |-
        ```hsc
        (<void> gui_debug_text_name <string_id> <boolean>)
        ```
        Toggle display of given text widget's name
    net_safe_raw: no
  - slug: gui_debug_text_animation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_text_animation <string_id> <boolean>)
        ```
        Toggle display of given text widget's animation state
    net_safe_raw: no
  - slug: gui_debug_text_bounds
    info:
      en: |-
        ```hsc
        (<void> gui_debug_text_bounds <string_id> <boolean>)
        ```
        Toggle display of given text widget's bounds
    net_safe_raw: no
  - slug: gui_debug_text_rotation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_text_rotation <string_id> <boolean>)
        ```
        Toggle display of given text widget's rotation
    net_safe_raw: no
  - slug: gui_debug_bitmap_name
    info:
      en: |-
        ```hsc
        (<void> gui_debug_bitmap_name <string_id> <boolean>)
        ```
        Toggle display of given bitmap widget's name
    net_safe_raw: no
  - slug: gui_debug_bitmap_animation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_bitmap_animation <string_id> <boolean>)
        ```
        Toggle display of given bitmap widget's animation state
    net_safe_raw: no
  - slug: gui_debug_bitmap_bounds
    info:
      en: |-
        ```hsc
        (<void> gui_debug_bitmap_bounds <string_id> <boolean>)
        ```
        Toggle display of given bitmap widget's bounds
    net_safe_raw: no
  - slug: gui_debug_bitmap_rotation
    info:
      en: |-
        ```hsc
        (<void> gui_debug_bitmap_rotation <string_id> <boolean>)
        ```
        Toggle display of given bitmap widget's rotation
    net_safe_raw: no
  - slug: gui_debug_music_state
    info:
      en: |-
        ```hsc
        (<void> gui_debug_music_state <boolean>)
        ```
        Toggle display of UI music state
    net_safe_raw: no
  - slug: cc_enable
    info:
      en: |-
        ```hsc
        (<void> cc_enable <boolean>)
        ```
        toggle closed captions
    net_safe_raw: unknown, assumed unsafe
  - slug: cc_test
    info:
      en: |-
        ```hsc
        (<void> cc_test <boolean>)
        ```
        test a line of cc text
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_clear
    info:
      en: |-
        ```hsc
        (<void> objectives_clear)
        ```
        clears the mission objectives.
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_show_up_to
    info:
      en: |-
        ```hsc
        (<void> objectives_show_up_to <long>)
        ```
        show primary campaign objectives 0..n
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_finish_up_to
    info:
      en: |-
        ```hsc
        (<void> objectives_finish_up_to <long>)
        ```
        mark primary campaign objectives 0..n as complete
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_secondary_show
    info:
      en: |-
        ```hsc
        (<void> objectives_secondary_show <long>)
        ```
        show secondary campaign objective N
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_secondary_finish
    info:
      en: |-
        ```hsc
        (<void> objectives_secondary_finish <long>)
        ```
        mark secondary campaign objective N as complete
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_secondary_unavailable
    info:
      en: |-
        ```hsc
        (<void> objectives_secondary_unavailable <long>)
        ```
        mark secondary campaign objective N as unavailable
    net_safe_raw: unknown, assumed unsafe
  - slug: input_suppress_rumble
    info:
      en: |-
        ```hsc
        (<void> input_suppress_rumble <boolean>)
        ```
        disable the friggin' rumble
    net_safe_raw: unknown, assumed unsafe
  - slug: input_disable_claw_button_combos
    info:
      en: |-
        ```hsc
        (<void> input_disable_claw_button_combos <boolean>)
        ```
        disabe the Claw button combos (for monkey testing)
    net_safe_raw: unknown, assumed unsafe
  - slug: update_remote_camera
    info:
      en: |-
        ```hsc
        (<void> update_remote_camera)
        ```
        force synchronization of remote machine camera
    net_safe_raw: unknown, assumed unsafe
  - slug: net_build_network_config
    info:
      en: |-
        ```hsc
        (<void> net_build_network_config)
        ```
        writes a new network configuration file
    net_safe_raw: unknown, assumed unsafe
  - slug: net_build_game_variant
    info:
      en: |-
        ```hsc
        (<void> net_build_game_variant <string>)
        ```
        writes the current game variant to a file
    net_safe_raw: yes
  - slug: net_verify_game_variant
    info:
      en: |-
        ```hsc
        (<void> net_verify_game_variant <string>)
        ```
        verifies the contents of a packed game variant file
    net_safe_raw: unknown, assumed unsafe
  - slug: net_load_and_use_game_variant
    info:
      en: |-
        ```hsc
        (<void> net_load_and_use_game_variant <string>)
        ```
        loads the contents of a packed game variant file and submits to networking for use in the current game
    net_safe_raw: unknown, assumed unsafe
  - slug: net_use_hopper_directory
    info:
      en: |-
        ```hsc
        (<void> net_use_hopper_directory <string>)
        ```
        set which hopper directory to use
    net_safe_raw: unknown, assumed unsafe
  - slug: net_quality_dump
    info:
      en: |-
        ```hsc
        (<void> net_quality_dump)
        ```
        dump all network quality statistics
    net_safe_raw: unknown, assumed unsafe
  - slug: net_quality_clear
    info:
      en: |-
        ```hsc
        (<void> net_quality_clear)
        ```
        clear all network quality statistics
    net_safe_raw: unknown, assumed unsafe
  - slug: net_quality_set_connection_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_connection_badness_history <boolean> <short>)
        ```
        set connection history, true/false, # of bits to set
    net_safe_raw: yes
  - slug: net_quality_set_squad_host_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_squad_host_badness_history <boolean> <short>)
        ```
        set host badness history, true/false, # of bits to set
    net_safe_raw: yes
  - slug: net_quality_set_squad_client_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_squad_client_badness_history <boolean> <short>)
        ```
        set client badness history, true/false, # of bits to set
    net_safe_raw: yes
  - slug: net_quality_set_group_host_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_group_host_badness_history <boolean> <short>)
        ```
        set host badness history, true/false, # of bits to set
    net_safe_raw: yes
  - slug: net_quality_set_group_client_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_group_client_badness_history <boolean> <short>)
        ```
        set client badness history, true/false, # of bits to set
    net_safe_raw: yes
  - slug: net_quality_set_estimated_bandwidth
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_estimated_bandwidth <boolean> <long>)
        ```
        set upstream bandwidth history, <is reliable> <bandwidth in kbps>
    net_safe_raw: yes
  - slug: net_join_friend
    info:
      en: |-
        ```hsc
        (<void> net_join_friend <string>)
        ```
        join a friend's squad session, 'none' to cancel a previous join
    net_safe_raw: yes
  - slug: net_join_squad_to_friend
    info:
      en: |-
        ```hsc
        (<void> net_join_squad_to_friend <string>)
        ```
        join our squad to a friend's squad session, 'none' to cancel a previous join
    net_safe_raw: yes
  - slug: net_join_sessionid
    info:
      en: |-
        ```hsc
        (<void> net_join_sessionid <string>)
        ```
        join a squad session by sessionid, 'none' to cancel a previous join
    net_safe_raw: yes
  - slug: net_join_squad_to_sessionid
    info:
      en: |-
        ```hsc
        (<void> net_join_squad_to_sessionid <string>)
        ```
        join a squad session by sessionid, 'none' to cancel a previous join
    net_safe_raw: yes
  - slug: net_enable_join_friend_loop
    info:
      en: |-
        ```hsc
        (<void> net_enable_join_friend_loop <long>)
        ```
        randomly join a friend every <param> seconds, 0 to reset
    net_safe_raw: yes
  - slug: net_set_maximum_player_count
    info:
      en: |-
        ```hsc
        (<void> net_set_maximum_player_count <long>)
        ```
        sets the maximum player count for this squad
    net_safe_raw: yes
  - slug: net_set_campaign_insertion_point
    info:
      en: |-
        ```hsc
        (<void> net_set_campaign_insertion_point <short>)
        ```
        sets the campaign insertion point for this squad
    net_safe_raw: yes
  - slug: net_status_filter
    info:
      en: |-
        ```hsc
        (<void> net_status_filter <string>)
        ```
        filters the set of network status to display
    net_safe_raw: yes
  - slug: net_sim_reset
    info:
      en: |-
        ```hsc
        (<void> net_sim_reset)
        ```
        network simulation: resets the simulation state
    net_safe_raw: yes
  - slug: net_sim_spike_now
    info:
      en: |-
        ```hsc
        (<void> net_sim_spike_now)
        ```
        network simulation: starts a latency spike immediately
    net_safe_raw: yes
  - slug: net_sim_dropspike_now
    info:
      en: |-
        ```hsc
        (<void> net_sim_dropspike_now)
        ```
        network simulation: starts a packet loss spike immediately
    net_safe_raw: yes
  - slug: net_test_ping
    info:
      en: |-
        ```hsc
        (<void> net_test_ping)
        ```
        network test: sends a ping
    net_safe_raw: yes
  - slug: net_test_channel_delete
    info:
      en: |-
        ```hsc
        (<void> net_test_channel_delete)
        ```
        network test: deletes all channels
    net_safe_raw: yes
  - slug: net_test_delegate_host
    info:
      en: |-
        ```hsc
        (<void> net_test_delegate_host <long>)
        ```
        network test: delegate host to the specified player
    net_safe_raw: yes
  - slug: net_test_delegate_leader
    info:
      en: |-
        ```hsc
        (<void> net_test_delegate_leader <long>)
        ```
        network test: delegate leadership to the specified player
    net_safe_raw: yes
  - slug: net_test_map_name
    info:
      en: |-
        ```hsc
        (<void> net_test_map_name <string>)
        ```
        network test: sets the name of the scenario to play
    net_safe_raw: yes
  - slug: net_test_variant
    info:
      en: |-
        ```hsc
        (<void> net_test_variant <string>)
        ```
        network test: sets the game variant to play
    net_safe_raw: yes
  - slug: net_test_campaign_difficulty
    info:
      en: |-
        ```hsc
        (<void> net_test_campaign_difficulty <short>)
        ```
        network test: sets the difficulty of the campaign game to play
    net_safe_raw: yes
  - slug: net_test_player_color
    info:
      en: |-
        ```hsc
        (<void> net_test_player_color <long>)
        ```
        network test: temporarily sets the color for all local players
    net_safe_raw: yes
  - slug: net_test_reset_objects
    info:
      en: |-
        ```hsc
        (<void> net_test_reset_objects)
        ```
        network test: resets all objects on the map
    net_safe_raw: yes
  - slug: net_test_fatal_error
    info:
      en: |-
        ```hsc
        (<void> net_test_fatal_error)
        ```
        creates a fatal simulation error
    net_safe_raw: yes
  - slug: net_set_machine_name
    info:
      en: |-
        ```hsc
        (<void> net_set_machine_name <string>)
        ```
        sets the nickname of your xbox
    net_safe_raw: unknown, assumed unsafe
  - slug: events_enabled
    info:
      en: |-
        ```hsc
        (<void> events_enabled <boolean>)
        ```
        enable/disable all events
    net_safe_raw: no
  - slug: events_disable_suppression
    info:
      en: |-
        ```hsc
        (<void> events_disable_suppression <boolean>)
        ```
        enable/disable event suppression
    net_safe_raw: no
  - slug: event_global_display_category
    info:
      en: |-
        ```hsc
        (<void> event_global_display_category <event>)
        ```
        sets the global event display level
    net_safe_raw: unknown, assumed unsafe
  - slug: event_global_log_category
    info:
      en: |-
        ```hsc
        (<void> event_global_log_category <event>)
        ```
        sets the global evetn log level
    net_safe_raw: unknown, assumed unsafe
  - slug: event_global_remote_log_category
    info:
      en: |-
        ```hsc
        (<void> event_global_remote_log_category <event>)
        ```
        sets the global remote evetn log level
    net_safe_raw: unknown, assumed unsafe
  - slug: event_display_category
    info:
      en: |-
        ```hsc
        (<void> event_display_category <string> <event>)
        ```
        sets the display level for a named category of network events
    net_safe_raw: unknown, assumed unsafe
  - slug: event_force_display_category
    info:
      en: |-
        ```hsc
        (<void> event_force_display_category <string> <event>)
        ```
        sets the forced display level for a named category of network events
    net_safe_raw: unknown, assumed unsafe
  - slug: event_log_category
    info:
      en: |-
        ```hsc
        (<void> event_log_category <string> <event>)
        ```
        sets the log level for a named category of network events
    net_safe_raw: unknown, assumed unsafe
  - slug: event_remote_log_category
    info:
      en: |-
        ```hsc
        (<void> event_remote_log_category <string> <event>)
        ```
        sets the remote log level for a named category of network events
    net_safe_raw: unknown, assumed unsafe
  - slug: event_debugger_break_category
    info:
      en: |-
        ```hsc
        (<void> event_debugger_break_category <string> <event>)
        ```
        sets the debugger break level for a named category of network events
    net_safe_raw: unknown, assumed unsafe
  - slug: event_halt_category
    info:
      en: |-
        ```hsc
        (<void> event_halt_category <string> <event>)
        ```
        sets the halt (assert/crash) level for a named category of network events
    net_safe_raw: unknown, assumed unsafe
  - slug: event_list_categories
    info:
      en: |-
        ```hsc
        (<void> event_list_categories <string>)
        ```
        lists all categories that exist under a particular category string
    net_safe_raw: unknown, assumed unsafe
  - slug: events_suppress_console_display
    info:
      en: |-
        ```hsc
        (<void> events_suppress_console_display <boolean>)
        ```
        disables console display for events
    net_safe_raw: unknown, assumed unsafe
  - slug: play_bink_movie
    info:
      en: |-
        ```hsc
        (<void> play_bink_movie <string>)
        ```
        um...
    net_safe_raw: safe
  - slug: play_bink_movie_from_tag
    info:
      en: |-
        ```hsc
        (<void> play_bink_movie_from_tag <bink definition>)
        ```
        play a bink movie from a tag
    net_safe_raw: unknown, assumed unsafe
  - slug: play_credits_skip_to_menu
    info:
      en: |-
        ```hsc
        (<void> play_credits_skip_to_menu)
        ```
        plays credits movie, pressing any button will stop credits and launch main menu
    net_safe_raw: unknown, assumed unsafe
  - slug: bink_time
    info:
      en: |-
        ```hsc
        (<long> bink_time)
        ```
        uh...
    net_safe_raw: unknown, assumed unsafe
  - slug: set_global_doppler_factor
    info:
      en: |-
        ```hsc
        (<void> set_global_doppler_factor <real>)
        ```
        new doppler factor: <real>
    net_safe_raw: unknown, assumed unsafe
  - slug: set_global_mixbin_headroom
    info:
      en: |-
        ```hsc
        (<void> set_global_mixbin_headroom <long> <long>)
        ```
        blah
    net_safe_raw: unknown, assumed unsafe
  - slug: debug_sound_environment_source_parameter
    info:
      en: |-
        ```hsc
        (<void> debug_sound_environment_source_parameter <long> <real>)
        ```
        blah
    net_safe_raw: unknown, assumed unsafe
  - slug: data_mine_set_mission_segment
    info:
      en: |-
        ```hsc
        (<void> data_mine_set_mission_segment <string>)
        ```
        sets the mission segment for single player data mine events
    net_safe_raw: unknown, assumed unsafe
  - slug: data_mine_insert
    info:
      en: |-
        ```hsc
        (<void> data_mine_insert <string>)
        ```
        insert text and camera position in the data mine
    net_safe_raw: unknown, assumed unsafe
  - slug: data_mine_upload
    info:
      en: |-
        ```hsc
        (<void> data_mine_upload)
        ```
        upload all data mining data files to debug server
    net_safe_raw: unknown, assumed unsafe
  - slug: data_mine_enable
    info:
      en: |-
        ```hsc
        (<void> data_mine_enable <boolean>)
        ```
        enable/disable data mining
    net_safe_raw: unknown, assumed unsafe
  - slug: data_mine_flush
    info:
      en: |-
        ```hsc
        (<void> data_mine_flush)
        ```
        flush any pending data mine data to disk
    net_safe_raw: unknown, assumed unsafe
  - slug: data_mine_debug_menu_setting
    info:
      en: |-
        ```hsc
        (<void> data_mine_debug_menu_setting <string>)
        ```
        close debug menu and set user experience setting to string
    net_safe_raw: unknown, assumed unsafe
  - slug: data_mine_open_debug_menu
    info:
      en: |-
        ```hsc
        (<void> data_mine_open_debug_menu)
        ```
        open debug menu
    net_safe_raw: unknown, assumed unsafe
  - slug: data_mine_set_display_mission_segment
    info:
      en: |-
        ```hsc
        (<void> data_mine_set_display_mission_segment <boolean>)
        ```
        toggle display of data mine mission segment
    net_safe_raw: unknown, assumed unsafe
  - slug: test_memory_allocators
    info:
      en: |-
        ```hsc
        (<void> test_memory_allocators <long> <short> <short> <short> <long>)
        ```
        performs tests on different memory allocators
    net_safe_raw: unknown, assumed unsafe
  - slug: test_memory_allocators
    info:
      en: |-
        ```hsc
        (<void> test_memory_allocators <long> <short> <short> <short> <long> <string>)
        ```
        performs tests on different memory allocators and saves the results
    net_safe_raw: unknown, assumed unsafe
  - slug: display_video_standard
    info:
      en: |-
        ```hsc
        (<void> display_video_standard)
        ```
        displays the video standard the game is in
    net_safe_raw: safe
  - slug: test_xcr_monkey_enable
    info:
      en: |-
        ```hsc
        (<void> test_xcr_monkey_enable <boolean>)
        ```
        enable/disable controller monkeys for all in game players
    net_safe_raw: unknown, assumed unsafe
  - slug: test_show_guide_status
    info:
      en: |-
        ```hsc
        (<void> test_show_guide_status)
        ```
        prints the guide status as automation events.
    net_safe_raw: unknown, assumed unsafe
  - slug: test_show_users_xuids
    info:
      en: |-
        ```hsc
        (<void> test_show_users_xuids)
        ```
        prints the signed in users' xuids as automation events.
    net_safe_raw: unknown, assumed unsafe
  - slug: test_show_are_users_friends
    info:
      en: |-
        ```hsc
        (<void> test_show_are_users_friends <long> <string>)
        ```
        prints whether the current controller and specified xuid are friends as automation events
    net_safe_raw: unknown, assumed unsafe
  - slug: test_invite_friend
    info:
      en: |-
        ```hsc
        (<void> test_invite_friend <long> <string>)
        ```
        shows the guide send friend invite ui from the current controller to the specified xuid
    net_safe_raw: unknown, assumed unsafe
  - slug: test_get_squad_session_id
    info:
      en: |-
        ```hsc
        (<void> test_get_squad_session_id)
        ```
        get the current squad session id
    net_safe_raw: unknown, assumed unsafe
  - slug: test_auto_get_screens
    info:
      en: |-
        ```hsc
        (<void> test_auto_get_screens <long>)
        ```
        <arbitrary int> list the current gui screens
    net_safe_raw: unknown, assumed unsafe
  - slug: test_auto_get_screen_widgets
    info:
      en: |-
        ```hsc
        (<void> test_auto_get_screen_widgets <long> <long>)
        ```
        <arbitrary int> <screen index> lists widgets in a screen
    net_safe_raw: unknown, assumed unsafe
  - slug: test_auto_screen_get_datasources
    info:
      en: |-
        ```hsc
        (<void> test_auto_screen_get_datasources <long> <long>)
        ```
        <arbitrary int> <screen index> lists screen datasources
    net_safe_raw: unknown, assumed unsafe
  - slug: test_auto_screen_get_data_columns
    info:
      en: |-
        ```hsc
        (<void> test_auto_screen_get_data_columns <long> <long> <string_id>)
        ```
        <arbitrary int> <screen index> <datasource string id> lists columns that make up this datasource
    net_safe_raw: unknown, assumed unsafe
  - slug: test_auto_screen_get_data
    info:
      en: |-
        ```hsc
        (<void> test_auto_screen_get_data <long> <long> <string_id> <string_id>)
        ```
        <arbitrary int> <screen index> <datasource string id> <datasource column string id> lists data from a datasource
    net_safe_raw: unknown, assumed unsafe
  - slug: test_auto_screen_invoke_list_item_by_name
    info:
      en: |-
        ```hsc
        (<void> test_auto_screen_invoke_list_item_by_name <long> <long> <string_id> <string_id> <string_id>)
        ```
        <arbitrary int> <screen index> <list string id> <datasource column string id> <column value string id> triggers the list item who's column's value matches the specified one
    net_safe_raw: unknown, assumed unsafe
  - slug: test_auto_screen_invoke_list_item_by_text
    info:
      en: |-
        ```hsc
        (<void> test_auto_screen_invoke_list_item_by_text <long> <long> <string_id> <string_id> <string>)
        ```
        <arbitrary int> <screen index> <list string id> <datasource column string id> <column value string id> triggers the list item who's column's value matches the specified one
    net_safe_raw: unknown, assumed unsafe
  - slug: test_auto_screen_invoke_list_item_by_handle
    info:
      en: |-
        ```hsc
        (<void> test_auto_screen_invoke_list_item_by_handle <long> <long> <string_id> <long>)
        ```
        <arbitrary int> <screen index> <list string id> <element handle> triggers the list item specified by the element handle
    net_safe_raw: unknown, assumed unsafe
  - slug: test_auto_screen_send_button_press
    info:
      en: |-
        ```hsc
        (<void> test_auto_screen_send_button_press <long> <long> <string>)
        ```
        <arbitrary int> <screen index> <button name> sends the button press to the screen
    net_safe_raw: unknown, assumed unsafe
  - slug: test_download_storage_file
    info:
      en: |-
        ```hsc
        (<void> test_download_storage_file <string> <string>)
        ```
        <url> <filename> downloads a file from LSP to the client
    net_safe_raw: unknown, assumed unsafe
  - slug: test_game_results_save_to_file
    info:
      en: |-
        ```hsc
        (<void> test_game_results_save_to_file <string>)
        ```
        <filename> save game results to a file.
    net_safe_raw: unknown, assumed unsafe
  - slug: test_game_results_load_from_file
    info:
      en: |-
        ```hsc
        (<void> test_game_results_load_from_file <string>)
        ```
        <filename> load game results into memory for use in the carnage report.  the format may change build to build causing this to fail or weird results to come up.
    net_safe_raw: unknown, assumed unsafe
  - slug: test_roster_save_to_file
    info:
      en: |-
        ```hsc
        (<void> test_roster_save_to_file <string>)
        ```
        <filename> save roster to a file.
    net_safe_raw: unknown, assumed unsafe
  - slug: test_roster_load_from_file
    info:
      en: |-
        ```hsc
        (<void> test_roster_load_from_file <string>)
        ```
        <filename> load roster into memory.  the format may change build to build causing this to fail or weird results to come up.
    net_safe_raw: unknown, assumed unsafe
  - slug: test_fragment_utility_drive
    info:
      en: |-
        ```hsc
        (<void> test_fragment_utility_drive <long> <long> <long>)
        ```
        <file_count> <growth_repetitions> <growth_size> writes files of varying sizes to the utiltiy drive in an effort to fragment it really badly
    net_safe_raw: unknown, assumed unsafe
  - slug: clear_webcache
    info:
      en: |-
        ```hsc
        (<void> clear_webcache)
        ```
        clears the webcache
    net_safe_raw: unknown, assumed unsafe
  - slug: force_manifest_redownload
    info:
      en: |-
        ```hsc
        (<void> force_manifest_redownload)
        ```
        redownload the online storage manifest
    net_safe_raw: unknown, assumed unsafe
  - slug: online_files_retry
    info:
      en: |-
        ```hsc
        (<void> online_files_retry)
        ```
        tell the upload queue to start up again after a failure
    net_safe_raw: unknown, assumed unsafe
  - slug: online_files_upload
    info:
      en: |-
        ```hsc
        (<void> online_files_upload <string> <long>)
        ```
        <filename> <slot_index> enqueues the specified filename for upload
    net_safe_raw: unknown, assumed unsafe
  - slug: online_files_throttle_bandwidth
    info:
      en: |-
        ```hsc
        (<void> online_files_throttle_bandwidth <long>)
        ```
        <bytes per second> sets the maximum bandwidth that online_files can use
    net_safe_raw: unknown, assumed unsafe
  - slug: online_marketplace_refresh
    info:
      en: |-
        ```hsc
        (<void> online_marketplace_refresh)
        ```
        tells the marketplace manager to take another look at signed in users
    net_safe_raw: unknown, assumed unsafe
  - slug: webstats_disable
    info:
      en: |-
        ```hsc
        (<void> webstats_disable <boolean>)
        ```
        disables webstats
    net_safe_raw: unknown, assumed unsafe
  - slug: webstats_test_submit
    info:
      en: |-
        ```hsc
        (<void> webstats_test_submit <string>)
        ```
        submits a string to webstats upload
    net_safe_raw: unknown, assumed unsafe
  - slug: webstats_test_submit_multiplayer
    info:
      en: |-
        ```hsc
        (<void> webstats_test_submit_multiplayer)
        ```
        submits a test multiplayer blob to webstats
    net_safe_raw: unknown, assumed unsafe
  - slug: webstats_test_submit_campaign
    info:
      en: |-
        ```hsc
        (<void> webstats_test_submit_campaign)
        ```
        submits a test campaign blob to webstats
    net_safe_raw: unknown, assumed unsafe
  - slug: webstats_throttle_bandwidth
    info:
      en: |-
        ```hsc
        (<void> webstats_throttle_bandwidth <long>)
        ```
        <bytes per second> sets the maximum bandwidth that webstats can use
    net_safe_raw: unknown, assumed unsafe
  - slug: netdebug_prefer_internet
    info:
      en: |-
        ```hsc
        (<void> netdebug_prefer_internet <boolean>)
        ```
        hints to the netdebug code that that we're on the internet
    net_safe_raw: unknown, assumed unsafe
  - slug: flag_new
    info:
      en: |-
        ```hsc
        (<void> flag_new <string> <string>)
        ```
        <name> <description>
    net_safe_raw: unknown, assumed unsafe
  - slug: flag_new_at_look
    info:
      en: |-
        ```hsc
        (<void> flag_new_at_look <string> <string>)
        ```
        <name> <description>
    net_safe_raw: unknown, assumed unsafe
  - slug: flags_clear
    info:
      en: |-
        ```hsc
        (<void> flags_clear)
        ```
        erases all comment flags when not in editor (sapien)
    net_safe_raw: unknown, assumed unsafe
  - slug: flags_default_name
    info:
      en: |-
        ```hsc
        (<void> flags_default_name <string>)
        ```
        <default comment flag name>
    net_safe_raw: unknown, assumed unsafe
  - slug: flags_default_comment
    info:
      en: |-
        ```hsc
        (<void> flags_default_comment <string>)
        ```
        <default comment flag description>
    net_safe_raw: unknown, assumed unsafe
  - slug: flags_set_filter
    info:
      en: |-
        ```hsc
        (<void> flags_set_filter <string>)
        ```
        <flag name filter>
    net_safe_raw: unknown, assumed unsafe
  - slug: bug_now
    info:
      en: |-
        ```hsc
        (<void> bug_now <string>)
        ```
        uploads files for bug <name>
    net_safe_raw: unknown, assumed unsafe
  - slug: bug_now_lite
    info:
      en: |-
        ```hsc
        (<void> bug_now_lite <string>)
        ```
        uploads files (w/ no minidump) for bug <name>
    net_safe_raw: unknown, assumed unsafe
  - slug: bug_now_auto
    info:
      en: |-
        ```hsc
        (<void> bug_now_auto <boolean>)
        ```
        uploads bug files, auto named <include_minidump>
    net_safe_raw: unknown, assumed unsafe
  - slug: object_list_children
    info:
      en: |-
        ```hsc
        (<object_list> object_list_children <object> <object_definition>)
        ```
        returns list of child objects by definition.
    net_safe_raw: unknown, assumed unsafe
  - slug: voice_set_outgoing_channel_count
    info:
      en: |-
        ```hsc
        (<void> voice_set_outgoing_channel_count <long> <long>)
        ```
        sets the outgoing channel count <in-game> <out-of-game>
    net_safe_raw: unknown, assumed unsafe
  - slug: voice_set_voice_repeater_peer_index
    info:
      en: |-
        ```hsc
        (<void> voice_set_voice_repeater_peer_index <long>)
        ```
        sets the repeater peer index
    net_safe_raw: unknown, assumed unsafe
  - slug: voice_set_mute
    info:
      en: |-
        ```hsc
        (<void> voice_set_mute <long> <long> <boolean>)
        ```
        mute a player
    net_safe_raw: unknown, assumed unsafe
  - slug: net_leaderboard_clear_hopper
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_clear_hopper <long>)
        ```
        <user index> clears the hopper stats for the user
    net_safe_raw: unknown, assumed unsafe
  - slug: net_leaderboard_clear_global_arbitrated
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_clear_global_arbitrated <long>)
        ```
        <user index> clears the global arbitrated stats for the user
    net_safe_raw: unknown, assumed unsafe
  - slug: net_leaderboard_clear_global_unarbitrated
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_clear_global_unarbitrated <long>)
        ```
        <user index> clears the global unarbitrated stats for the user
    net_safe_raw: unknown, assumed unsafe
  - slug: net_leaderboard_refresh
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_refresh)
        ```
        <user index> refreshes stats for everybody in the session
    net_safe_raw: unknown, assumed unsafe
  - slug: dump_loaded_tags
    info:
      en: |-
        ```hsc
        (<void> dump_loaded_tags)
        ```
        dump a list of open tags to <map_name>_tags.txt
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_start
    info:
      en: |-
        ```hsc
        (<long> interpolator_start <string_id> <real> <real>)
        ```
        <name> <final value> <time>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_start_smooth
    info:
      en: |-
        ```hsc
        (<long> interpolator_start_smooth <string_id> <real> <real>)
        ```
        <name> <final value> <time>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_stop
    info:
      en: |-
        ```hsc
        (<long> interpolator_stop <string_id>)
        ```
        <name>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_restart
    info:
      en: |-
        ```hsc
        (<long> interpolator_restart <string_id>)
        ```
        <name>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_is_active
    info:
      en: |-
        ```hsc
        (<boolean> interpolator_is_active <string_id>)
        ```
        <name>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_is_finished
    info:
      en: |-
        ```hsc
        (<boolean> interpolator_is_finished <string_id>)
        ```
        <name>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_set_current_value
    info:
      en: |-
        ```hsc
        (<long> interpolator_set_current_value <string_id> <real>)
        ```
        <name> <current value>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_get_current_value
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_current_value <string_id> <boolean>)
        ```
        <name> <use function ON/OFF>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_get_start_value
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_start_value <string_id> <boolean>)
        ```
        <name> <use function ON/OFF>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_get_final_value
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_final_value <string_id> <boolean>)
        ```
        <name> <use function ON/OFF>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_get_current_phase
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_current_phase <string_id>)
        ```
        <name>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_get_current_time_fraction
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_current_time_fraction <string_id>)
        ```
        <name>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_get_start_time
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_start_time <string_id>)
        ```
        <name>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_get_final_time
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_final_time <string_id>)
        ```
        <name>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_evaluate_at
    info:
      en: |-
        ```hsc
        (<real> interpolator_evaluate_at <string_id> <real> <boolean>)
        ```
        <name> <value in> <use function ON/OFF>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_evaluate_at_time_fraction
    info:
      en: |-
        ```hsc
        (<real> interpolator_evaluate_at_time_fraction <string_id> <real> <boolean>)
        ```
        <name> <time fraction in> <use function ON/OFF>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_evaluate_at_time
    info:
      en: |-
        ```hsc
        (<real> interpolator_evaluate_at_time <string_id> <real> <boolean>)
        ```
        <name> <time in> <use function ON/OFF>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_evaluate_at_time_delta
    info:
      en: |-
        ```hsc
        (<real> interpolator_evaluate_at_time_delta <string_id> <real> <boolean>)
        ```
        <name> <time delta> <use function ON/OFF>
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_stop_all
    info:
      en: |-
        ```hsc
        (<void> interpolator_stop_all)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_restart_all
    info:
      en: |-
        ```hsc
        (<void> interpolator_restart_all)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: interpolator_flip
    info:
      en: |-
        ```hsc
        (<void> interpolator_flip)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: set_pc_runtime_language
    info:
      en: |-
        ```hsc
        (<void> set_pc_runtime_language <string>)
        ```
        sets the pc language from a string
    net_safe_raw: unknown, assumed unsafe
  - slug: animation_cache_stats_reset
    info:
      en: |-
        ```hsc
        (<void> animation_cache_stats_reset)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_clone_players_weapon
    info:
      en: |-
        ```hsc
        (<void> cinematic_clone_players_weapon <object> <string_id> <string_id>)
        ```
        clone the first player's most reasonable weapon and attach it to the specified object's marker
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_move_attached_objects
    info:
      en: |-
        ```hsc
        (<void> cinematic_move_attached_objects <object> <string_id> <string_id> <string_id>)
        ```
        move the object's children attached to the first marker to the second marker
    net_safe_raw: unknown, assumed unsafe
  - slug: vehicle_enable_ghost_effects
    info:
      en: |-
        ```hsc
        (<void> vehicle_enable_ghost_effects <boolean>)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: set_global_sound_environment
    info:
      en: |-
        ```hsc
        (<void> set_global_sound_environment <real> <real> <real> <real> <long> <real>)
        ```
        this is your brain on drugs
    net_safe_raw: unknown, assumed unsafe
  - slug: game_save_cinematic_skip
    info:
      en: |-
        ```hsc
        (<void> game_save_cinematic_skip)
        ```
        don't use this, except in one place.
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_outro_start
    info:
      en: |-
        ```hsc
        (<void> cinematic_outro_start)
        ```
        flag this cutscene as an outro cutscene
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_enable_ambience_details
    info:
      en: |-
        ```hsc
        (<void> cinematic_enable_ambience_details <boolean>)
        ```
        enable/disable ambience details in cinematics
    net_safe_raw: unknown, assumed unsafe
  - slug: cache_block_for_one_frame
    info:
      en: |-
        ```hsc
        (<void> cache_block_for_one_frame)
        ```
        call this to force texture and geometry cache to block until satiated
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_suppress_ambience_update_on_revert
    info:
      en: |-
        ```hsc
        (<void> sound_suppress_ambience_update_on_revert)
        ```
        call this when transitioning between two cinematics so ambience won't fade in between the skips
    net_safe_raw: unknown, assumed unsafe
  - slug: render_autoexposure_enable
    info:
      en: |-
        ```hsc
        (<void> render_autoexposure_enable <boolean>)
        ```
        toggle autoexposure
    net_safe_raw: unknown, assumed unsafe
  - slug: render_exposure_full
    info:
      en: |-
        ```hsc
        (<void> render_exposure_full <real> <real> <real> <real> <real>)
        ```
        animate exposure from <initial> to <final> stops using <initial> to <final> opacity in <seconds>
    net_safe_raw: unknown, assumed unsafe
  - slug: render_exposure_fade_in
    info:
      en: |-
        ```hsc
        (<void> render_exposure_fade_in <real> <real>)
        ```
        fade to animated exposure <stops> in <seconds>
    net_safe_raw: unknown, assumed unsafe
  - slug: render_exposure_fade_out
    info:
      en: |-
        ```hsc
        (<void> render_exposure_fade_out <real>)
        ```
        fade to default exposure settings in <seconds>
    net_safe_raw: unknown, assumed unsafe
  - slug: render_exposure
    info:
      en: |-
        ```hsc
        (<void> render_exposure <real> <real>)
        ```
        fade to animated exposure <stops> in <seconds>
    net_safe_raw: unknown, assumed unsafe
  - slug: render_autoexposure_instant
    info:
      en: |-
        ```hsc
        (<void> render_autoexposure_instant <long>)
        ```
        instantly adopt auto exposure values in the next N frames
    net_safe_raw: unknown, assumed unsafe
  - slug: render_exposure_set_environment_darken
    info:
      en: |-
        ```hsc
        (<void> render_exposure_set_environment_darken <real>)
        ```
        set environmental darkening
    net_safe_raw: unknown, assumed unsafe
  - slug: render_depth_of_field_enable
    info:
      en: |-
        ```hsc
        (<void> render_depth_of_field_enable <boolean>)
        ```
        turns depth of field on and off
    net_safe_raw: unknown, assumed unsafe
  - slug: render_depth_of_field
    info:
      en: |-
        ```hsc
        (<void> render_depth_of_field <real> <real> <real> <real>)
        ```
        animate depth of field, in focus from <near> to <far>, with depth of field <depth>, in <ticks>
    net_safe_raw: unknown, assumed unsafe
  - slug: render_dof_focus_depth
    info:
      en: |-
        ```hsc
        (<void> render_dof_focus_depth <real>)
        ```
        interpolate depth of field to <depth>
    net_safe_raw: unknown, assumed unsafe
  - slug: render_dof_blur_animate
    info:
      en: |-
        ```hsc
        (<void> render_dof_blur_animate <real> <real>)
        ```
        interpolate depth of field maximum blur to <blur> in <ticks>
    net_safe_raw: unknown, assumed unsafe
  - slug: render_debug_video_mode
    info:
      en: |-
        ```hsc
        (<void> render_debug_video_mode)
        ```
        displays the current video mode
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_lightmap_shadow_disable
    info:
      en: |-
        ```hsc
        (<void> cinematic_lightmap_shadow_disable)
        ```
        turn off lightmap shadow in cinematics
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_lightmap_shadow_enable
    info:
      en: |-
        ```hsc
        (<void> cinematic_lightmap_shadow_enable)
        ```
        turn on lightmap shadow in cinematics
    net_safe_raw: unknown, assumed unsafe
  - slug: predict_animation
    info:
      en: |-
        ```hsc
        (<void> predict_animation <animation_graph> <string_id>)
        ```
        begin loading an animation for the graph provided
    net_safe_raw: unknown, assumed unsafe
  - slug: mp_players_by_team
    info:
      en: |-
        ```hsc
        (<object_list> mp_players_by_team <mp_team>)
        ```
        given a team index, returns an object list containing all living player objects belonging to that team
    net_safe_raw: yes
  - slug: mp_active_player_count_by_team
    info:
      en: |-
        ```hsc
        (<long> mp_active_player_count_by_team <mp_team>)
        ```
        given a team index, returns an object list containing all living player objects belonging to that team
    net_safe_raw: yes
  - slug: deterministic_end_game
    info:
      en: |-
        ```hsc
        (<void> deterministic_end_game)
        ```
        end game deterministically, by inserting a simulation queue event
    net_safe_raw: yes
  - slug: mp_game_won
    info:
      en: |-
        ```hsc
        (<void> mp_game_won <mp_team>)
        ```
        given a team index, declares the game a victory for that team and a loss for all others
    net_safe_raw: yes
  - slug: mp_respawn_override_timers
    info:
      en: |-
        ```hsc
        (<void> mp_respawn_override_timers <mp_team>)
        ```
        causes all players on the specified team waiting to respawn (due to timer) to respawn immediately
    net_safe_raw: yes
  - slug: mp_ai_allegiance
    info:
      en: |-
        ```hsc
        (<void> mp_ai_allegiance <team> <mp_team>)
        ```
        causes an allegiance to be formed between an AI squad team and a multiplayer team
    net_safe_raw: yes
  - slug: mp_allegiance
    info:
      en: |-
        ```hsc
        (<void> mp_allegiance <mp_team> <mp_team>)
        ```
        create an allegiance between two multiplayer teams
    net_safe_raw: yes
  - slug: mp_round_started
    info:
      en: |-
        ```hsc
        (<boolean> mp_round_started)
        ```
        used to determine if the mp game is in the active-round phase or not
    net_safe_raw: unknown, assumed unsafe
  - slug: give_medal
    info:
      en: |-
        ```hsc
        (<void> give_medal <short>)
        ```
        awards a medal (0..58) to pad 1 due to pad 2 (if they're there)
    net_safe_raw: unknown, assumed unsafe
  - slug: mp_scripts_reset
    info:
      en: |-
        ```hsc
        (<void> mp_scripts_reset)
        ```
        on the host in a distributed game, resets the scripts (but not internal hs globals)
    net_safe_raw: yes
  - slug: mp_ai_place
    info:
      en: |-
        ```hsc
        (<void> mp_ai_place <ai>)
        ```
        places the specified squad on the map as a non-authoritative object
    net_safe_raw: yes
  - slug: mp_ai_place
    info:
      en: |-
        ```hsc
        (<void> mp_ai_place <ai> <short>)
        ```
        places the given number of members of the specified squad as non-authoritative objects
    net_safe_raw: yes
  - slug: mp_ai_kill
    info:
      en: |-
        ```hsc
        (<void> mp_ai_kill <ai>)
        ```
        instantly kills the specified non-authoritative encounter and/or squad.
    net_safe_raw: yes
  - slug: mp_ai_kill_silent
    info:
      en: |-
        ```hsc
        (<void> mp_ai_kill_silent <ai>)
        ```
        instantly and silently (no animation or sound played) kills the specified non-authoritative encounter and/or squad.
    net_safe_raw: yes
  - slug: mp_object_create
    info:
      en: |-
        ```hsc
        (<void> mp_object_create <object_name>)
        ```
        creates a non-authoratative object from the scenario.
    net_safe_raw: yes
  - slug: mp_object_create_clone
    info:
      en: |-
        ```hsc
        (<void> mp_object_create_clone <object_name>)
        ```
        creates a non-authoratative object, potentially resulting in multiple objects if it already exists.
    net_safe_raw: no
  - slug: mp_object_create_anew
    info:
      en: |-
        ```hsc
        (<void> mp_object_create_anew <object_name>)
        ```
        creates a non-authoratative object, destroying it first if it already exists.
    net_safe_raw: yes
  - slug: mp_object_destroy
    info:
      en: |-
        ```hsc
        (<void> mp_object_destroy <object>)
        ```
        destroys a non-authoratative object.
    net_safe_raw: yes
  - slug: tag_file_set_backend
    info:
      en: |-
        ```hsc
        (<void> tag_file_set_backend <string>)
        ```
        override the tag file system backend
    net_safe_raw: unknown, assumed unsafe
  - slug: mp_object_belongs_to_team
    info:
      en: |-
        ```hsc
        (<void> mp_object_belongs_to_team <object> <mp_team>)
        ```
        causes specified object to belong to the given team, so that only that team can pick it up
    net_safe_raw: yes
  - slug: mp_weapon_belongs_to_team
    info:
      en: |-
        ```hsc
        (<void> mp_weapon_belongs_to_team <object> <mp_team>)
        ```
        causes specified weapon to belong to the given team, so that only that team can pick it up
    net_safe_raw: yes
  - slug: mp_debug_goal_object_boundary_geometry
    info:
      en: |-
        ```hsc
        (<void> mp_debug_goal_object_boundary_geometry <boolean>)
        ```
        toggle debug geometry for multiplayer goal objects
    net_safe_raw: no
  - slug: mp_dump_candy_monitor_state
    info:
      en: |-
        ```hsc
        (<void> mp_dump_candy_monitor_state)
        ```
        dumps the current candy monitor state to a file on disk
  - slug: set_camera_third_person
    info:
      en: |-
        ```hsc
        (<void> set_camera_third_person <long> <boolean>)
        ```
        <user_index> <third_person (yes/no)> sets user's camera perspective
    net_safe_raw: no
  - slug: get_camera_third_person
    info:
      en: |-
        ```hsc
        (<boolean> get_camera_third_person <long>)
        ```
        <user_index> gets user's camera perspective
    net_safe_raw: no
  - slug: determinism_debug_manager_enable_logging
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_logging <boolean>)
        ```
        enable/disable determinism logging
    net_safe_raw: unknown, assumed unsafe
  - slug: determinism_debug_manager_set_trace_flags
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_set_trace_flags <long>)
        ```
        set which determinism debugging traces should be turned on
    net_safe_raw: unknown, assumed unsafe
  - slug: determinism_debug_manager_enable_game_state_checksum
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_game_state_checksum <boolean>)
        ```
        enable/disable determinism checkpoints
    net_safe_raw: unknown, assumed unsafe
  - slug: determinism_debug_manager_enable_trace
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_trace <boolean>)
        ```
        enable determinism tracing
    net_safe_raw: unknown, assumed unsafe
  - slug: determinism_debug_manager_set_consumer_sample_level
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_set_consumer_sample_level <string> <long>)
        ```
        sets sample level for a consumer
    net_safe_raw: unknown, assumed unsafe
  - slug: saved_film_play
    info:
      en: |-
        ```hsc
        (<void> saved_film_play <controller> <string>)
        ```
        plays a saved film for given controller
    net_safe_raw: unknown, assumed unsafe
  - slug: saved_film_play_last
    info:
      en: |-
        ```hsc
        (<void> saved_film_play_last)
        ```
        play back last recorded saved film for given controller
    net_safe_raw: unknown, assumed unsafe
  - slug: saved_film_disable_version_checking
    info:
      en: |-
        ```hsc
        (<void> saved_film_disable_version_checking <boolean>)
        ```
        disable saved film version checking
    net_safe_raw: unknown, assumed unsafe
  - slug: saved_film_toggle_debug_saving
    info:
      en: |-
        ```hsc
        (<void> saved_film_toggle_debug_saving <boolean>)
        ```
        toggle saving of last film to the debug output directory automatically after each game level
    net_safe_raw: unknown, assumed unsafe
  - slug: saved_films_delete_on_level_load
    info:
      en: |-
        ```hsc
        (<void> saved_films_delete_on_level_load <boolean>)
        ```
        toggle deletion last saved film after loading a new game level
    net_safe_raw: unkown, assumed unsafe
  - slug: saved_films_show_timestamp
    info:
      en: |-
        ```hsc
        (<void> saved_films_show_timestamp <boolean>)
        ```
        toggle showing timestamp for saved film playback
    net_safe_raw: unkown, assumed unsafe
  - slug: saved_film_manager_should_record_film_default
    info:
      en: |-
        ```hsc
        (<void> saved_film_manager_should_record_film_default <boolean>)
        ```
        Toggle recording of replay in single player game
    net_safe_raw: unknown, assumed unsafe
  - slug: mover_set_program
    info:
      en: |-
        ```hsc
        (<boolean> mover_set_program <object> <short>)
        ```
        Set the motor program of the given mover object
    net_safe_raw: unknown, assumed unsafe
  - slug: determinism_log_compare_log_files
    info:
      en: |-
        ```hsc
        (<void> determinism_log_compare_log_files <string> <string>)
        ```
        comares determinism log files
    net_safe_raw: no
  - slug: floating_point_exceptions_enable
    info:
      en: |-
        ```hsc
        (<void> floating_point_exceptions_enable <boolean>)
        ```
        enables/disables floating point exceptions
    net_safe_raw: no
  - slug: determinism_debug_manager_enable_log_file_comparision_on_oos
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_log_file_comparision_on_oos <boolean>)
        ```
        enables/disables determinism log file comparision on oos
    net_safe_raw: no
  - slug: event_logs_snapshot
    info:
      en: |-
        ```hsc
        (<void> event_logs_snapshot)
        ```
        copy error files to the error snapshot folder
    net_safe_raw: no
  - slug: tag_reload_force
    info:
      en: |-
        ```hsc
        (<void> tag_reload_force <string>)
        ```
        rather than force a painful xsync to test xsync, allow me to fake a tag_reload
    net_safe_raw: no
  - slug: tag_unload_force
    info:
      en: |-
        ```hsc
        (<void> tag_unload_force <string>)
        ```
        call tag_unload
    net_safe_raw: no
  - slug: tag_load_force
    info:
      en: |-
        ```hsc
        (<void> tag_load_force <string>)
        ```
        call tag_load
    net_safe_raw: no
  - slug: predict_bink_movie
    info:
      en: |-
        ```hsc
        (<void> predict_bink_movie <string>)
        ```
        um2...
    net_safe_raw: yes
  - slug: predict_bink_movie_from_tag
    info:
      en: |-
        ```hsc
        (<void> predict_bink_movie_from_tag <bink definition>)
        ```
        um2...
    net_safe_raw: yes
  - slug: profiler_dump_history
    info:
      en: |-
        ```hsc
        (<void> profiler_dump_history)
        ```
        dump profile history.
    net_safe_raw: unknown, assumed unsafe
  - slug: camera_set_mode
    info:
      en: |-
        ```hsc
        (<void> camera_set_mode <long> <long>)
        ```
        <user_index> <mode_index> sets user's camera perspective
    net_safe_raw: no
  - slug: camera_set_flying_cam_at_point
    info:
      en: |-
        ```hsc
        (<void> camera_set_flying_cam_at_point <long> <cutscene_camera_point>)
        ```
        <user_index> <camera_point> sets a flying camera perspective
    net_safe_raw: no
  - slug: game_coop_player_count
    info:
      en: |-
        ```hsc
        (<long> game_coop_player_count)
        ```
        returns the number of coop players active in game
    net_safe_raw: unknown, assumed unsafe
  - slug: player_force_mode
    info:
      en: |-
        ```hsc
        (<void> player_force_mode <string_id>)
        ```
        force your will upon the player
    net_safe_raw: unknown, assumed unsafe
  - slug: profiler_output_pulse
    info:
      en: |-
        ```hsc
        (<void> profiler_output_pulse)
        ```
        dump profile stats to telnet console.
    net_safe_raw: unknown, assumed unsafe
  - slug: string_id_name
    info:
      en: |-
        ```hsc
        (<void> string_id_name <long>)
        ```
        prints the name of the string id to the console
    net_safe_raw: unknown, assumed unsafe
  - slug: find
    info:
      en: |-
        ```hsc
        (<void> find <string>)
        ```
        prints any hs command matching the string passed in
    net_safe_raw: of course you idiot
  - slug: add_recycling_volume
    info:
      en: |-
        ```hsc
        (<void> add_recycling_volume <trigger_volume> <long> <long>)
        ```
        removes garbage in specified trigger volume to a max count over n seconds
    net_safe_raw: yes
  - slug: tag_resources_set_per_frame_publish
    info:
      en: |-
        ```hsc
        (<void> tag_resources_set_per_frame_publish <boolean>)
        ```
        turns on/off per frame resource publish (stress testing)
    net_safe_raw: if not, ooops
  - slug: object_recycling_clear_history
    info:
      en: |-
        ```hsc
        (<void> object_recycling_clear_history)
        ```
        clear object recycling history
    net_safe_raw: unknown, assumed unsafe
  - slug: dump_cinematics_script
    info:
      en: |-
        ```hsc
        (<void> dump_cinematics_script)
        ```
        dump the cinematic script to cinematic_dump.txt
  - slug: global_preferences_clear
    info:
      en: |-
        ```hsc
        (<void> global_preferences_clear)
        ```
        clears all game preference information
    net_safe_raw: unknown, assumed unsafe
  - slug: network_storage_set_storage_subdirectory
    info:
      en: |-
        ```hsc
        (<void> network_storage_set_storage_subdirectory <string>)
        ```
        <subdirectory> The default is the build number or 'untracked'
    net_safe_raw: unknown, assumed unsafe
  - slug: network_storage_set_storage_user
    info:
      en: |-
        ```hsc
        (<void> network_storage_set_storage_user <string>)
        ```
        <user> Use the network file stored on untracked\<user>.
    net_safe_raw: unknown, assumed unsafe
  - slug: status_line_dump
    info:
      en: |-
        ```hsc
        (<void> status_line_dump)
        ```
        dumps active status_lines to system_log.txt
    net_safe_raw: i hope so
  - slug: game_tick_get
    info:
      en: |-
        ```hsc
        (<long> game_tick_get)
        ```
        returns current game tick
    net_safe_raw: only if game_time_get is
  - slug: loop_it
    info:
      en: |-
        ```hsc
        (<void> loop_it <string>)
        ```
        runs the expression at most once per tick
    net_safe_raw: just assume it isn't
  - slug: loop_clear
    info:
      en: |-
        ```hsc
        (<void> loop_clear)
        ```
        runs the expression at most once per tick
    net_safe_raw: just assume it isn't
  - slug: status_lines_enable
    info:
      en: |-
        ```hsc
        (<void> status_lines_enable <string>)
        ```
        enables status_lines that were initialized with identifiers that match the input substring
    net_safe_raw: i hope so
  - slug: status_lines_disable
    info:
      en: |-
        ```hsc
        (<void> status_lines_disable <string>)
        ```
        disables status_lines that were initialized with identifiers that match the input substring
    net_safe_raw: i hope so
  - slug: on_target_platform
    info:
      en: |-
        ```hsc
        (<boolean> on_target_platform)
        ```
        returns true if the game thinks it's running on the target platform
    net_safe_raw: no
  - slug: profile_activate
    info:
      en: |-
        ```hsc
        (<void> profile_activate <string>)
        ```
        activates profile sections based on a substring.
    net_safe_raw: unknown, assumed unsafe
  - slug: profile_deactivate
    info:
      en: |-
        ```hsc
        (<void> profile_deactivate <string>)
        ```
        deactivates profile sections based on a substring.
    net_safe_raw: unknown, assumed unsafe
  - slug: net_game_set_player_standing
    info:
      en: |-
        ```hsc
        (<void> net_game_set_player_standing <string> <long>)
        ```
        set's a player's standing by gamertag
    net_safe_raw: host only
  - slug: net_get_game_id
    info:
      en: |-
        ```hsc
        (<void> net_get_game_id)
        ```
        prints the id of the game to the console
    net_safe_raw: if it's not, it wouldn't be very useful
  - slug: generate_rsa_2048_key_pair
    info:
      en: |-
        ```hsc
        (<void> generate_rsa_2048_key_pair)
        ```
        generates an RSA key pair
  - slug: create_secure_test_file
    info:
      en: |-
        ```hsc
        (<void> create_secure_test_file)
        ```
        generates a compressed encrypted test file
  - slug: net_test_matchmaking_hopper_list
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_hopper_list)
        ```
        prints the hopper list
    net_safe_raw: just assume it isn't
  - slug: net_test_matchmaking_hopper_game_list
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_hopper_game_list)
        ```
        prints games for the current hopper
    net_safe_raw: just assume it isn't
  - slug: net_test_matchmaking_hopper_set_game
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_hopper_set_game <long>)
        ```
        sets the game vairant for the current hopper
    net_safe_raw: just assume it isn't
  - slug: saved_film_set_playback_game_speed
    info:
      en: |-
        ```hsc
        (<void> saved_film_set_playback_game_speed <real>)
        ```
        set the saved film playback speed
  - slug: saved_film_set_pending_playback_game_speed
    info:
      en: |-
        ```hsc
        (<void> saved_film_set_pending_playback_game_speed <real>)
        ```
        set the pending saved film playback speed
  - slug: noguchis_mystery_tour
    info:
      en: |-
        ```hsc
        (<void> noguchis_mystery_tour <string>)
        ```
        set the additional music directory to dump into the cache file
  - slug: designer_zone_sync
    info:
      en: |-
        ```hsc
        (<void> designer_zone_sync)
        ```
        synchronizes global objects with loaded designer zones
    net_safe_raw: unknown, assumed unsafe
  - slug: dump_designer_zone
    info:
      en: |-
        ```hsc
        (<void> dump_designer_zone <designer_zone>)
        ```
        dump interesting info about a designer zone
    net_safe_raw: unknown, assumed unsafe
  - slug: designer_zone_activate
    info:
      en: |-
        ```hsc
        (<void> designer_zone_activate <designer_zone>)
        ```
        activate designer zone
    net_safe_raw: unknown, assumed unsafe
  - slug: designer_zone_deactivate
    info:
      en: |-
        ```hsc
        (<void> designer_zone_deactivate <designer_zone>)
        ```
        deactivates designer zone, deletes objects that were part of that designer zone
    net_safe_raw: unknown, assumed unsafe
  - slug: object_set_always_active
    info:
      en: |-
        ```hsc
        (<void> object_set_always_active <object> <boolean>)
        ```
        sets/unsets the object always active flag to ignore pvs changes
    net_safe_raw: unknown, assumed unsafe
  - slug: saved_film_seek_to_film_tick
    info:
      en: |-
        ```hsc
        (<void> saved_film_seek_to_film_tick <long>)
        ```
        seeks to a film tick
  - slug: tag_is_active
    info:
      en: |-
        ```hsc
        (<boolean> tag_is_active <any tag not resolving>)
        ```
        returns true/false if you can create this tag with the active zones
    net_safe_raw: only if the global zone state is network safe
  - slug: tag_resources_set_incremental_publish
    info:
      en: |-
        ```hsc
        (<void> tag_resources_set_incremental_publish <boolean>)
        ```
        turns on/off incremental resource publish (prediction)
    net_safe_raw: if not, ooops
  - slug: tag_resources_enable_optional_caching
    info:
      en: |-
        ```hsc
        (<void> tag_resources_enable_optional_caching <boolean>)
        ```
        turns on/off optional resource prediction
    net_safe_raw: if not, oooops
  - slug: dump_active_resources
    info:
      en: |-
        ```hsc
        (<void> dump_active_resources)
        ```
        blah
  - slug: object_set_persistent
    info:
      en: |-
        ```hsc
        (<void> object_set_persistent <object> <boolean>)
        ```
        <object_index> <true/false> prevent this object from being garbage collected
    net_safe_raw: no
  - slug: display_zone_size_estimates
    info:
      en: |-
        ```hsc
        (<void> display_zone_size_estimates <boolean>)
        ```
        display zone size estimates HUD
    net_safe_raw: yes
  - slug: report_zone_size_estimates
    info:
      en: |-
        ```hsc
        (<void> report_zone_size_estimates)
        ```
        dump zone size estimates to design report log
    net_safe_raw: yes
  - slug: net_test_disconnect_squad
    info:
      en: |-
        ```hsc
        (<void> net_test_disconnect_squad)
        ```
        disconnects the squad session
    net_safe_raw: probably not
  - slug: net_test_disconnect_group
    info:
      en: |-
        ```hsc
        (<void> net_test_disconnect_group)
        ```
        disconnects the group session
    net_safe_raw: probably not
  - slug: net_test_clear_squad_session_parameter
    info:
      en: |-
        ```hsc
        (<void> net_test_clear_squad_session_parameter <long>)
        ```
        clears a squad session parameter
    net_safe_raw: probably not
  - slug: net_test_clear_group_session_parameter
    info:
      en: |-
        ```hsc
        (<void> net_test_clear_group_session_parameter <long>)
        ```
        clears a group session parameter
    net_safe_raw: probably not
  - slug: net_test_life_cycle_pause
    info:
      en: |-
        ```hsc
        (<void> net_test_life_cycle_pause <string> <boolean>)
        ```
        pauses the life cycle in the specified state
    net_safe_raw: probably not
  - slug: net_test_life_cycle_display_states
    info:
      en: |-
        ```hsc
        (<void> net_test_life_cycle_display_states)
        ```
        display the life cycle states
    net_safe_raw: probably not
  - slug: overlapped_display_task_descriptions
    info:
      en: |-
        ```hsc
        (<void> overlapped_display_task_descriptions)
        ```
        displays all tasks
    net_safe_raw: lol
  - slug: overlapped_task_inject_error
    info:
      en: |-
        ```hsc
        (<void> overlapped_task_inject_error <string> <boolean>)
        ```
        inject error for tasks
    net_safe_raw: lol
  - slug: net_leaderboard_clear_hopper_all_users
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_clear_hopper_all_users <string>)
        ```
        clears the hopper stats for the all user
    net_safe_raw: unknown, assumed unsafe
  - slug: net_leaderboard_clear_global_arbitrated_all_users
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_clear_global_arbitrated_all_users <string>)
        ```
        clears the global arbitrated stats for all user
    net_safe_raw: unknown, assumed unsafe
  - slug: net_leaderboard_clear_global_unarbitrated_all_users
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_clear_global_unarbitrated_all_users <string>)
        ```
        clears the global unarbitrated stats for all user
    net_safe_raw: unknown, assumed unsafe
  - slug: test_sapien_crash
    info:
      en: |-
        ```hsc
        (<void> test_sapien_crash)
        ```
  - slug: decorators_split
    info:
      en: |-
        ```hsc
        (<void> decorators_split <long> <real>)
        ```
        duplicates decorator set <index> and moves <percentage> of the decorators into it
    net_safe_raw: unknown, assumed unsafe
  - slug: bandwidth_profiler_enable
    info:
      en: |-
        ```hsc
        (<void> bandwidth_profiler_enable <boolean>)
        ```
        enables bandwidth profiler
    net_safe_raw: probably not
  - slug: bandwidth_profiler_set_context
    info:
      en: |-
        ```hsc
        (<void> bandwidth_profiler_set_context <boolean>)
        ```
        sets bandwidth profiler context
    net_safe_raw: probably not
  - slug: overlapped_task_pause
    info:
      en: |-
        ```hsc
        (<void> overlapped_task_pause <string> <boolean>)
        ```
        pause tasks
    net_safe_raw: lol
  - slug: net_banhammer_set_controller_cheat_flags
    info:
      en: |-
        ```hsc
        (<void> net_banhammer_set_controller_cheat_flags <controller> <string> <boolean>)
        ```
        sets cheat flags
    net_safe_raw: yes
  - slug: net_banhammer_set_controller_ban_flags
    info:
      en: |-
        ```hsc
        (<void> net_banhammer_set_controller_ban_flags <controller> <string> <long> <boolean>)
        ```
        sets ban flags
    net_safe_raw: yes
  - slug: net_banhammer_dump_strings
    info:
      en: |-
        ```hsc
        (<void> net_banhammer_dump_strings)
        ```
        display cheat/ban strings
    net_safe_raw: yes
  - slug: net_banhammer_dump_repeated_play_list
    info:
      en: |-
        ```hsc
        (<void> net_banhammer_dump_repeated_play_list)
        ```
        display repeated play lists
    net_safe_raw: yes
  - slug: net_leaderboard_set_user_stats
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_set_user_stats <long> <real> <real> <long> <long> <long>)
        ```
        slams user leaderboard values locally
    net_safe_raw: no
  - slug: net_leaderboard_set_user_game_stats
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_set_user_game_stats <long> <long> <long> <long> <long>)
        ```
        slams more user stats
    net_safe_raw: no
  - slug: net_build_map_variant
    info:
      en: |-
        ```hsc
        (<void> net_build_map_variant <string>)
        ```
        writes the current map variant to a file
    net_safe_raw: yes
  - slug: net_verify_map_variant
    info:
      en: |-
        ```hsc
        (<void> net_verify_map_variant <string>)
        ```
        verifies the contents of a packed map variant file
    net_safe_raw: unknown, assumed unsafe
  - slug: async_set_work_delay_milliseconds
    info:
      en: |-
        ```hsc
        (<void> async_set_work_delay_milliseconds <long>)
        ```
        set an artificial delay time for the performance of any asynchronous task work
    net_safe_raw: unknown, assumed unsafe
  - slug: sound_looping_start_with_effect
    info:
      en: |-
        ```hsc
        (<void> sound_looping_start_with_effect <looping_sound> <object> <real> <string_id>)
        ```
        plays a looping sound from the specified source object (or "none"), with the specified scale and playback effect.
    net_safe_raw: unknown, assumed unsafe
  - slug: tag_resources_set_demand_throttle_to_io
    info:
      en: |-
        ```hsc
        (<void> tag_resources_set_demand_throttle_to_io <boolean>)
        ```
        turns on/off demand throttling based on io
    net_safe_raw: if not, ooops
  - slug: tag_resources_flush_optional
    info:
      en: |-
        ```hsc
        (<void> tag_resources_flush_optional)
        ```
        flushes optional resources
    net_safe_raw: should be
  - slug: set_performance_throttle
    info:
      en: |-
        ```hsc
        (<void> set_performance_throttle <string> <long> <real>)
        ```
        sets a default value for a performance throttle for a given number of players
  - slug: get_performance_throttle
    info:
      en: |-
        ```hsc
        (<real> get_performance_throttle <string> <long>)
        ```
        gets the value of a performance throttle for a given number of players
  - slug: cinematic_zone_activate
    info:
      en: |-
        ```hsc
        (<void> cinematic_zone_activate <long>)
        ```
        activates scenario cinematic zone (automatically generated script function!)
  - slug: cinematic_zone_deactivate
    info:
      en: |-
        ```hsc
        (<void> cinematic_zone_deactivate <long>)
        ```
        deactivates scenario cinematic zone (automatically generated script function!)
  - slug: cinematic_zone_activate_from_editor
    info:
      en: |-
        ```hsc
        (<void> cinematic_zone_activate_from_editor <any tag>)
        ```
        activates cinematic zone from tag (automatically generated script function!)
  - slug: cinematic_zone_deactivate_from_editor
    info:
      en: |-
        ```hsc
        (<void> cinematic_zone_deactivate_from_editor <any tag>)
        ```
        deactivates cinematic zone from tag (automatically generated script function!)
  - slug: tiling_current
    info:
      en: |-
        ```hsc
        (<long> tiling_current)
        ```
        returns the actual tiling configuration (could have been overridden from the requested configuration)
  - slug: unit_limit_lipsync_to_mouth_only
    info:
      en: |-
        ```hsc
        (<void> unit_limit_lipsync_to_mouth_only <unit> <boolean>)
        ```
        cinematic lipsync means you can't use all the facial bones, just the mouth
    net_safe_raw: no
  - slug: dump_active_zone_tags
    info:
      en: |-
        ```hsc
        (<void> dump_active_zone_tags)
        ```
        blah
  - slug: tag_resources_enable_fast_prediction
    info:
      en: |-
        ```hsc
        (<void> tag_resources_enable_fast_prediction <boolean>)
        ```
        turns on/off faster prediction, in case I messed up something
    net_safe_raw: if not, ooops
  - slug: unit_start_first_person_custom_animation
    info:
      en: |-
        ```hsc
        (<boolean> unit_start_first_person_custom_animation <unit> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on a unit (puts away weapon if last parameter is TRUE)
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_is_playing_custom_first_person_animation
    info:
      en: |-
        ```hsc
        (<boolean> unit_is_playing_custom_first_person_animation <unit>)
        ```
        returns TRUE if the given unit is still playing a custom animation in first person
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_stop_first_person_custom_animation
    info:
      en: |-
        ```hsc
        (<void> unit_stop_first_person_custom_animation <unit>)
        ```
        ends any custom first person animation running on the unit
    net_safe_raw: unknown, assumed unsafe
  - slug: prepare_to_switch_to_zone_set
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> prepare_to_switch_to_zone_set <zone_set>)
        ```
        prepare for switch to zone set
    net_safe_raw: yes
  - slug: cinematic_zone_activate_for_debugging
    info:
      en: |-
        ```hsc
        (<void> cinematic_zone_activate_for_debugging <long>)
        ```
        activates scenario cinematic zone for debugging (automatically generated script function!)
  - slug: unit_play_random_ping
    info:
      en: |-
        ```hsc
        (<void> unit_play_random_ping <unit>)
        ```
        plays a random ping on the unit
  - slug: player_control_fade_out_all_input
    info:
      en: |-
        ```hsc
        (<void> player_control_fade_out_all_input <real>)
        ```
        fade out all play control over x seconds
  - slug: player_control_fade_in_all_input
    info:
      en: |-
        ```hsc
        (<void> player_control_fade_in_all_input <real>)
        ```
        fade in all play control over x seconds
  - slug: player_control_lock_gaze
    info:
      en: |-
        ```hsc
        (<void> player_control_lock_gaze <unit> <point_reference> <real>)
        ```
        player turn to face point with max velocity degrees/second
  - slug: player_control_unlock_gaze
    info:
      en: |-
        ```hsc
        (<void> player_control_unlock_gaze <unit>)
        ```
        unlock player from any gaze point
  - slug: player_control_scale_all_input
    info:
      en: |-
        ```hsc
        (<void> player_control_scale_all_input <real> <real>)
        ```
        scale input to x strength over y seconds
  - slug: profiler_auto_core_save
    info:
      en: |-
        ```hsc
        (<void> profiler_auto_core_save <boolean>)
        ```
        profiler dumps a core for each encounter
    net_safe_raw: unknown, assumed unsafe
  - slug: definition>
    info:
      en: |-
        ```hsc
        (<bink definition> cinematic_tag_reference_get_bink <long>)
        ```
        Retrieve the bink tag from the cinematic system
  - slug: voice_set_force_match_configurations
    info:
      en: |-
        ```hsc
        (<void> voice_set_force_match_configurations <long> <long> <long> <boolean>)
        ```
        sets matchmaking voice options
    net_safe_raw: unknown, assumed unsafe
  - slug: voice_set_force_hud
    info:
      en: |-
        ```hsc
        (<void> voice_set_force_hud <long> <long>)
        ```
        sets matchmaking voice hud
    net_safe_raw: unknown, assumed unsafe
  - slug: object_set_custom_animation_speed
    info:
      en: |-
        ```hsc
        (<void> object_set_custom_animation_speed <object> <real>)
        ```
        if the object is playing a custom animation, scale it to n playback speed
  - slug: scenery_animation_start_at_frame_loop
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_at_frame_loop <scenery> <animation_graph> <string_id> <short>)
        ```
        starts a custom animation playing on a piece of scenery at a specific frame and then loops
    net_safe_raw: unknown, assumed unsafe
  - slug: saved_film_set_repro_mode
    info:
      en: |-
        ```hsc
        (<void> saved_film_set_repro_mode <boolean>)
        ```
        set the saved film into repro mode (splitscreen users are created based on the number of splitscreen players that recorded the film)
  - slug: chud_show_arbiter_ai_navpoint
    info:
      en: |-
        ```hsc
        (<void> chud_show_arbiter_ai_navpoint <boolean>)
        ```
        hides/shows the entire chud
    net_safe_raw: unknown, assumed unsafe
  - slug: scene
    info:
      en: |-
        ```hsc
        (<cinematic scene definition> cortana_tag_reference_get_scene <long>)
        ```
        Retrieve a cinematic tag from the cinematic system
  - slug: net_banhammer_force_download
    info:
      en: |-
        ```hsc
        (<void> net_banhammer_force_download <boolean> <boolean>)
        ```
        force banhammer file download
    net_safe_raw: yes
  - slug: font_set_emergency
    info:
      en: |-
        ```hsc
        (<void> font_set_emergency)
        ```
        sets the font system into emergency mode
    net_safe_raw: yes
  - slug: biped_force_ground_fitting_on
    info:
      en: |-
        ```hsc
        (<void> biped_force_ground_fitting_on <unit> <boolean>)
        ```
        force ground fitting on, even during custom animations or movement
  - slug: cinematic_set_chud_objective
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_chud_objective <cutscene_title>)
        ```
        activates the chapter title
    net_safe_raw: unknown, assumed unsafe
  - slug: terminal_is_being_read
    info:
      en: |-
        ```hsc
        (<boolean> terminal_is_being_read)
        ```
        returns whether or not a terminal is currently being read
  - slug: terminal_was_accessed
    info:
      en: |-
        ```hsc
        (<boolean> terminal_was_accessed <object>)
        ```
        returns whether or not the given terminal was accessed
  - slug: terminal_was_completed
    info:
      en: |-
        ```hsc
        (<boolean> terminal_was_completed <object>)
        ```
        returns whether or not the given terminal was read to completion
  - slug: cortana_terminal_was_accessed
    info:
      en: |-
        ```hsc
        (<void> cortana_terminal_was_accessed)
        ```
        Hack for ace as cortana's terminal needs to callback to terminal code
  - slug: unit_get_primary_weapon
    info:
      en: |-
        ```hsc
        (<weapon> unit_get_primary_weapon <unit>)
        ```
        return the primary weapon of the specified unit
  - slug: dump_cortana_script
    info:
      en: |-
        ```hsc
        (<void> dump_cortana_script)
        ```
        dump the cinematic script to cinematic_dump_cortana.txt
  - slug: budget_resource_get_animation_graph
    info:
      en: |-
        ```hsc
        (<animation_graph> budget_resource_get_animation_graph <animation budget reference>)
        ```
        Get a non resolving reference to a model animation graph budget reference
    net_safe_raw: unknown, assumed unsafe
  - slug: game_award_level_complete_achievements
    info:
      en: |-
        ```hsc
        (<void> game_award_level_complete_achievements)
        ```
        causes the player to successfully finish the current level and move to the next
    net_safe_raw: unknown, assumed unsafe
  - slug: budget_resource_get_looping_sound
    info:
      en: |-
        ```hsc
        (<looping_sound> budget_resource_get_looping_sound <looping sound budget reference>)
        ```
        Get a non resolving reference to a looping sound budget reference
    net_safe_raw: unknown, assumed unsafe
  - slug: game_safe_to_respawn
    info:
      en: |-
        ```hsc
        (<void> game_safe_to_respawn <boolean>)
        ```
    net_safe_raw: unknown, assumed unsafe
  - slug: cortana_effect_kill
    info:
      en: |-
        ```hsc
        (<void> cortana_effect_kill)
        ```
        kills the cortana effect
    net_safe_raw: unknown, assumed unsafe
  - slug: test_create_content_item_slayer
    info:
      en: |-
        ```hsc
        (<void> test_create_content_item_slayer)
        ```
        creates a slayer variant
    net_safe_raw: unknown, assumed unsafe
  - slug: test_create_content_item_screenshot
    info:
      en: |-
        ```hsc
        (<void> test_create_content_item_screenshot)
        ```
        creates a screenshot (which isn't actually viewable)
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_scripting_destroy_cortana_effect_cinematic
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_destroy_cortana_effect_cinematic)
        ```
        Destroy cortana effect cinematic
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_migrate_infanty
    info:
      en: |-
        ```hsc
        (<void> ai_migrate_infanty <ai> <ai>)
        ```
        migrates the infantry in an encounter into a different squad.
    net_safe_raw: unknown, assumed unsafe
  - slug: render_cinematic_motion_blur
    info:
      en: |-
        ```hsc
        (<void> render_cinematic_motion_blur <boolean>)
        ```
        enable/disable cinematic motion blur
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_dont_do_avoidance
    info:
      en: |-
        ```hsc
        (<void> ai_dont_do_avoidance <ai> <boolean>)
        ```
        set the AI to not do any vector avoidance when flying
    net_safe_raw: unknown, assumed unsafe
  - slug: cinematic_scripting_clean_up
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_clean_up <long>)
        ```
        Unload the scenario cinematic zone
    net_safe_raw: unknown, assumed unsafe
  - slug: ai_erase_inactive
    info:
      en: |-
        ```hsc
        (<void> ai_erase_inactive <ai> <short>)
        ```
        Erase inactive actors in the given ai index, and any of those actors who become inactive within the next designated ticks
    net_safe_raw: unknown, assumed unsafe
  - slug: stop_bink_movie
    info:
      en: |-
        ```hsc
        (<void> stop_bink_movie)
        ```
        Stops all bink movie playback
    net_safe_raw: unknown, assumed unsafe
  - slug: play_credits_unskippable
    info:
      en: |-
        ```hsc
        (<void> play_credits_unskippable)
        ```
        plays credits movie, no button press detection (you can still use cinematic skipping around this)
    net_safe_raw: unknown, assumed unsafe
  - slug: budget_resource_get_sound
    info:
      en: |-
        ```hsc
        (<sound> budget_resource_get_sound <sound budget reference>)
        ```
        Get a non resolving reference to a looping sound budget reference
    net_safe_raw: unknown, assumed unsafe
  - slug: controller_set_single_player_level_unlocked
    info:
      en: |-
        ```hsc
        (<void> controller_set_single_player_level_unlocked <controller> <short> <boolean>)
        ```
        <controller> <level index> <bool locked> set single player level locked state for specified controller
    net_safe_raw: unknown, assumed unsafe
  - slug: physical_memory_dump
    info:
      en: |-
        ```hsc
        (<void> physical_memory_dump)
        ```
        dumps a record of all physical memory allocations
  - slug: tag_resources_validate_all_pages
    info:
      en: |-
        ```hsc
        (<void> tag_resources_validate_all_pages <boolean>)
        ```
        resource validation every main_loop_body call
  - slug: controller_set_popup_message_index
    info:
      en: |-
        ```hsc
        (<void> controller_set_popup_message_index <controller> <long>)
        ```
        <controller> <message index> set the highest popup message that the player has accepted
    net_safe_raw: unknown, assumed unsafe
  - slug: gui_enter_lobby
    info:
      en: |-
        ```hsc
        (<void> gui_enter_lobby <long>)
        ```
        <lobby index> index 0-4
    net_safe_raw: unknown, assumed unsafe
  - slug: gui_spartan_reset_profile
    info:
      en: |-
        ```hsc
        (<void> gui_spartan_reset_profile <controller>)
        ```
        reset profile stored milestone and hopper rankings
    net_safe_raw: no
  - slug: game_achievements_display_achievement_names
    info:
      en: |-
        ```hsc
        (<void> game_achievements_display_achievement_names)
        ```
        displays the achievement list
    net_safe_raw: no
  - slug: game_grant_achievement_to_controller_by_string
    info:
      en: |-
        ```hsc
        (<void> game_grant_achievement_to_controller_by_string <controller> <string>)
        ```
        unlocks an achievement for a given controller
    net_safe_raw: no
  - slug: game_grant_all_achievements_to_controller
    info:
      en: |-
        ```hsc
        (<void> game_grant_all_achievements_to_controller <controller>)
        ```
        unlocks all achievements for a given controller
    net_safe_raw: no
  - slug: gui_spartan_set_achievement_day_of_month
    info:
      en: |-
        ```hsc
        (<void> gui_spartan_set_achievement_day_of_month <short>)
        ```
        overrides the system time's day of the month for 7 on 7 EXP achievement
    net_safe_raw: no
  - slug: ui_set_is_blue
    info:
      en: |-
        ```hsc
        (<void> ui_set_is_blue <boolean>)
        ```
        fool the system into thinking it is or is not blue disk
    net_safe_raw: no
  - slug: dip_stats_enable
    info:
      en: |-
        ```hsc
        (<void> dip_stats_enable <boolean>)
        ```
        <on> enable DIP statistics
  - slug: dip_stats_dump
    info:
      en: |-
        ```hsc
        (<void> dip_stats_dump)
        ```
        save DIP statistics to file
  - slug: dip_stats_sort_toggle
    info:
      en: |-
        ```hsc
        (<void> dip_stats_sort_toggle)
        ```
        toggle DIP statistics sort mode (inclusive DIP, exclusive DIP)
  - slug: sys_info
    info:
      en: |-
        ```hsc
        (<void> sys_info)
        ```
        dump cpu, gpu and system information
  - slug: is_ace_build
    info:
      en: |-
        ```hsc
        (<boolean> is_ace_build)
        ```
        returns if this is an ACE enabled build
  - slug: ssao_enable
    info:
      en: |-
        ```hsc
        (<void> ssao_enable <short>)
        ```
        turn on/off ssao
  - slug: ssao_radius
    info:
      en: |-
        ```hsc
        (<void> ssao_radius <real>)
        ```
        set ssao radius (0.75 is default)
  - slug: ssao_intensity
    info:
      en: |-
        ```hsc
        (<void> ssao_intensity <real>)
        ```
        set ssao intensity (1.0 is default)
  - slug: ssao_sampleZThreshold
    info:
      en: |-
        ```hsc
        (<void> ssao_sampleZThreshold <real>)
        ```
        set ssao sample z threshold (0.5 is default)
  - slug: color_grading_enable
    info:
      en: |-
        ```hsc
        (<void> color_grading_enable <boolean>)
        ```
        turn on/off color grading
  - slug: lightshafts_enable
    info:
      en: |-
        ```hsc
        (<void> lightshafts_enable <boolean>)
        ```
        turn on/off lightshafts
  - slug: TestPrintBool
    info:
      en: |-
        ```hsc
        (<void> TestPrintBool <string> <boolean>)
        ```
        Prints the specified boolean with the format '<string> = '<boolean>' to the Shell.
  - slug: TestPrintReal
    info:
      en: |-
        ```hsc
        (<void> TestPrintReal <string> <real>)
        ```
        Prints the specified boolean with the format '<string> = '<real>' to the Shell.
  - slug: debug_menu_rebuild
    info:
      en: |-
        ```hsc
        (<void> debug_menu_rebuild)
        ```
        Reparses the debug menu from the text file.
  - slug: debug_camera_load_text
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load_text <string>)
        ```
        loads the camera position and facing from a passed in string
  - slug: simulation_profiler_enable
    info:
      en: |-
        ```hsc
        (<void> simulation_profiler_enable)
        ```
        Turns on the simulation/bandwidth profiler and configures it for high level use (similar to the old screen-text-based bandwidth profiler).
  - slug: simulation_profiler_detail_level
    info:
      en: |-
        ```hsc
        (<long> simulation_profiler_detail_level <long>)
        ```
        set detail level of simulation profiler capture on the host (affects perf & saved film size).  0-9 are valid, else clamped.
  - slug: simulation_profiler_enable_downstream_processing
    info:
      en: |-
        ```hsc
        (<boolean> simulation_profiler_enable_downstream_processing <boolean>)
        ```
        enable/disable the processing of downstream data by the simulation profiler database (default is disabled, so if you want to examine downstream, you need to turn this on at display time.  Does not affect recording!)
  - slug: mp_wake_script
    info:
      en: |-
        ```hsc
        (<void> mp_wake_script <string>)
        ```
        on the host in a distributed game, sends a message to clients to wake a dormant script
    net_safe_raw: yes
  - slug: controller_set_skin
    info:
      en: |-
        ```hsc
        (<void> controller_set_skin <controller> <short> <short>)
        ```
        set skins for specified controller
    net_safe_raw: no
