functions:
  - slug: begin
    info:
      en: >-
        ```hsc

        (begin <expression(s)>)

        ```

        returns the last expression in a sequence after evaluating the sequence
        in order.
    net_safe_raw: 'yes'
  - slug: begin_random
    info:
      en: >-
        ```hsc

        (begin_random <expression(s)>)

        ```

        evaluates the sequence of expressions in random order and returns the
        last value evaluated.
    net_safe_raw: 'yes'
  - slug: if
    info:
      en: |-
        ```hsc
        (if <boolean> <then> [<else>])
        ```
        returns one of two values based on the value of a condition.
    net_safe_raw: 'yes'
  - slug: cond
    info:
      en: |-
        ```hsc
        (cond (<boolean1> <result1>) [(<boolean2> <result2>) [...]])
        ```
        returns the value associated with the first true condition.
    net_safe_raw: 'yes'
  - slug: set
    info:
      en: |-
        ```hsc
        (set <variable name> <expression>)
        ```
        set the value of a global variable.
    net_safe_raw: yes (depending on result)
  - slug: and
    info:
      en: |-
        ```hsc
        (and <boolean(s)>)
        ```
        returns true if all specified expressions are true.
    net_safe_raw: 'yes'
  - slug: or
    info:
      en: |-
        ```hsc
        (or <boolean(s)>)
        ```
        returns true if any specified expressions are true.
    net_safe_raw: 'yes'
  - slug: not
    info:
      en: |-
        ```hsc
        (not <boolean>)
        ```
        returns the opposite of the expression.
    net_safe_raw: 'yes'
  - slug: plus
    info:
      en: |-
        ```hsc
        (+ <number(s)>)
        ```
        returns the sum of all specified expressions.
    net_safe_raw: 'yes'
  - slug: minus
    info:
      en: |-
        ```hsc
        (- <number> <number>)
        ```
        returns the difference of two expressions.
    net_safe_raw: 'yes'
  - slug: mult
    info:
      en: |-
        ```hsc
        (* <number(s)>)
        ```
        returns the product of all specified expressions.
    net_safe_raw: 'yes'
  - slug: div
    info:
      en: |-
        ```hsc
        (/ <number> <number>)
        ```
        returns the quotient of two expressions.
    net_safe_raw: 'yes'
  - slug: min
    info:
      en: |-
        ```hsc
        (min <number(s)>)
        ```
        returns the minimum of all specified expressions.
    net_safe_raw: 'yes'
  - slug: max
    info:
      en: |-
        ```hsc
        (max <number(s)>)
        ```
        returns the maximum of all specified expressions.
    net_safe_raw: 'yes'
  - slug: eq
    info:
      en: |-
        ```hsc
        (= <expression> <expression>)
        ```
        returns true if two expressions are equal
    net_safe_raw: 'yes'
  - slug: ne
    info:
      en: |-
        ```hsc
        (!= <expression> <expression>)
        ```
        returns true if two expressions are not equal
    net_safe_raw: 'yes'
  - slug: gt
    info:
      en: |-
        ```hsc
        (> <number> <number>)
        ```
        returns true if the first number is larger than the second.
    net_safe_raw: 'yes'
  - slug: lt
    info:
      en: |-
        ```hsc
        (< <number> <number>)
        ```
        returns true if the first number is smaller than the second.
    net_safe_raw: 'yes'
  - slug: ge
    info:
      en: |-
        ```hsc
        (>= <number> <number>)
        ```
        returns true if the first number is larger than or equal to the second.
    net_safe_raw: 'yes'
  - slug: le
    info:
      en: |-
        ```hsc
        (<= <number> <number>)
        ```
        returns true if the first number is smaller than or equal to the second.
    net_safe_raw: 'yes'
  - slug: sleep
    info:
      en: >-
        ```hsc

        (sleep <short> [<script>])

        ```

        pauses execution of this script (or, optionally, another script) for the
        specified number of ticks @ 30Hz.
    net_safe_raw: 'yes'
  - slug: sleep_for_ticks
    info:
      en: >-
        ```hsc

        (sleep_for_ticks <short> [<script>])

        ```

        pauses execution of this script (or, optionally, another script) for the
        specified number of ticks.
    net_safe_raw: 'yes'
  - slug: sleep_forever
    info:
      en: >-
        ```hsc

        (sleep_forever [<script>])

        ```

        pauses execution of this script (or, optionally, another script)
        forever.
    net_safe_raw: 'yes'
  - slug: sleep_until
    info:
      en: >-
        ```hsc

        (sleep_until <boolean> [<short>])

        ```

        pauses execution of this script until the specified condition is true,
        checking once per second unless a different number of ticks is
        specified.
    net_safe_raw: 'yes'
  - slug: wake
    info:
      en: |-
        ```hsc
        (wake <script name>)
        ```
        wakes a sleeping script in the next update.
    net_safe_raw: 'yes'
  - slug: inspect
    info:
      en: |-
        ```hsc
        (inspect <expression>)
        ```
        prints the value of an expression to the screen for debugging purposes.
    net_safe_raw: 'yes'
  - slug: branch
    info:
      en: |-
        ```hsc
        (<void> branch <condition> <script>)
        ```
        Stops executing current script when condition met and starts the script indicated in the parameter.
  - slug: begin
    info:
      en: |-
        ```hsc
        (<passthrough> begin <expression(s)>)
        ```
        returns the last expression in a sequence after evaluating the sequence in order.
  - slug: begin_random
    info:
      en: |-
        ```hsc
        (<passthrough> begin_random <expression(s)>)
        ```
        evaluates the sequence of expressions in random order and returns the last value evaluated.
  - slug: begin_count
    info:
      en: |-
        ```hsc
        (<passthrough> begin_count <expression(s)>)
        ```
        evaluates the specified number of expressions in a sequence in random order and returns the last value evaluated.
  - slug: begin_random_count
    info:
      en: |-
        ```hsc
        (<passthrough> begin_random_count <expression(s)>)
        ```
        evaluates the specified number of expressions in a sequence in random order and returns the last value evaluated.
  - slug: if
    info:
      en: |-
        ```hsc
        (<passthrough> if <boolean> <then> [<else>])
        ```
        returns one of two values based on the value of a condition.
  - slug: cond
    info:
      en: |-
        ```hsc
        (<passthrough> cond (<boolean1> <result1>) [(<boolean2> <result2>) [...]])
        ```
        returns the value associated with the first true condition.
  - slug: set
    info:
      en: |-
        ```hsc
        (<passthrough> set <variable name> <expression>)
        ```
        set the value of a global variable.
  - slug: and
    info:
      en: |-
        ```hsc
        (<boolean> and <boolean(s)>)
        ```
        returns true if all specified expressions are true.
  - slug: or
    info:
      en: |-
        ```hsc
        (<boolean> or <boolean(s)>)
        ```
        returns true if any specified expressions are true.
  - slug: plus
    info:
      en: |-
        ```hsc
        (<real> + <number(s)>)
        ```
        returns the sum of all specified expressions.
  - slug: minus
    info:
      en: |-
        ```hsc
        (<real> - <number> <number>)
        ```
        returns the difference of two expressions.
  - slug: mult
    info:
      en: |-
        ```hsc
        (<real> * <number(s)>)
        ```
        returns the product of all specified expressions.
  - slug: div
    info:
      en: |-
        ```hsc
        (<real> / <number> <number>)
        ```
        returns the quotient of two expressions.
  - slug: modulo
    info:
      en: |-
        ```hsc
        (<real> % <number> <number>)
        ```
        returns the remainder of the division of two numbers
  - slug: min
    info:
      en: |-
        ```hsc
        (<real> min <number(s)>)
        ```
        returns the minimum of all specified expressions.
  - slug: max
    info:
      en: |-
        ```hsc
        (<real> max <number(s)>)
        ```
        returns the maximum of all specified expressions.
  - slug: eq
    info:
      en: |-
        ```hsc
        (<boolean> = <expression> <expression>)
        ```
        returns true if two expressions are equal
  - slug: ne
    info:
      en: |-
        ```hsc
        (<boolean> != <expression> <expression>)
        ```
        returns true if two expressions are not equal
  - slug: gt
    info:
      en: |-
        ```hsc
        (<boolean> > <number> <number>)
        ```
        returns true if the first number is larger than the second.
  - slug: lt
    info:
      en: |-
        ```hsc
        (<boolean> < <number> <number>)
        ```
        returns true if the first number is smaller than the second.
  - slug: ge
    info:
      en: |-
        ```hsc
        (<boolean> >= <number> <number>)
        ```
        returns true if the first number is larger than or equal to the second.
  - slug: le
    info:
      en: |-
        ```hsc
        (<boolean> <= <number> <number>)
        ```
        returns true if the first number is smaller than or equal to the second.
  - slug: sleep
    info:
      en: |-
        ```hsc
        (<void> sleep <short> [<script>])
        ```
        pauses execution of this script (or, optionally, another script) for the specified number of ticks.
  - slug: sleep_forever
    info:
      en: |-
        ```hsc
        (<void> sleep_forever [<script>])
        ```
        pauses execution of this script (or, optionally, another script) forever.
  - slug: sleep_until
    info:
      en: |-
        ```hsc
        (<boolean> sleep_until <boolean> [<short>])
        ```
        pauses execution of this script until the specified condition is true, checking once per second unless a different number of ticks is specified.
  - slug: sleep_until_game_ticks
    info:
      en: |-
        ```hsc
        (<boolean> sleep_until_game_ticks <boolean> [<short>])
        ```
        pauses execution of this script until the specified condition is true, checking once per second unless a different number of ticks is specified.
  - slug: wake
    info:
      en: |-
        ```hsc
        (<void> wake <script name>)
        ```
        wakes a sleeping script in the next update.
  - slug: cinematic_sleep
    info:
      en: |-
        ```hsc
        (<void> cinematic_sleep <short> [<script>])
        ```
        cinematic only sleep script call which ignores the 1 frame special case for non 30Hz builds
  - slug: inspect
    info:
      en: |-
        ```hsc
        (<void> inspect <expression>)
        ```
        prints the value of an expression to the screen for debugging purposes.
  - slug: branch
    info:
      en: |-
        ```hsc
        (<void> branch <condition> <script>)
        ```
        Stops executing current script when condition met and starts the script indicated in the parameter.
  - slug: unit
    info:
      en: |-
        ```hsc
        (<unit> unit <object>)
        ```
        converts an object to a unit.
  - slug: vehicle
    info:
      en: |-
        ```hsc
        (<vehicle> vehicle <object>)
        ```
        converts an object to a vehicle.
  - slug: weapon
    info:
      en: |-
        ```hsc
        (<weapon> weapon <object>)
        ```
        converts an object to a vehicle.
  - slug: device
    info:
      en: |-
        ```hsc
        (<device> device <object>)
        ```
        converts an object to a vehicle.
  - slug: scenery
    info:
      en: |-
        ```hsc
        (<scenery> scenery <object>)
        ```
        converts an object to a vehicle.
  - slug: effect_scenery
    info:
      en: |-
        ```hsc
        (<effect_scenery> effect_scenery <object>)
        ```
        converts an object to a vehicle.
  - slug: evaluate
    info:
      en: |-
        ```hsc
        (<void> evaluate <script>)
        ```
        Evaluate the given script
  - slug: not
    info:
      en: |-
        ```hsc
        (<boolean> not <boolean>)
        ```
        returns the opposite of the expression.
  - slug: pin
    info:
      en: |-
        ```hsc
        (<real> pin <real> <real> <real>)
        ```
        returns the first value pinned between the second two
  - slug: dummy_function
    info:
      en: |-
        ```hsc
        (<void> dummy_function)
        ```
        Function that does nothing.
  - slug: print
    info:
      en: |-
        ```hsc
        (<void> print <string>)
        ```
        prints a string to the console.
  - slug: print_if
    info:
      en: |-
        ```hsc
        (<void> print_if <boolean> <string>)
        ```
        prints a string to the console if the condition is true.
  - slug: log_print
    info:
      en: |-
        ```hsc
        (<void> log_print <string>)
        ```
        prints a string to the hs log file.
  - slug: debug_scripting_show_thread
    info:
      en: |-
        ```hsc
        (<void> debug_scripting_show_thread <string> <boolean>)
        ```
        shows or hides the display of any thread containing the given substring.
  - slug: debug_script_thread
    info:
      en: |-
        ```hsc
        (<void> debug_script_thread <string_id> <boolean>)
        ```
        Verbose threads spew to log about script and function calls.
  - slug: debug_scripting
    info:
      en: |-
        ```hsc
        (<void> debug_scripting <boolean>)
        ```
        Turn on/off hs script debugging.
  - slug: debug_scripting_globals
    info:
      en: |-
        ```hsc
        (<void> debug_scripting_globals <boolean>)
        ```
        Turn on/off hs global debugging.
  - slug: debug_scripting_variable
    info:
      en: |-
        ```hsc
        (<void> debug_scripting_variable <string> <boolean>)
        ```
        Turn on/off debugging of a specific global variable; enclose the variable name with single quote characters ('my_variable')
  - slug: debug_scripting_variable_all
    info:
      en: |-
        ```hsc
        (<void> debug_scripting_variable_all <boolean>)
        ```
        Turn on/off debugging of all global variables
  - slug: breakpoint
    info:
      en: |-
        ```hsc
        (<void> breakpoint <string>)
        ```
        If breakpoints are enabled, pause execution when this statement is hit (displaying the given message).
  - slug: kill_active_scripts
    info:
      en: |-
        ```hsc
        (<void> kill_active_scripts)
        ```
        Terminates all currently running threads.
  - slug: get_executing_running_thread
    info:
      en: |-
        ```hsc
        (<long> get_executing_running_thread)
        ```
        Retrieves the current executing thread index
  - slug: kill_thread
    info:
      en: |-
        ```hsc
        (<void> kill_thread <long>)
        ```
        Kill the specified thread
  - slug: script_started
    info:
      en: |-
        ```hsc
        (<boolean> script_started <string_id>)
        ```
        Returns true if the continuous, dormant or startup script was started.
  - slug: script_finished
    info:
      en: |-
        ```hsc
        (<boolean> script_finished <string_id>)
        ```
        Returns true if the continuous, dormant or startup script was finished.
  - slug: local_players
    info:
      en: |-
        ```hsc
        (<object_list> local_players)
        ```
        returns a list of the living player units on the local machine
  - slug: players
    info:
      en: |-
        ```hsc
        (<object_list> players)
        ```
        returns a list of the living player units
  - slug: players_human
    info:
      en: |-
        ```hsc
        (<object_list> players_human)
        ```
        returns a list of the living spartan player units
  - slug: players_elite
    info:
      en: |-
        ```hsc
        (<object_list> players_elite)
        ```
        returns a list of the living elite player units
  - slug: player_get
    info:
      en: |-
        ```hsc
        (<unit> player_get <long>)
        ```
        Get a player unit by absolute index
  - slug: player_in_game_get
    info:
      en: |-
        ```hsc
        (<player> player_in_game_get <long>)
        ```
        Get a player by absolute index
  - slug: human_player_in_game_get
    info:
      en: |-
        ```hsc
        (<player> human_player_in_game_get <long>)
        ```
        Get a player by absolute index
  - slug: elite_player_in_game_get
    info:
      en: |-
        ```hsc
        (<player> elite_player_in_game_get <long>)
        ```
        Get a player by absolute index
  - slug: player_is_in_game
    info:
      en: |-
        ```hsc
        (<boolean> player_is_in_game <player>)
        ```
        Returns true if the player is currently in the game.
  - slug: editor_mode
    info:
      en: |-
        ```hsc
        (<boolean> editor_mode)
        ```
        return if we are currently in the editor
  - slug: kill_volume_enable
    info:
      en: |-
        ```hsc
        (<void> kill_volume_enable <trigger_volume>)
        ```
        enables a kill volume
  - slug: kill_volume_disable
    info:
      en: |-
        ```hsc
        (<void> kill_volume_disable <trigger_volume>)
        ```
        disables a kill volume
  - slug: volume_teleport_players_not_inside
    info:
      en: |-
        ```hsc
        (<void> volume_teleport_players_not_inside <trigger_volume> <cutscene_flag>)
        ```
        moves all players outside a specified trigger volume to a specified flag.
  - slug: volume_test_object
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_object <trigger_volume> <object>)
        ```
        returns true if the specified object is within the specified volume.
  - slug: volume_test_objects
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_objects <trigger_volume> <object_list>)
        ```
        returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed
  - slug: volume_test_objects_all
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_objects_all <trigger_volume> <object_list>)
        ```
        returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed
  - slug: volume_test_players
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_players <trigger_volume>)
        ```
        returns true if any players are within the specified volume. trigger volume must have been postprocessed
  - slug: volume_test_players_all
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_players_all <trigger_volume>)
        ```
        returns true if all players are within the specified volume. trigger volume must have been postprocessed
  - slug: volume_return_objects
    info:
      en: |-
        ```hsc
        (<object_list> volume_return_objects <trigger_volume>)
        ```
        returns list of objects in volume or (max 128).
  - slug: volume_return_objects_by_type
    info:
      en: |-
        ```hsc
        (<object_list> volume_return_objects_by_type <trigger_volume> <long>)
        ```
        returns list of objects in volume or (max 128).
  - slug: volume_return_objects_by_campaign_type
    info:
      en: |-
        ```hsc
        (<object_list> volume_return_objects_by_campaign_type <trigger_volume> <long>)
        ```
        returns list of objects of the specified campaign metagame type that is in the volume or (max 128).
  - slug: zone_set_trigger_volume_enable
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> zone_set_trigger_volume_enable <string_id> <boolean>)
        ```
        enables/disables the trigger volume(s) with the given name that cause zone set switches
  - slug: list_get
    info:
      en: |-
        ```hsc
        (<object> list_get <object_list> <short>)
        ```
        returns an item in an object list.
  - slug: list_count
    info:
      en: |-
        ```hsc
        (<short> list_count <object_list>)
        ```
        returns the number of objects in a list
  - slug: list_count_not_dead
    info:
      en: |-
        ```hsc
        (<short> list_count_not_dead <object_list>)
        ```
        returns the number of objects in a list that aren't dead
  - slug: effect_new
    info:
      en: |-
        ```hsc
        (<void> effect_new <effect> <cutscene_flag>)
        ```
        starts the specified effect at the specified flag.
  - slug: effect_new_random
    info:
      en: |-
        ```hsc
        (<void> effect_new_random <effect> <point_reference>)
        ```
        starts the specified effect at one of the points in the given a point set.
  - slug: effect_new_random
    info:
      en: |-
        ```hsc
        (<void> effect_new_random <effect> <point_reference> <real> <real>)
        ```
        starts the specified effect at one of the points in the given a point set, with a given yaw/pitch perturbation (in that order)
  - slug: effect_new_at_ai_point
    info:
      en: |-
        ```hsc
        (<void> effect_new_at_ai_point <effect> <point_reference>)
        ```
        starts the specified effect at the specified ai point.
  - slug: effect_new_at_point_set_point
    info:
      en: |-
        ```hsc
        (<void> effect_new_at_point_set_point <effect> <point_reference> <long>)
        ```
        starts the specified effect at one of the points in the given a point set.
  - slug: effect_new_on_object_marker
    info:
      en: |-
        ```hsc
        (<void> effect_new_on_object_marker <effect> <object> <string_id>)
        ```
        starts the specified effect on the specified object at the specified marker.
  - slug: effect_new_on_object_marker_loop
    info:
      en: |-
        ```hsc
        (<void> effect_new_on_object_marker_loop <effect> <object> <string_id>)
        ```
        starts the specified effect on the specified object at the specified marker.  Effect loops.
  - slug: effect_stop_object_marker
    info:
      en: |-
        ```hsc
        (<void> effect_stop_object_marker <effect> <object> <string_id>)
        ```
        Stops a running effect that's on a specified object and marker.
  - slug: effect_new_on_ground
    info:
      en: |-
        ```hsc
        (<void> effect_new_on_ground <effect> <object>)
        ```
        starts the specified effect on the ground underneath the object's root.
  - slug: damage_new
    info:
      en: |-
        ```hsc
        (<void> damage_new <damage> <cutscene_flag>)
        ```
        causes the specified damage at the specified flag.
  - slug: damage_object_effect
    info:
      en: |-
        ```hsc
        (<void> damage_object_effect <damage> <object>)
        ```
        causes the specified damage at the specified object.
  - slug: damage_objects_effect
    info:
      en: |-
        ```hsc
        (<void> damage_objects_effect <damage> <object_list>)
        ```
        causes the specified damage at the specified object list.
  - slug: damage_object
    info:
      en: |-
        ```hsc
        (<void> damage_object <object> <string_id> <real>)
        ```
        causes the specified damage at the specified object.
  - slug: damage_objects
    info:
      en: |-
        ```hsc
        (<void> damage_objects <object_list> <string_id> <real>)
        ```
        causes the specified damage at the specified object list.
  - slug: damage_players
    info:
      en: |-
        ```hsc
        (<void> damage_players <damage>)
        ```
        damages all players with the given damage effect
  - slug: soft_ceiling_enable
    info:
      en: |-
        ```hsc
        (<void> soft_ceiling_enable <string_id> <boolean>)
        ```
        turn on or off a soft ceiling
  - slug: object_create
    info:
      en: |-
        ```hsc
        (<void> object_create <object_name>)
        ```
        creates an object from the scenario.
  - slug: object_create_variant
    info:
      en: |-
        ```hsc
        (<void> object_create_variant <object_name> <string_id>)
        ```
        creates an object from the scenario with a given variant.
  - slug: object_create_clone
    info:
      en: |-
        ```hsc
        (<void> object_create_clone <object_name>)
        ```
        creates an object, potentially resulting in multiple objects if it already exists.
  - slug: object_create_anew
    info:
      en: |-
        ```hsc
        (<void> object_create_anew <object_name>)
        ```
        creates an object, destroying it first if it already exists.
  - slug: object_create_if_necessary
    info:
      en: |-
        ```hsc
        (<void> object_create_if_necessary <object_name>)
        ```
        creates an object if it doesn't already exists.
  - slug: object_create_folder
    info:
      en: |-
        ```hsc
        (<void> object_create_folder <folder>)
        ```
        creates all the objects in the given folder
  - slug: object_create_folder_anew
    info:
      en: |-
        ```hsc
        (<void> object_create_folder_anew <folder>)
        ```
        creates all the objects in the given folder
  - slug: object_destroy
    info:
      en: |-
        ```hsc
        (<void> object_destroy <object>)
        ```
        destroys an object.
  - slug: object_destroy_all
    info:
      en: |-
        ```hsc
        (<void> object_destroy_all)
        ```
        destroys all non player objects.
  - slug: object_destroy_type_mask
    info:
      en: |-
        ```hsc
        (<void> object_destroy_type_mask <long>)
        ```
        destroys all objects matching the type mask
  - slug: objects_delete_by_definition
    info:
      en: |-
        ```hsc
        (<void> objects_delete_by_definition <object_definition>)
        ```
        deletes all objects of type <definition>
  - slug: object_destroy_folder
    info:
      en: |-
        ```hsc
        (<void> object_destroy_folder <folder>)
        ```
        destroys all objects in the given folder.
  - slug: object_hide
    info:
      en: |-
        ```hsc
        (<void> object_hide <object> <boolean>)
        ```
        hides or shows the object passed in
  - slug: object_set_shadowless
    info:
      en: |-
        ```hsc
        (<void> object_set_shadowless <object> <boolean>)
        ```
        set/reset shadow castingness of object
  - slug: object_set_allegiance
    info:
      en: |-
        ```hsc
        (<void> object_set_allegiance <object> <team>)
        ```
        sets what campaign team the object belongs
  - slug: object_buckling_magnitude_get
    info:
      en: |-
        ```hsc
        (<real> object_buckling_magnitude_get <object>)
        ```
        returns the amoount \[0-1\] that a scarab is buckling
  - slug: object_function_set
    info:
      en: |-
        ```hsc
        (<void> object_function_set <long> <real>)
        ```
        sets a global object function (0-3) to value
  - slug: object_set_function_variable
    info:
      en: |-
        ```hsc
        (<void> object_set_function_variable <object> <string_id> <real> <real>)
        ```
        sets funciton variable for sin-o-matic use
  - slug: object_set_cinematic_function_variable
    info:
      en: |-
        ```hsc
        (<void> object_set_cinematic_function_variable <object> <string_id> <real> <real>)
        ```
        sets funciton variable for sin-o-matic use
    net_safe_raw: unknown, assumed unsafe
  - slug: object_clear_cinematic_function_variable
    info:
      en: |-
        ```hsc
        (<void> object_clear_cinematic_function_variable <object> <string_id>)
        ```
        clears one funciton variables for sin-o-matic use
    net_safe_raw: unknown, assumed unsafe
  - slug: object_clear_all_cinematic_function_variables
    info:
      en: |-
        ```hsc
        (<void> object_clear_all_cinematic_function_variables <object>)
        ```
        clears all funciton variables for sin-o-matic use
    net_safe_raw: unknown, assumed unsafe
  - slug: object_dynamic_simulation_disable
    info:
      en: |-
        ```hsc
        (<void> object_dynamic_simulation_disable <object> <boolean>)
        ```
        disabled dynamic simulation for this object (makes it fixed)
  - slug: object_set_phantom_power
    info:
      en: |-
        ```hsc
        (<void> object_set_phantom_power <object> <boolean>)
        ```
        sets phantom power to be latched at 1.0f or 0.0f
  - slug: object_wake_physics
    info:
      en: |-
        ```hsc
        (<void> object_wake_physics <object>)
        ```
        wakes physics of an object.  For example it would make an usupported crate fall
  - slug: object_get_at_rest
    info:
      en: |-
        ```hsc
        (<boolean> object_get_at_rest <object>)
        ```
        returns whether or not an object's physics is at rest
  - slug: object_set_ranged_attack_inhibited
    info:
      en: |-
        ```hsc
        (<void> object_set_ranged_attack_inhibited <object> <boolean>)
        ```
        FALSE prevents object from using ranged attack
  - slug: object_set_melee_attack_inhibited
    info:
      en: |-
        ```hsc
        (<void> object_set_melee_attack_inhibited <object> <boolean>)
        ```
        FALSE prevents object from using melee attack
  - slug: objects_dump_memory
    info:
      en: |-
        ```hsc
        (<void> objects_dump_memory)
        ```
        debugs object memory usage
  - slug: object_get_health
    info:
      en: |-
        ```hsc
        (<real> object_get_health <object>)
        ```
        returns the health \[0,1\] of the object, returns -1 if the object does not exist
  - slug: object_get_shield
    info:
      en: |-
        ```hsc
        (<real> object_get_shield <object>)
        ```
        returns the shield \[0,1\] of the object, returns -1 if the object does not exist
  - slug: object_set_shield_effect
    info:
      en: |-
        ```hsc
        (<void> object_set_shield_effect <object> <real> <real>)
        ```
        sets the shield response effect (not current shield amount) to a given value over the given number of seconds (cinematic use only, remember to call (object_set_shield_effect 0 0) after use!)
  - slug: object_set_physics
    info:
      en: |-
        ```hsc
        (<void> object_set_physics <object> <boolean>)
        ```
        prevents an object from running physics or colliding with any other objects
  - slug: object_get_parent
    info:
      en: |-
        ```hsc
        (<object> object_get_parent <object>)
        ```
        returns the parent of the given object
  - slug: objects_attach
    info:
      en: |-
        ```hsc
        (<void> objects_attach <object> <string_id> <object> <string_id>)
        ```
        attaches the second object to the first both strings can be empty
  - slug: object_at_marker
    info:
      en: |-
        ```hsc
        (<object> object_at_marker <object> <string_id>)
        ```
        returns the object attached to the marker of the given parent object
  - slug: objects_detach
    info:
      en: |-
        ```hsc
        (<void> objects_detach <object> <object>)
        ```
        detaches from the given parent object the given child object
  - slug: object_set_scale
    info:
      en: |-
        ```hsc
        (<void> object_set_scale <object> <real> <short>)
        ```
        sets the scale for a given object and interpolates over the given number of frames to achieve that scale
  - slug: object_set_velocity
    info:
      en: |-
        ```hsc
        (<void> object_set_velocity <object> <real>)
        ```
        Sets the (object-relative) forward velocity of the given object
  - slug: object_get_bsp
    info:
      en: |-
        ```hsc
        (<short> object_get_bsp <object>)
        ```
        Returns the BSP index that the object is in
  - slug: object_set_as_fireteam_target
    info:
      en: |-
        ```hsc
        (<void> object_set_as_fireteam_target <object> <boolean>)
        ```
        sets the object as something that the fireteam selection process is interested in.
  - slug: object_is_reserved
    info:
      en: |-
        ```hsc
        (<boolean> object_is_reserved <object>)
        ```
        checks whether a given object has been reserved by a fireteam 
  - slug: object_set_velocity
    info:
      en: |-
        ```hsc
        (<void> object_set_velocity <object> <real> <real> <real>)
        ```
        Sets the (object-relative) velocity of the given object
  - slug: object_set_deleted_when_deactivated
    info:
      en: |-
        ```hsc
        (<void> object_set_deleted_when_deactivated <object>)
        ```
        when this object deactivates it will be deleted
  - slug: object_copy_player_appearance
    info:
      en: |-
        ```hsc
        (<void> object_copy_player_appearance <object> <long>)
        ```
        copy appearance into object from player n (starts counting from 0)
  - slug: object_model_target_destroyed
    info:
      en: |-
        ```hsc
        (<boolean> object_model_target_destroyed <object> <string_id>)
        ```
        returns TRUE if the specified model target is destroyed
  - slug: object_model_targets_destroyed
    info:
      en: |-
        ```hsc
        (<short> object_model_targets_destroyed <object> <string_id>)
        ```
        returns TRUE if the specified model target is destroyed
  - slug: object_enable_damage_section
    info:
      en: |-
        ```hsc
        (<void> object_enable_damage_section <object> <string_id> <real>)
        ```
        enables the specified damage section on the specified object with the specified initial vitality(mostly for debugging purposes)
  - slug: object_disable_damage_section
    info:
      en: |-
        ```hsc
        (<void> object_disable_damage_section <object> <string_id>)
        ```
        disables the specified damage section on the specified object (mostly for debugging purposes)
  - slug: object_damage_damage_section
    info:
      en: |-
        ```hsc
        (<void> object_damage_damage_section <object> <string_id> <real>)
        ```
        applies damage to a damage section, causing all manner of effects/constraint breakage to occur
  - slug: object_cannot_die
    info:
      en: |-
        ```hsc
        (<void> object_cannot_die <object> <boolean>)
        ```
        Set whether the object can die from damage or not (as opposed to by scripting)
  - slug: object_cannot_die_except_kill_volumes
    info:
      en: |-
        ```hsc
        (<void> object_cannot_die_except_kill_volumes <object> <boolean>)
        ```
        Set whether the object can die from damage or not (as opposed to by scripting), except for kill volumes.
  - slug: object_ignores_emp
    info:
      en: |-
        ```hsc
        (<void> object_ignores_emp <object> <boolean>)
        ```
        Sets whether the object will by immune to EMP damage side effects (ie: vehicle disabling)
  - slug: object_vitality_pinned
    info:
      en: |-
        ```hsc
        (<boolean> object_vitality_pinned <object>)
        ```
        returns TRUE if the object's vitality is currently pinned at some minimum value because it cannot die.
  - slug: garbage_collect_now
    info:
      en: |-
        ```hsc
        (<void> garbage_collect_now)
        ```
        causes all garbage objects except those visible to a player to be collected immediately
  - slug: garbage_collect_unsafe
    info:
      en: |-
        ```hsc
        (<void> garbage_collect_unsafe)
        ```
        forces all garbage objects to be collected immediately, even those visible to a player (dangerous!)
  - slug: garbage_collect_multiplayer
    info:
      en: |-
        ```hsc
        (<void> garbage_collect_multiplayer)
        ```
        runs multiplayer garbage collection
  - slug: object_cannot_take_damage
    info:
      en: |-
        ```hsc
        (<void> object_cannot_take_damage <object_list>)
        ```
        prevents an object from taking damage
  - slug: object_get_recent_body_damage
    info:
      en: |-
        ```hsc
        (<real> object_get_recent_body_damage <object>)
        ```
        Get object recent body damage
  - slug: object_get_recent_shield_damage
    info:
      en: |-
        ```hsc
        (<real> object_get_recent_shield_damage <object>)
        ```
        Get object recent shield damage
  - slug: object_can_take_damage
    info:
      en: |-
        ```hsc
        (<void> object_can_take_damage <object_list>)
        ```
        allows an object to take damage again
  - slug: object_immune_to_friendly_damage
    info:
      en: |-
        ```hsc
        (<void> object_immune_to_friendly_damage <object_list> <boolean>)
        ```
        controls whether an object takes damage from friendly objects
  - slug: object_cinematic_lod
    info:
      en: |-
        ```hsc
        (<void> object_cinematic_lod <object> <boolean>)
        ```
        makes an object use the highest lod for the remainder of the levels' cutscenes.
  - slug: object_cinematic_collision
    info:
      en: |-
        ```hsc
        (<void> object_cinematic_collision <object> <boolean>)
        ```
        makes an object not collide with other cinematic collision objects.
  - slug: object_cinematic_visibility
    info:
      en: |-
        ```hsc
        (<void> object_cinematic_visibility <object> <boolean>)
        ```
        makes an object bypass visibility and always render during cinematics.
  - slug: objects_predict
    info:
      en: |-
        ```hsc
        (<void> objects_predict <object_list>)
        ```
        loads textures/geometry/sounds necessary to present objects that are about to come on-screen
  - slug: objects_predict_high
    info:
      en: |-
        ```hsc
        (<void> objects_predict_high <object_list>)
        ```
        loads textures/geometry/sounds necessary to present objects that are about to come on-screen
  - slug: objects_predict_low
    info:
      en: |-
        ```hsc
        (<void> objects_predict_low <object_list>)
        ```
        loads textures/geometry/sounds necessary to present objects that are about to come on-screen
  - slug: object_type_predict_high
    info:
      en: |-
        ```hsc
        (<void> object_type_predict_high <object_definition>)
        ```
        loads textures necessary to draw an object that's about to come on-screen.
  - slug: object_type_predict_low
    info:
      en: |-
        ```hsc
        (<void> object_type_predict_low <object_definition>)
        ```
        loads textures necessary to draw an object that's about to come on-screen.
  - slug: object_type_predict
    info:
      en: |-
        ```hsc
        (<void> object_type_predict <object_definition>)
        ```
        loads textures necessary to draw an object that's about to come on-screen.
  - slug: object_teleport
    info:
      en: |-
        ```hsc
        (<void> object_teleport <object> <cutscene_flag>)
        ```
        moves the specified object to the specified flag.
  - slug: object_teleport_to_ai_point
    info:
      en: |-
        ```hsc
        (<void> object_teleport_to_ai_point <object> <point_reference>)
        ```
        moves the specified object to the specified ai point.
  - slug: object_set_facing
    info:
      en: |-
        ```hsc
        (<void> object_set_facing <object> <cutscene_flag>)
        ```
        turns the specified object in the direction of the specified flag.
  - slug: object_set_shield
    info:
      en: |-
        ```hsc
        (<void> object_set_shield <object> <real>)
        ```
        sets the shield vitality of the specified object (between 0 and 1).
  - slug: object_set_shield_stun
    info:
      en: |-
        ```hsc
        (<void> object_set_shield_stun <object> <real>)
        ```
        set how long the shield will be stunned for, 0 is unstunned
  - slug: object_set_shield_stun_infinite
    info:
      en: |-
        ```hsc
        (<void> object_set_shield_stun_infinite <object>)
        ```
        make this objects shield be stunned permanently
  - slug: object_set_permutation
    info:
      en: |-
        ```hsc
        (<void> object_set_permutation <object> <string_id> <string_id>)
        ```
        sets the desired region (use "" for all regions) to the permutation with the given name, e.g. (object_set_permutation flood "right arm" ~damaged)
  - slug: object_set_variant
    info:
      en: |-
        ```hsc
        (<void> object_set_variant <object> <string_id>)
        ```
        sets the specified object to the specified model variant
  - slug: object_set_region_state
    info:
      en: |-
        ```hsc
        (<void> object_set_region_state <object> <string_id> <model_state>)
        ```
        sets the desired region (use "" for all regions) to the model state with the given name, e.g. (object_set_region_state marine head destroyed)
  - slug: object_set_model_state_property
    info:
      en: |-
        ```hsc
        (<void> object_set_model_state_property <object> <long> <boolean>)
        ```
        sets the desired region (use "" for all regions) to the model state with the given name, e.g. (object_set_region_state marine head destroyed)
  - slug: objects_can_see_object
    info:
      en: |-
        ```hsc
        (<boolean> objects_can_see_object <object_list> <object> <real>)
        ```
        returns true if any of the specified units are looking within the specified number of degrees of the object.
  - slug: objects_can_see_flag
    info:
      en: |-
        ```hsc
        (<boolean> objects_can_see_flag <object_list> <cutscene_flag> <real>)
        ```
        returns true if any of the specified units are looking within the specified number of degrees of the flag.
  - slug: objects_distance_to_object
    info:
      en: |-
        ```hsc
        (<real> objects_distance_to_object <object_list> <object>)
        ```
        returns minimum distance from any of the specified objects to the specified destination object. (returns -1 if there are no objects to check)
  - slug: objects_distance_to_flag
    info:
      en: |-
        ```hsc
        (<real> objects_distance_to_flag <object_list> <cutscene_flag>)
        ```
        returns minimum distance from any of the specified objects to the specified flag. (returns -1 if there are no objects, or no flag, to check)
  - slug: objects_distance_to_point
    info:
      en: |-
        ```hsc
        (<real> objects_distance_to_point <object_list> <point_reference>)
        ```
        returns minimum distance from any of the specified objects to the specified flag. (returns -1 if there are no objects, or no flag, to check)
  - slug: map_info
    info:
      en: |-
        ```hsc
        (<void> map_info)
        ```
        prints the map, zone set, active bsps, and current bsp
  - slug: position_predict
    info:
      en: |-
        ```hsc
        (<void> position_predict <real> <real> <real>)
        ```
        in: x, y, z position. loads textures/geometry/sounds necessary to present locations that are about to come on-screen.
  - slug: shader_predict
    info:
      en: |-
        ```hsc
        (<void> shader_predict <shader>)
        ```
        in: shader name. loads textures necessary for a shader.
  - slug: bitmap_predict
    info:
      en: |-
        ```hsc
        (<void> bitmap_predict <bitmap>)
        ```
        in: bitmap name. loads all the bitmaps in that bitmap group
  - slug: script_recompile
    info:
      en: |-
        ```hsc
        (<void> script_recompile)
        ```
        recompiles scripts.
  - slug: script_doc
    info:
      en: |-
        ```hsc
        (<void> script_doc)
        ```
        saves a file called hs_doc.txt with parameters for all script commands.
  - slug: help
    info:
      en: |-
        ```hsc
        (<void> help <string>)
        ```
        prints a description of the named function.
  - slug: game_engine_objects
    info:
      en: |-
        ```hsc
        (<object_list> game_engine_objects)
        ```
        returns a list of the special game engine objects
  - slug: random_range
    info:
      en: |-
        ```hsc
        (<short> random_range <short> <short>)
        ```
        returns a random value in the range \[lower bound, upper bound)
  - slug: real_random_range
    info:
      en: |-
        ```hsc
        (<real> real_random_range <real> <real>)
        ```
        returns a random value in the range \[lower bound, upper bound)
  - slug: physics_constants_reset
    info:
      en: |-
        ```hsc
        (<void> physics_constants_reset)
        ```
        resets all physics constants to earthly values
  - slug: physics_set_gravity
    info:
      en: |-
        ```hsc
        (<void> physics_set_gravity <real>)
        ```
        set global gravity acceleration relative to halo standard gravity
  - slug: physics_set_velocity_frame
    info:
      en: |-
        ```hsc
        (<void> physics_set_velocity_frame <real> <real> <real>)
        ```
        sets a local frame of motion for updating physics of things that wish to respect it
  - slug: physics_disable_character_ground_adhesion_forces
    info:
      en: |-
        ```hsc
        (<void> physics_disable_character_ground_adhesion_forces <real>)
        ```
        turn off ground adhesion forces so you can play tricks with gravity
  - slug: havok_debug_start
    info:
      en: |-
        ```hsc
        (<void> havok_debug_start)
        ```
        start up the havok visual debugger
  - slug: havok_debug_stop
    info:
      en: |-
        ```hsc
        (<void> havok_debug_stop)
        ```
        stops the havok debug capture
  - slug: havok_dump_world
    info:
      en: |-
        ```hsc
        (<void> havok_dump_world <string> <boolean>)
        ```
        dump the state of the havok world, with our without a movie
  - slug: havok_dump_world_close_movie
    info:
      en: |-
        ```hsc
        (<void> havok_dump_world_close_movie)
        ```
        end the capture of a havok dump movie
  - slug: havok_profile_start
    info:
      en: |-
        ```hsc
        (<void> havok_profile_start)
        ```
        start profiling havok
  - slug: havok_profile_stop
    info:
      en: |-
        ```hsc
        (<void> havok_profile_stop)
        ```
        stop profiling havok, and save the results
  - slug: havok_profile_range
    info:
      en: |-
        ```hsc
        (<void> havok_profile_range <long> <long>)
        ```
        captures timers and a movie of a specific tick range
  - slug: havok_reset_allocated_state
    info:
      en: |-
        ```hsc
        (<void> havok_reset_allocated_state)
        ```
        strips down and builds back up all allocated havok memory
  - slug: breakable_surfaces_enable
    info:
      en: |-
        ```hsc
        (<void> breakable_surfaces_enable <boolean>)
        ```
        enables or disables breakability of all breakable surfaces on level
  - slug: breakable_surfaces_reset
    info:
      en: |-
        ```hsc
        (<void> breakable_surfaces_reset)
        ```
        restores all breakable surfaces
  - slug: recording_play
    info:
      en: |-
        ```hsc
        (<boolean> recording_play <unit> <cutscene_recording>)
        ```
        make the specified unit run the specified cutscene recording.
  - slug: recording_play_and_delete
    info:
      en: |-
        ```hsc
        (<boolean> recording_play_and_delete <unit> <cutscene_recording>)
        ```
        make the specified unit run the specified cutscene recording, deletes the unit when the animation finishes.
  - slug: recording_play_and_hover
    info:
      en: |-
        ```hsc
        (<boolean> recording_play_and_hover <vehicle> <cutscene_recording>)
        ```
        make the specified vehicle run the specified cutscene recording, hovers the vehicle when the animation finishes.
  - slug: recording_kill
    info:
      en: |-
        ```hsc
        (<void> recording_kill <unit>)
        ```
        kill the specified unit's cutscene recording.
  - slug: recording_time
    info:
      en: |-
        ```hsc
        (<short> recording_time <unit>)
        ```
        return the time remaining in the specified unit's cutscene recording.
  - slug: render_lights
    info:
      en: |-
        ```hsc
        (<boolean> render_lights <boolean>)
        ```
        enables/disables dynamic lights
  - slug: print_light_state
    info:
      en: |-
        ```hsc
        (<void> print_light_state)
        ```
        outputs text light state
  - slug: render_lights_enable_cinematic_shadow
    info:
      en: |-
        ```hsc
        (<void> render_lights_enable_cinematic_shadow <boolean> <object> <string_id> <real>)
        ```
        enable/disable the specified unit to receive cinematic shadows where the shadow is focused about a radius around a marker name
  - slug: texture_camera_set_object_marker
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_object_marker <object> <string_id> <real>)
        ```
        sets the render texture camera to a given object marker
  - slug: texture_camera_set_position
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_position <real> <real> <real>)
        ```
        sets the render texture camera position
  - slug: texture_camera_set_target
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_target <real> <real> <real>)
        ```
        sets the render texture camera target
  - slug: texture_camera_attach_to_object
    info:
      en: |-
        ```hsc
        (<void> texture_camera_attach_to_object <object> <string_id>)
        ```
        attaches the render texture camera to a given object marker
  - slug: texture_camera_target_object
    info:
      en: |-
        ```hsc
        (<void> texture_camera_target_object <object> <string_id>)
        ```
        targets the render texture camera to view a given object marker
  - slug: texture_camera_position_world_offset
    info:
      en: |-
        ```hsc
        (<void> texture_camera_position_world_offset <real> <real> <real>)
        ```
        adds a worldspace offset to the current texture camera position
  - slug: texture_camera_on
    info:
      en: |-
        ```hsc
        (<void> texture_camera_on)
        ```
        turns on the render texture camera
  - slug: texture_camera_bink
    info:
      en: |-
        ```hsc
        (<void> texture_camera_bink)
        ```
        turns on the render texture camera and renders a bink to it
  - slug: texture_camera_off
    info:
      en: |-
        ```hsc
        (<void> texture_camera_off)
        ```
        turns off the render texture camera
  - slug: texture_camera_set_aspect_ratio
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_aspect_ratio <real>)
        ```
        sets the texture camera aspet ratio
  - slug: texture_camera_set_resolution
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_resolution <long> <long>)
        ```
        sets the texture camera render resolution
  - slug: texture_camera_render_mode
    info:
      en: |-
        ```hsc
        (<void> texture_camera_render_mode <long>)
        ```
        switches the texture camera render mode
  - slug: texture_camera_set_fov
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_fov <real>)
        ```
        sets the field of view on the texture camera, in degrees
  - slug: texture_camera_set_fov_frame_target
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_fov_frame_target <real>)
        ```
        zooms the field of view to frame the target, with target zoom factor to zoom closer
  - slug: texture_camera_enable_dynamic_lights
    info:
      en: |-
        ```hsc
        (<void> texture_camera_enable_dynamic_lights <boolean>)
        ```
        toggle rendering of dynamic lights in the texture camera
  - slug: hud_camera_on
    info:
      en: |-
        ```hsc
        (<void> hud_camera_on <long>)
        ```
        turns on the hud camera
  - slug: hud_camera_off
    info:
      en: |-
        ```hsc
        (<void> hud_camera_off <long>)
        ```
        turns off the hud camera
  - slug: hud_camera_set_position
    info:
      en: |-
        ```hsc
        (<void> hud_camera_set_position <long> <real> <real> <real>)
        ```
        sets the render texture camera position
  - slug: hud_camera_set_target
    info:
      en: |-
        ```hsc
        (<void> hud_camera_set_target <long> <real> <real> <real>)
        ```
        sets the render texture camera target
  - slug: hud_camera_attach_to_object
    info:
      en: |-
        ```hsc
        (<void> hud_camera_attach_to_object <long> <object> <string_id>)
        ```
        attaches the render texture camera to a given object marker
  - slug: hud_camera_target_object
    info:
      en: |-
        ```hsc
        (<void> hud_camera_target_object <long> <object> <string_id>)
        ```
        targets the render texture camera to view a given object marker
  - slug: hud_camera_structure
    info:
      en: |-
        ```hsc
        (<void> hud_camera_structure <long> <boolean>)
        ```
        toggle rendering of structure in the hud camera
  - slug: hud_camera_highlight_object
    info:
      en: |-
        ```hsc
        (<void> hud_camera_highlight_object <long> <object> <real> <real> <real> <real>)
        ```
        highlights an object in the given color
  - slug: hud_camera_clear_objects
    info:
      en: |-
        ```hsc
        (<void> hud_camera_clear_objects <long>)
        ```
        clears all objects
  - slug: hud_camera_spin_around
    info:
      en: |-
        ```hsc
        (<void> hud_camera_spin_around <long> <object>)
        ```
        makes the hud camera spin around the given object
  - slug: hud_camera_from_player_view
    info:
      en: |-
        ```hsc
        (<void> hud_camera_from_player_view <long>)
        ```
        aligns the hud camera to the player camera
  - slug: hud_camera_window
    info:
      en: |-
        ```hsc
        (<void> hud_camera_window <long> <real> <real> <real> <real>)
        ```
        sets the render window of the hud camera (0...1)
  - slug: render_debug_texture_camera
    info:
      en: |-
        ```hsc
        (<void> render_debug_texture_camera <boolean>)
        ```
        toggles displaying the texture camera in the corner of the screen
  - slug: render_debug_cheap_particles
    info:
      en: |-
        ```hsc
        (<void> render_debug_cheap_particles <boolean>)
        ```
        toggles displaying the cheap particle buffer in the corner of the screen
  - slug: render_debug_rain_occlusion
    info:
      en: |-
        ```hsc
        (<void> render_debug_rain_occlusion <boolean>)
        ```
        toggles displaying the rain occlusion in the corner of the screen
  - slug: render_debug_rain_fog
    info:
      en: |-
        ```hsc
        (<void> render_debug_rain_fog <boolean>)
        ```
        toggles rendering rain fog
  - slug: debug_rain_toggle
    info:
      en: |-
        ```hsc
        (<void> debug_rain_toggle)
        ```
        toggles rain debug modes
  - slug: weather_animate
    info:
      en: |-
        ```hsc
        (<void> weather_animate <string_id> <real> <real>)
        ```
        turns on the named weather to a specified amount in the given seconds
  - slug: weather_animate_force
    info:
      en: |-
        ```hsc
        (<void> weather_animate_force <string_id> <real> <real>)
        ```
        turns on the named weather to a specified amount in the given seconds
  - slug: debug_structure_cluster
    info:
      en: |-
        ```hsc
        (<void> debug_structure_cluster <long> <long>)
        ```
        specify a structure and cluster to debug
  - slug: render_debug_structure_cluster_fog
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_cluster_fog <long>)
        ```
        enables cluster fog debugging
  - slug: render_debug_structure_fog_plane
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_plane <long>)
        ```
        enables fog plane debugging
  - slug: render_debug_structure_fog_plane_infinite_extent
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_plane_infinite_extent <long>)
        ```
        enables fog plane debugging
  - slug: render_debug_structure_fog_zone
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_zone <long>)
        ```
        enabled fog zone debugging
  - slug: render_debug_structure_fog_zone_floodfill
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_zone_floodfill <long>)
        ```
        enables fog zone debugging
  - slug: render_debug_structure_all_fog_planes
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_all_fog_planes <boolean>)
        ```
        enables fog plane debugging (all)
  - slug: render_debug_structure_all_cluster_errors
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_all_cluster_errors <boolean>)
        ```
        enables cluster error debugging (all)
  - slug: render_debug_structure_line_opacity
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_line_opacity <real> <real> <real> <real>)
        ```
        sets the opacity (0 is default)
  - slug: render_debug_structure_text_opacity
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_text_opacity <real> <real> <real> <real>)
        ```
        sets the opacity (0 is default)
  - slug: render_debug_structure_opacity
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_opacity <real> <real> <real> <real>)
        ```
        sets the opacity (0 is default)
  - slug: render_debug_structure_non_occluded_fog_planes
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_non_occluded_fog_planes <boolean>)
        ```
        controls non-occluded fog plane debugging
  - slug: render_debug_structure_lightmaps_use_pervertex
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_lightmaps_use_pervertex)
        ```
        sets the lightmap preference to per-vertex, ignores per-pixel if available
  - slug: render_debug_structure_lightmaps_use_reset
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_lightmaps_use_reset)
        ```
        resets the lightmap preference setting and updates the internal lightmap bsp data if necessary
  - slug: render_debug_structure_lightmaps_sample_enable
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_lightmaps_sample_enable)
        ```
        enables visualization of match samples if available
  - slug: render_debug_structure_lightmaps_sample_disable
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_lightmaps_sample_disable)
        ```
        disables visualization of match samples
  - slug: render_debug_query_object_bitmaps
    info:
      en: |-
        ```hsc
        (<void> render_debug_query_object_bitmaps <string>)
        ```
        substring of object definition name to spew out it's debug usage
  - slug: render_debug_query_bsp_resources
    info:
      en: |-
        ```hsc
        (<void> render_debug_query_bsp_resources <long> <boolean>)
        ```
        BSP index and whether to spit out all bitmaps used
  - slug: render_debug_query_all_object_resources
    info:
      en: |-
        ```hsc
        (<void> render_debug_query_all_object_resources)
        ```
        Outputs text of texture and geometry memory usage
  - slug: render_debug_query_d3d_resources
    info:
      en: |-
        ```hsc
        (<void> render_debug_query_d3d_resources)
        ```
        Outputs text of d3d resource usage
  - slug: render_debug_text_using_simple_font
    info:
      en: |-
        ```hsc
        (<void> render_debug_text_using_simple_font <boolean>)
        ```
        toggles use of the much faster simple_font system for debug text rendering
  - slug: render_postprocess_color_tweaking_reset
    info:
      en: |-
        ```hsc
        (<void> render_postprocess_color_tweaking_reset)
        ```
        resets hue saturation filters to default
  - slug: render_debug_wrinkle_weights_a
    info:
      en: |-
        ```hsc
        (<void> render_debug_wrinkle_weights_a <real> <real> <real> <real>)
        ```
        manually set wrinkle weights for mask a
  - slug: render_debug_wrinkle_weights_b
    info:
      en: |-
        ```hsc
        (<void> render_debug_wrinkle_weights_b <real> <real> <real> <real>)
        ```
        manually set wrinkle weights for mask b
  - slug: render_debug_wrinkle_weights_from_console
    info:
      en: |-
        ```hsc
        (<void> render_debug_wrinkle_weights_from_console <boolean>)
        ```
        toggles whether debug wrinkle weights come from animation data or console commands
  - slug: scenery_animation_start
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start <scenery> <animation_graph> <string_id>)
        ```
        starts a custom animation playing on a piece of scenery
  - slug: scenery_animation_start_loop
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_loop <scenery> <animation_graph> <string_id>)
        ```
        starts a custom looping animation playing on a piece of scenery
  - slug: scenery_animation_start_relative
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_relative <scenery> <animation_graph> <string_id> <object>)
        ```
        starts a custom animation playing on a piece of scenery relative to a parent object
  - slug: scenery_animation_start_relative_loop
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_relative_loop <scenery> <animation_graph> <string_id> <object>)
        ```
        starts a custom looping animation playing on a piece of scenery relative to a parent object
  - slug: scenery_animation_start_at_frame
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_at_frame <scenery> <animation_graph> <string_id> <short>)
        ```
        starts a custom animation playing on a piece of scenery at a specific frame
  - slug: scenery_animation_start_relative_at_frame
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_relative_at_frame <scenery> <animation_graph> <string_id> <object> <short>)
        ```
        starts a custom animation playing on a piece of scenery relative to a specific cutscene flag at a specific frame
  - slug: scenery_animation_idle
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_idle <scenery>)
        ```
        starts the idle animation (if any) for a piece of scenery
  - slug: scenery_get_animation_time
    info:
      en: |-
        ```hsc
        (<short> scenery_get_animation_time <scenery>)
        ```
        returns the number of ticks remaining in a custom animation (or zero, if the animation is over).
  - slug: unit_can_blink
    info:
      en: |-
        ```hsc
        (<void> unit_can_blink <unit> <boolean>)
        ```
        allows a unit to blink or not (units never blink when they are dead)
  - slug: unit_set_active_camo
    info:
      en: |-
        ```hsc
        (<void> unit_set_active_camo <unit> <boolean> <real>)
        ```
        enable or disable active camo for the given unit over the specified number of seconds
  - slug: unit_open
    info:
      en: |-
        ```hsc
        (<void> unit_open <unit>)
        ```
        opens the hatches on the given unit
  - slug: unit_close
    info:
      en: |-
        ```hsc
        (<void> unit_close <unit>)
        ```
        closes the hatches on a given unit
  - slug: unit_kill
    info:
      en: |-
        ```hsc
        (<void> unit_kill <unit>)
        ```
        kills a given unit, no saving throw
  - slug: unit_kill_silent
    info:
      en: |-
        ```hsc
        (<void> unit_kill_silent <unit>)
        ```
        kills a given unit silently (doesn't make them play their normal death animation or sound)
  - slug: unit_is_emitting
    info:
      en: |-
        ```hsc
        (<boolean> unit_is_emitting <unit>)
        ```
        returns whether or not the given unit is current emitting an ai
  - slug: unit_is_emp_stunned
    info:
      en: |-
        ```hsc
        (<boolean> unit_is_emp_stunned <unit>)
        ```
        This will return whether the unit is stunned by EMP damage
  - slug: unit_get_custom_animation_time
    info:
      en: |-
        ```hsc
        (<short> unit_get_custom_animation_time <unit>)
        ```
        returns the number of ticks remaining in a unit's custom animation (or zero, if the animation is over).
  - slug: unit_stop_custom_animation
    info:
      en: |-
        ```hsc
        (<void> unit_stop_custom_animation <unit>)
        ```
        stops the custom animation running on the given unit.
  - slug: custom_animation
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation <unit> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)
  - slug: custom_animation_loop
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_loop <unit> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)
  - slug: custom_animation_relative
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_relative <unit> <animation_graph> <string_id> <boolean> <object>)
        ```
        starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)
  - slug: custom_animation_relative_loop
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_relative_loop <unit> <animation_graph> <string_id> <boolean> <object>)
        ```
        starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)
  - slug: custom_animation_list
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_list <object_list> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on a unit list (interpolates into animation if last parameter is TRUE)
  - slug: unit_custom_animation_at_frame
    info:
      en: |-
        ```hsc
        (<boolean> unit_custom_animation_at_frame <unit> <animation_graph> <string_id> <boolean> <short>)
        ```
        starts a custom animation playing on a unit at a specific frame index(interpolates into animation if next to last parameter is TRUE)
  - slug: unit_custom_animation_relative_at_frame
    info:
      en: |-
        ```hsc
        (<boolean> unit_custom_animation_relative_at_frame <unit> <animation_graph> <string_id> <string_id> <boolean> <short>)
        ```
        starts a custom animation playing on a unit relative to a specific cutscene flag at a specific frame index(interpolates into animation if next to last parameter is TRUE)
  - slug: unit_is_playing_custom_animation
    info:
      en: |-
        ```hsc
        (<boolean> unit_is_playing_custom_animation <unit>)
        ```
        returns TRUE if the given unit is still playing a custom animation
  - slug: unit_has_mandibles_hidden
    info:
      en: |-
        ```hsc
        (<boolean> unit_has_mandibles_hidden <unit>)
        ```
        returns TRUE if the given unit needs a mandible replacement
  - slug: animation_capture_set_file_name
    info:
      en: |-
        ```hsc
        (<void> animation_capture_set_file_name <string>)
        ```
        sets the file name used for the animation capture
  - slug: animation_capture_set_origin_object_name
    info:
      en: |-
        ```hsc
        (<void> animation_capture_set_origin_object_name <string_id>)
        ```
        sets the name of the object that will be used as the capture origin
  - slug: animation_capture_start_recording
    info:
      en: |-
        ```hsc
        (<void> animation_capture_start_recording)
        ```
        starts capturing animation on the object currently possessed by the player
  - slug: animation_capture_stop_recording
    info:
      en: |-
        ```hsc
        (<void> animation_capture_stop_recording)
        ```
        stops capturing animation on the object currently possessed by the player
  - slug: sync_action_create
    info:
      en: |-
        ```hsc
        (<boolean> sync_action_create <unit> <string_id>)
        ```
        This will spawn all actors necessary to play a sync action and play it
  - slug: object_running_sync_action
    info:
      en: |-
        ```hsc
        (<boolean> object_running_sync_action <object> <string_id>)
        ```
        Returns true if the given object is running the named sync action
  - slug: object_set_custom_animations_hold_on_last_frame
    info:
      en: |-
        ```hsc
        (<void> object_set_custom_animations_hold_on_last_frame <boolean>)
        ```
        changes the default behavior for custom animations
  - slug: object_set_custom_animations_prevent_lipsync_head_movement
    info:
      en: |-
        ```hsc
        (<void> object_set_custom_animations_prevent_lipsync_head_movement <boolean>)
        ```
        when true, prevents lipsync from bobbing the head during custom animations. default is true.
  - slug: preferred_animation_list_add
    info:
      en: |-
        ```hsc
        (<boolean> preferred_animation_list_add <object> <string_id>)
        ```
        adds an animation into the 'preferred list' of animations
  - slug: preferred_animation_list_clear
    info:
      en: |-
        ```hsc
        (<void> preferred_animation_list_clear)
        ```
        clears the 'preferred list' of animations
  - slug: unit_get_team_index
    info:
      en: |-
        ```hsc
        (<short> unit_get_team_index <unit>)
        ```
        returns the team index of the unit, returns -1 if the unit does not have a team
  - slug: unit_aim_without_turning
    info:
      en: |-
        ```hsc
        (<void> unit_aim_without_turning <unit> <boolean>)
        ```
        allows a unit to aim in place without turning
  - slug: unit_set_enterable_by_player
    info:
      en: |-
        ```hsc
        (<void> unit_set_enterable_by_player <unit> <boolean>)
        ```
        can be used to prevent the player from entering a vehicle
  - slug: unit_get_enterable_by_player
    info:
      en: |-
        ```hsc
        (<boolean> unit_get_enterable_by_player <unit>)
        ```
        returns true if a player may enter the vehicle
  - slug: unit_only_takes_damage_from_players_team
    info:
      en: |-
        ```hsc
        (<void> unit_only_takes_damage_from_players_team <unit> <boolean>)
        ```
        used for the tartarus boss fight
  - slug: unit_enter_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_enter_vehicle <unit> <vehicle> <string_id>)
        ```
        puts the specified unit in the specified vehicle (in the named seat)
  - slug: unit_enter_vehicle_immediate
    info:
      en: |-
        ```hsc
        (<void> unit_enter_vehicle_immediate <unit> <vehicle> <string_id>)
        ```
        puts the specified unit in the specified vehicle (in the named seat)
  - slug: unit_falling_damage_disable
    info:
      en: |-
        ```hsc
        (<void> unit_falling_damage_disable <unit> <boolean>)
        ```
        disables falling damage on unit
  - slug: unit_in_vehicle_type
    info:
      en: |-
        ```hsc
        (<boolean> unit_in_vehicle_type <unit> <long>)
        ```
        returns true if the unit is in a vehicle that matches the specified vehicle type
  - slug: object_get_turret_count
    info:
      en: |-
        ```hsc
        (<short> object_get_turret_count <object>)
        ```
        returns the number of turrets attached to the given object
  - slug: object_get_turret
    info:
      en: |-
        ```hsc
        (<vehicle> object_get_turret <object> <short>)
        ```
        returns the nth turret attached to the given object
  - slug: unit_board_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_board_vehicle <unit> <string_id>)
        ```
        Causes the given unit to attempt to board the named seat
  - slug: unit_set_emotion
    info:
      en: |-
        ```hsc
        (<void> unit_set_emotion <unit> <long> <real> <real>)
        ```
        sets a unit's facial expression (-1 is none, other values depend on unit)
  - slug: unit_set_emotion_by_name
    info:
      en: |-
        ```hsc
        (<void> unit_set_emotion_by_name <unit> <string_id> <real> <real>)
        ```
        sets a unit's facial expression by name with weight and transition time
  - slug: unit_enable_eye_tracking
    info:
      en: |-
        ```hsc
        (<void> unit_enable_eye_tracking <unit> <boolean>)
        ```
        enable/disable eye aiming on a unit
  - slug: unit_set_integrated_flashlight
    info:
      en: |-
        ```hsc
        (<void> unit_set_integrated_flashlight <unit> <boolean>)
        ```
        sets a unit's flashlight on or off
  - slug: unit_in_vehicle
    info:
      en: |-
        ```hsc
        (<boolean> unit_in_vehicle <unit>)
        ```
        returns true if the given unit is seated on a parent unit
  - slug: unit_get_vehicle
    info:
      en: |-
        ```hsc
        (<vehicle> unit_get_vehicle <unit>)
        ```
        returns the parent vehicle if the given unit is seated in one.
  - slug: vehicle_set_player_interaction
    info:
      en: |-
        ```hsc
        (<void> vehicle_set_player_interaction <vehicle> <unit_seat_mapping> <boolean> <boolean>)
        ```
        Allows players/units to enter/exit given vehicle seat. Arguments <vehicle> <seat> <player_can_enter> <unit_can_exit>
  - slug: vehicle_set_unit_interaction
    info:
      en: |-
        ```hsc
        (<void> vehicle_set_unit_interaction <vehicle> <unit_seat_mapping> <boolean> <boolean>)
        ```
        Allows players/units to enter/exit given vehicle seat. Arguments <vehicle> <seat> <player_can_enter> <unit_can_exit>
  - slug: vehicle_test_seat_unit_list
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_test_seat_unit_list <vehicle> <unit_seat_mapping> <object_list>)
        ```
        tests whether the named seat has an object in the object list (use "" to test all seats for any unit in the list)
  - slug: vehicle_test_seat_unit
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_test_seat_unit <vehicle> <unit_seat_mapping> <unit>)
        ```
        tests whether the named seat has a specified unit in it (use "" to test all seats for this unit)
  - slug: vehicle_test_seat
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_test_seat <vehicle> <unit_seat_mapping>)
        ```
        tests whether the named seat has any unit in it
  - slug: unit_set_prefer_tight_camera_track
    info:
      en: |-
        ```hsc
        (<void> unit_set_prefer_tight_camera_track <unit> <boolean>)
        ```
        sets the unit to prefer a tight camera track
  - slug: unit_test_seat
    info:
      en: |-
        ```hsc
        (<boolean> unit_test_seat <unit> <unit_seat_mapping>)
        ```
        tests whether the named seat has any unit in it
  - slug: unit_exit_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_exit_vehicle <unit>)
        ```
        makes a unit exit its vehicle
  - slug: unit_exit_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_exit_vehicle <unit> <short>)
        ```
        makes a unit exit its vehicle (0 = normal exit to airborne, 1 = ejection, 2 = ejection + death, 3 = exit to ground)
  - slug: unit_set_maximum_vitality
    info:
      en: |-
        ```hsc
        (<void> unit_set_maximum_vitality <unit> <real> <real>)
        ```
        sets a unit's maximum body and shield vitality
  - slug: units_set_maximum_vitality
    info:
      en: |-
        ```hsc
        (<void> units_set_maximum_vitality <object_list> <real> <real>)
        ```
        sets a group of units' maximum body and shield vitality
  - slug: unit_set_current_vitality
    info:
      en: |-
        ```hsc
        (<void> unit_set_current_vitality <unit> <real> <real>)
        ```
        sets a unit's current body and shield vitality
  - slug: units_set_current_vitality
    info:
      en: |-
        ```hsc
        (<void> units_set_current_vitality <object_list> <real> <real>)
        ```
        sets a group of units' current body and shield vitality
  - slug: vehicle_load_magic
    info:
      en: |-
        ```hsc
        (<short> vehicle_load_magic <object> <unit_seat_mapping> <object_list>)
        ```
        makes a list of units (named or by encounter) magically get into a vehicle, in the substring-specified seats (e.g. CD-passenger... empty string matches all seats)
  - slug: vehicle_unload
    info:
      en: |-
        ```hsc
        (<short> vehicle_unload <object> <unit_seat_mapping>)
        ```
        makes units get out of an object from the substring-specified seats (e.g. CD-passenger... empty string matches all seats)
  - slug: unit_set_animation_mode
    info:
      en: |-
        ```hsc
        (<void> unit_set_animation_mode <unit> <string_id>)
        ```
        this unit will assume the named animation mode
  - slug: magic_melee_attack
    info:
      en: |-
        ```hsc
        (<void> magic_melee_attack)
        ```
        causes player's unit to start a melee attack
  - slug: vehicle_riders
    info:
      en: |-
        ```hsc
        (<object_list> vehicle_riders <unit>)
        ```
        returns a list of all riders in a vehicle
  - slug: vehicle_driver
    info:
      en: |-
        ```hsc
        (<unit> vehicle_driver <unit>)
        ```
        returns the driver of a vehicle
  - slug: vehicle_gunner
    info:
      en: |-
        ```hsc
        (<unit> vehicle_gunner <unit>)
        ```
        returns the gunner of a vehicle
  - slug: unit_get_health
    info:
      en: |-
        ```hsc
        (<real> unit_get_health <unit>)
        ```
        returns the health \[0,1\] of the unit, returns -1 if the unit does not exist
  - slug: unit_get_shield
    info:
      en: |-
        ```hsc
        (<real> unit_get_shield <unit>)
        ```
        returns the shield \[0,1\] of the unit, returns -1 if the unit does not exist
  - slug: unit_get_total_grenade_count
    info:
      en: |-
        ```hsc
        (<short> unit_get_total_grenade_count <unit>)
        ```
        returns the total number of grenades for the given unit, 0 if it does not exist
  - slug: unit_has_weapon
    info:
      en: |-
        ```hsc
        (<boolean> unit_has_weapon <unit> <object_definition>)
        ```
        returns TRUE if the <unit> has <object> as a weapon, FALSE otherwise
  - slug: unit_has_weapon_readied
    info:
      en: |-
        ```hsc
        (<boolean> unit_has_weapon_readied <unit> <object_definition>)
        ```
        returns TRUE if the <unit> has <object> as the primary weapon, FALSE otherwise
  - slug: unit_has_any_equipment
    info:
      en: |-
        ```hsc
        (<boolean> unit_has_any_equipment <unit>)
        ```
        returns TRUE if the <unit> has any equipment, FALSE otherwise
  - slug: unit_has_equipment
    info:
      en: |-
        ```hsc
        (<boolean> unit_has_equipment <unit> <object_definition>)
        ```
        returns TRUE if the <unit> has equipment <object> , FALSE otherwise
  - slug: unit_lower_weapon
    info:
      en: |-
        ```hsc
        (<void> unit_lower_weapon <unit> <short>)
        ```
        lower the units weapon over x ticks
  - slug: unit_raise_weapon
    info:
      en: |-
        ```hsc
        (<void> unit_raise_weapon <unit> <short>)
        ```
        raises the units weapon over x ticks
  - slug: unit_drop_support_weapon
    info:
      en: |-
        ```hsc
        (<void> unit_drop_support_weapon <unit>)
        ```
        forces the given unit to drop its support weapon, if it is holding one
  - slug: unit_spew_action
    info:
      en: |-
        ```hsc
        (<void> unit_spew_action <unit>)
        ```
        runs the spew unit action on the specified unit
  - slug: unit_force_reload
    info:
      en: |-
        ```hsc
        (<void> unit_force_reload <unit>)
        ```
        Force the give unit to reload his weapon
  - slug: animation_stats_dump
    info:
      en: |-
        ```hsc
        (<void> animation_stats_dump)
        ```
        Dump usage information for the animations in the game
  - slug: unit_animation_forced_seat
    info:
      en: |-
        ```hsc
        (<void> unit_animation_forced_seat <string_id>)
        ```
        all units controlled by the player will assume the given seat name (valid values are 'asleep', 'alert', 'stand', 'crouch' and 'flee')
  - slug: unit_doesnt_drop_items
    info:
      en: |-
        ```hsc
        (<void> unit_doesnt_drop_items <object_list>)
        ```
        prevents any of the given units from dropping weapons or grenades when they die
  - slug: unit_impervious
    info:
      en: |-
        ```hsc
        (<void> unit_impervious <object_list> <boolean>)
        ```
        prevents any of the given units from being knocked around or playing ping animations
  - slug: unit_suspended
    info:
      en: |-
        ```hsc
        (<void> unit_suspended <unit> <boolean>)
        ```
        stops gravity from working on the given unit
  - slug: unit_add_equipment
    info:
      en: |-
        ```hsc
        (<void> unit_add_equipment <unit> <starting_profile> <boolean> <boolean>)
        ```
        adds/resets the unit's health, shield, and inventory (weapons and grenades) to the named profile. resets if third parameter is true, adds if false. weapons will be marked as garbage if fourth parameter is true (for respawning equipment).
  - slug: weapon_set_primary_barrel_firing
    info:
      en: |-
        ```hsc
        (<void> weapon_set_primary_barrel_firing <weapon> <boolean>)
        ```
        Forcefully fire a weapon
  - slug: weapon_hold_trigger
    info:
      en: |-
        ```hsc
        (<void> weapon_hold_trigger <weapon> <long> <boolean>)
        ```
        turns the trigger for a weapon  on/off
  - slug: weapon_enable_warthog_chaingun_light
    info:
      en: |-
        ```hsc
        (<void> weapon_enable_warthog_chaingun_light <boolean>)
        ```
        turns the trigger for a weapon  on/off
  - slug: device_set_never_appears_locked
    info:
      en: |-
        ```hsc
        (<void> device_set_never_appears_locked <device> <boolean>)
        ```
        changes a machine's never_appears_locked flag, but only if paul is a bastard
  - slug: device_set_power
    info:
      en: |-
        ```hsc
        (<void> device_set_power <device> <real>)
        ```
        immediately sets the power of a named device to the given value
  - slug: device_set_position_transition_time
    info:
      en: |-
        ```hsc
        (<void> device_set_position_transition_time <device> <real>)
        ```
        immediately sets the power of a named device to the given value
  - slug: device_get_power
    info:
      en: |-
        ```hsc
        (<real> device_get_power <device>)
        ```
        gets the current power of a named device
  - slug: device_set_position
    info:
      en: |-
        ```hsc
        (<boolean> device_set_position <device> <real>)
        ```
        set the desired position of the given device (used for devices without explicit device groups)
  - slug: device_get_position
    info:
      en: |-
        ```hsc
        (<real> device_get_position <device>)
        ```
        gets the current position of the given device (used for devices without explicit device groups)
  - slug: device_set_position_immediate
    info:
      en: |-
        ```hsc
        (<void> device_set_position_immediate <device> <real>)
        ```
        instantaneously changes the position of the given device (used for devices without explicit device groups
  - slug: device_group_get
    info:
      en: |-
        ```hsc
        (<real> device_group_get <device_group>)
        ```
        returns the desired value of the specified device group.
  - slug: device_group_set
    info:
      en: |-
        ```hsc
        (<boolean> device_group_set <device> <device_group> <real>)
        ```
        changes the desired value of the specified device group.
  - slug: device_group_set_immediate
    info:
      en: |-
        ```hsc
        (<void> device_group_set_immediate <device_group> <real>)
        ```
        instantaneously changes the value of the specified device group.
  - slug: device_one_sided_set
    info:
      en: |-
        ```hsc
        (<void> device_one_sided_set <device> <boolean>)
        ```
        TRUE makes the given device one-sided (only able to be opened from one direction), FALSE makes it two-sided
  - slug: device_ignore_player_set
    info:
      en: |-
        ```hsc
        (<void> device_ignore_player_set <device> <boolean>)
        ```
        TRUE makes the given device ignore the player (won't open for players), FALSE makes it work for the player
  - slug: device_operates_automatically_set
    info:
      en: |-
        ```hsc
        (<void> device_operates_automatically_set <device> <boolean>)
        ```
        TRUE makes the given device open automatically when any biped is nearby, FALSE makes it not
  - slug: device_closes_automatically_set
    info:
      en: |-
        ```hsc
        (<void> device_closes_automatically_set <device> <boolean>)
        ```
        TRUE makes the given device close automatically after it has opened, FALSE makes it not
  - slug: device_group_change_only_once_more_set
    info:
      en: |-
        ```hsc
        (<void> device_group_change_only_once_more_set <device_group> <boolean>)
        ```
        TRUE allows a device to change states only once
  - slug: device_set_position_track
    info:
      en: |-
        ```hsc
        (<boolean> device_set_position_track <device> <string_id> <real>)
        ```
        set the desired position track animation to use (optional interpolation time onto track)
  - slug: device_set_overlay_track
    info:
      en: |-
        ```hsc
        (<boolean> device_set_overlay_track <device> <string_id>)
        ```
        set the desired overlay animation to use
  - slug: device_animate_position
    info:
      en: |-
        ```hsc
        (<void> device_animate_position <device> <real> <real> <real> <real> <boolean>)
        ```
        animate the position over time
  - slug: device_animate_overlay
    info:
      en: |-
        ```hsc
        (<void> device_animate_overlay <device> <real> <real> <real> <real>)
        ```
        animate the overlay over time
  - slug: cheat_all_powerups
    info:
      en: |-
        ```hsc
        (<void> cheat_all_powerups)
        ```
        drops all powerups near player
  - slug: cheat_all_weapons
    info:
      en: |-
        ```hsc
        (<void> cheat_all_weapons)
        ```
        drops all weapons near player
  - slug: cheat_all_vehicles
    info:
      en: |-
        ```hsc
        (<void> cheat_all_vehicles)
        ```
        drops all vehicles on player
  - slug: cheat_teleport_to_camera
    info:
      en: |-
        ```hsc
        (<void> cheat_teleport_to_camera)
        ```
        teleports player to camera location
  - slug: cheat_active_camouflage
    info:
      en: |-
        ```hsc
        (<void> cheat_active_camouflage <boolean>)
        ```
        gives the player active camouflage
  - slug: cheat_active_camouflage_by_player
    info:
      en: |-
        ```hsc
        (<void> cheat_active_camouflage_by_player <player> <boolean>)
        ```
        gives a specific player active camouflage
  - slug: cheats_load
    info:
      en: |-
        ```hsc
        (<void> cheats_load)
        ```
        reloads the cheats.txt file
  - slug: drop_safe
    info:
      en: |-
        ```hsc
        (<void> drop_safe <any_tag>)
        ```
        drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle
  - slug: drop
    info:
      en: |-
        ```hsc
        (<void> drop <string>)
        ```
        drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle
  - slug: drop_variant
    info:
      en: |-
        ```hsc
        (<void> drop_variant <string> <string>)
        ```
        drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle using the specified variant name
  - slug: drop_permutation
    info:
      en: |-
        ```hsc
        (<void> drop_permutation <string> <string>)
        ```
        drops the named tag e.g. objects\characters\brute\brute.biped using the specified permutation. permutations are specified as a comma-delimited string of region=permutation pairs (e.g. region1=permutation1,region2=permutation2).
  - slug: update_dropped_tag_permutation
    info:
      en: |-
        ```hsc
        (<void> update_dropped_tag_permutation <string> <string>)
        ```
        updates the permutation for a previously dropped tag. permutations are specified as a comma-delimited string of region=permutation pairs (e.g. region1=permutation1,region2=permutation2).
  - slug: ai_enable
    info:
      en: |-
        ```hsc
        (<void> ai_enable <boolean>)
        ```
        turns all AI on or off.
  - slug: ai_enabled
    info:
      en: |-
        ```hsc
        (<boolean> ai_enabled)
        ```
        returns whether AI is turned on or off.
  - slug: ai_grenades
    info:
      en: |-
        ```hsc
        (<void> ai_grenades <boolean>)
        ```
        turns grenade inventory on or off.
  - slug: ai_dialogue_enable
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_enable <boolean>)
        ```
        turn combat dialogue on/off
  - slug: ai_dialogue_updating_enable
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_updating_enable <boolean>)
        ```
        enable updating of dialogue tags at runtime, based on stimuli
  - slug: ai_player_dialogue_enable
    info:
      en: |-
        ```hsc
        (<void> ai_player_dialogue_enable <boolean>)
        ```
        turn player combat dialogue on/off
  - slug: ai_actor_dialogue_enable
    info:
      en: |-
        ```hsc
        (<void> ai_actor_dialogue_enable <ai> <boolean>)
        ```
        turn combat dialogue on/off for a particular ai type.
  - slug: ai_actor_dialogue_effect_enable
    info:
      en: |-
        ```hsc
        (<void> ai_actor_dialogue_effect_enable <ai> <boolean>)
        ```
        turn combat dialogue effects on/off for a particular ai type.
  - slug: ai_infection_suppress
    info:
      en: |-
        ```hsc
        (<void> ai_infection_suppress <long>)
        ```
        disable infection for this number of ticks
  - slug: ai_fast_and_dumb
    info:
      en: |-
        ```hsc
        (<void> ai_fast_and_dumb <boolean>)
        ```
        turn on/off perception performance hacks
  - slug: ai_lod_full_detail_actors
    info:
      en: |-
        ```hsc
        (<void> ai_lod_full_detail_actors <short>)
        ```
        change the number of full detail AI characters we are allowed
  - slug: ai_lod_full_detail_actors
    info:
      en: |-
        ```hsc
        (<void> ai_lod_full_detail_actors)
        ```
        display the number of full detail AI characters we are allowed
  - slug: ai_force_full_lod
    info:
      en: |-
        ```hsc
        (<void> ai_force_full_lod <ai>)
        ```
        force the given AI to full detail LOD
  - slug: ai_force_low_lod
    info:
      en: |-
        ```hsc
        (<void> ai_force_low_lod <ai>)
        ```
        force the given AI to low detail LOD
  - slug: ai_clear_lod
    info:
      en: |-
        ```hsc
        (<void> ai_clear_lod <ai>)
        ```
        reset the given AI's LOD overrides
  - slug: ai_dialogue_log_reset
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_log_reset)
        ```
        reset the dialogue log
  - slug: ai_dialogue_log_dump
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_log_dump <string>)
        ```
        dump a file of the given name with csv statistics on vocalizations
  - slug: ai_get_object
    info:
      en: |-
        ```hsc
        (<object> ai_get_object <ai>)
        ```
        returns the unit/object corresponding to the given actor
  - slug: ai_get_unit
    info:
      en: |-
        ```hsc
        (<unit> ai_get_unit <ai>)
        ```
        returns the unit/object corresponding to the given actor
  - slug: ai_get_squad
    info:
      en: |-
        ```hsc
        (<ai> ai_get_squad <ai>)
        ```
        returns the squad of the given actor. Invalid if the given ai is NOT an actor-type (i.e. is itself a squad or squad group or task
  - slug: ai_get_turret_ai
    info:
      en: |-
        ```hsc
        (<ai> ai_get_turret_ai <ai> <short>)
        ```
        returns an the ai controlling the Nth turret attached to the given ai (or its vehicle)
  - slug: ai_random_smart_point
    info:
      en: |-
        ```hsc
        (<point_reference> ai_random_smart_point <point_reference> <real> <real> <real>)
        ```
        returns a point in the given point set that a player is probably going to be able to see. Args are \[point set\], \[min distance\], \[max distance\], \[angle-from-forward\], all relative to the player
  - slug: ai_nearest_point
    info:
      en: |-
        ```hsc
        (<point_reference> ai_nearest_point <object> <point_reference>)
        ```
        returns the nearest point in the given point set to the given object
  - slug: ai_get_point_count
    info:
      en: |-
        ```hsc
        (<long> ai_get_point_count <point_reference>)
        ```
        returns the number of points in the given point set
  - slug: ai_point_set_get_point
    info:
      en: |-
        ```hsc
        (<point_reference> ai_point_set_get_point <point_reference> <short>)
        ```
        returns Nth point in the point set
  - slug: ai_debug_dump_behavior_tree
    info:
      en: |-
        ```hsc
        (<void> ai_debug_dump_behavior_tree <boolean>)
        ```
        DEBUG, DONT USE!
  - slug: ai_place
    info:
      en: |-
        ```hsc
        (<void> ai_place <ai>)
        ```
        places the specified squad on the map.
  - slug: ai_place
    info:
      en: |-
        ```hsc
        (<void> ai_place <ai> <short>)
        ```
        places the given number of members of the specified squad.
  - slug: ai_place_in_limbo
    info:
      en: |-
        ```hsc
        (<void> ai_place_in_limbo <ai>)
        ```
        places the specified squad on the map in limbo.
  - slug: ai_place_in_limbo
    info:
      en: |-
        ```hsc
        (<void> ai_place_in_limbo <ai> <short>)
        ```
        places the given number of members of the specified squad in limbo.
  - slug: ai_place_in_vehicle
    info:
      en: |-
        ```hsc
        (<void> ai_place_in_vehicle <ai> <ai>)
        ```
        places the specified squad (1st arg) on the map in the vehicles belonging to the specified vehicle squad (2nd arg).
  - slug: ai_cannot_die
    info:
      en: |-
        ```hsc
        (<void> ai_cannot_die <ai> <boolean>)
        ```
        AI cannot die from damage (as opposed to by scripting)
  - slug: ai_vitality_pinned
    info:
      en: |-
        ```hsc
        (<boolean> ai_vitality_pinned <ai>)
        ```
        Returns true if the ai's units are ALL vitality pinned (see object_vitality_pinned)
  - slug: ai_place_wave
    info:
      en: |-
        ```hsc
        (<void> ai_place_wave <long> <ai>)
        ```
        Places the specified wave name into squads defined as part of the given squad group
  - slug: ai_place_wave
    info:
      en: |-
        ```hsc
        (<void> ai_place_wave <long> <ai> <short>)
        ```
        Places the given number of squads from the specified wave name into squads defined as part of the given squad group
  - slug: ai_place_wave_in_limbo
    info:
      en: |-
        ```hsc
        (<void> ai_place_wave_in_limbo <long> <ai>)
        ```
        Places the specified wave name into squads defined as part of the given squad group in limbo
  - slug: ai_place_wave_in_limbo
    info:
      en: |-
        ```hsc
        (<void> ai_place_wave_in_limbo <long> <ai> <short>)
        ```
        Places the given number of squads from the specified wave name into squads defined as part of the given squad group in limbo
  - slug: ai_set_clump
    info:
      en: |-
        ```hsc
        (<void> ai_set_clump <ai> <short>)
        ```
        Force the given AI into a specific clump
  - slug: ai_designer_clump_perception_range
    info:
      en: |-
        ```hsc
        (<void> ai_designer_clump_perception_range <real>)
        ```
        Override the maximum perception range of designer specified clumps
  - slug: ai_designer_clump_targeting_group
    info:
      en: |-
        ```hsc
        (<void> ai_designer_clump_targeting_group <short>)
        ```
        Force the designer specified clumps to only target a targeting group
  - slug: ai_index_from_spawn_formation
    info:
      en: |-
        ```hsc
        (<ai> ai_index_from_spawn_formation <ai> <string_id>)
        ```
        Create an AI index from the given squad and spawn formation
  - slug: ai_resurrect
    info:
      en: |-
        ```hsc
        (<void> ai_resurrect <object>)
        ```
        Resurrect the specified mission critical AI character.
  - slug: ai_kill
    info:
      en: |-
        ```hsc
        (<void> ai_kill <ai>)
        ```
        instantly kills the specified encounter and/or squad.
  - slug: ai_kill_silent
    info:
      en: |-
        ```hsc
        (<void> ai_kill_silent <ai>)
        ```
        instantly and silently (no animation or sound played) kills the specified encounter and/or squad.
  - slug: ai_kill_no_statistics
    info:
      en: |-
        ```hsc
        (<void> ai_kill_no_statistics <ai>)
        ```
        instantly and silently (no animation or sound played) kills the specified encounter and/or squad.
  - slug: ai_erase
    info:
      en: |-
        ```hsc
        (<void> ai_erase <ai>)
        ```
        erases the specified encounter and/or squad.
  - slug: ai_erase_all
    info:
      en: |-
        ```hsc
        (<void> ai_erase_all)
        ```
        erases all AI.
  - slug: ai_disposable
    info:
      en: |-
        ```hsc
        (<void> ai_disposable <ai> <boolean>)
        ```
        enables or disables automatic garbage collection for actors in the specified encounter and/or squad.
  - slug: ai_select
    info:
      en: |-
        ```hsc
        (<void> ai_select <ai>)
        ```
        selects the specified squad.
  - slug: ai_deselect
    info:
      en: |-
        ```hsc
        (<void> ai_deselect)
        ```
        clears the selected encounter.
  - slug: ai_set_deaf
    info:
      en: |-
        ```hsc
        (<void> ai_set_deaf <ai> <boolean>)
        ```
        enables or disables hearing for actors in the specified encounter.
  - slug: ai_set_blind
    info:
      en: |-
        ```hsc
        (<void> ai_set_blind <ai> <boolean>)
        ```
        enables or disables sight for actors in the specified encounter.
  - slug: ai_set_weapon_up
    info:
      en: |-
        ```hsc
        (<void> ai_set_weapon_up <ai> <boolean>)
        ```
        force actor to hold their weapon up, instead of lowering it when idle. this does NOT cause them to draw their weapon if stowed
  - slug: ai_flood_disperse
    info:
      en: |-
        ```hsc
        (<void> ai_flood_disperse <ai> <ai>)
        ```
        Disperese a flood encounter, stimulating the various forms to break down into infections and transition to the new objective
  - slug: ai_add_navpoint
    info:
      en: |-
        ```hsc
        (<void> ai_add_navpoint <ai> <boolean>)
        ```
        Add/remove hud navpoint to the actor or squad
  - slug: ai_magically_see
    info:
      en: |-
        ```hsc
        (<void> ai_magically_see <ai> <ai>)
        ```
        Make one squad magically aware of another.
  - slug: ai_magically_see_object
    info:
      en: |-
        ```hsc
        (<void> ai_magically_see_object <ai> <object>)
        ```
        Make a squad magically aware of a particular object.
  - slug: ai_set_active_camo
    info:
      en: |-
        ```hsc
        (<void> ai_set_active_camo <ai> <boolean>)
        ```
        Turn on active camoflage on actor/squad/squad-group
  - slug: ai_suppress_combat
    info:
      en: |-
        ```hsc
        (<void> ai_suppress_combat <ai> <boolean>)
        ```
        Turn on/off combat suppression on actor/squad/squad-group
  - slug: ai_engineer_explode
    info:
      en: |-
        ```hsc
        (<void> ai_engineer_explode <ai>)
        ```
        Register an explosion stimulus with all specified actors, causing engineers to explode
  - slug: ai_grunt_kamikaze
    info:
      en: |-
        ```hsc
        (<void> ai_grunt_kamikaze <ai>)
        ```
        Register a kamikaze stimulus with all specified actors, causing grunts to GO WILD
  - slug: ai_squad_enumerate_immigrants
    info:
      en: |-
        ```hsc
        (<void> ai_squad_enumerate_immigrants <ai> <boolean>)
        ```
        If someone migrates (or simply changes) into this squad, consider him a full member of the squad
  - slug: ai_migrate
    info:
      en: |-
        ```hsc
        (<void> ai_migrate <ai> <ai>)
        ```
        makes all or part of an encounter move to another encounter.
  - slug: ai_migrate_persistent
    info:
      en: |-
        ```hsc
        (<void> ai_migrate_persistent <ai> <ai>)
        ```
        makes all or part of an encounter move to another encounter, and all script commands will function on the migrated squad
  - slug: ai_allegiance
    info:
      en: |-
        ```hsc
        (<void> ai_allegiance <team> <team>)
        ```
        creates an allegiance between two teams.
  - slug: ai_allegiance_remove
    info:
      en: |-
        ```hsc
        (<void> ai_allegiance_remove <team> <team>)
        ```
        destroys an allegiance between two teams.
  - slug: ai_allegiance_break
    info:
      en: |-
        ```hsc
        (<void> ai_allegiance_break <team> <team>)
        ```
        fake a betrayal incident between two teams
  - slug: ai_braindead
    info:
      en: |-
        ```hsc
        (<void> ai_braindead <ai> <boolean>)
        ```
        makes a group of actors braindead, or restores them to life (in their initial state)
  - slug: ai_braindead_by_unit
    info:
      en: |-
        ```hsc
        (<void> ai_braindead_by_unit <object_list> <boolean>)
        ```
        makes a list of objects braindead, or restores them to life. if you pass in a vehicle index, it makes all actors in that vehicle braindead (including any built-in guns)
  - slug: ai_disregard
    info:
      en: |-
        ```hsc
        (<void> ai_disregard <object_list> <boolean>)
        ```
        if TRUE, forces all actors to completely disregard the specified units, otherwise lets them acknowledge the units again
  - slug: ai_disregard_orphans
    info:
      en: |-
        ```hsc
        (<void> ai_disregard_orphans <ai>)
        ```
        the given AI will discard all orphan props, terminating search
  - slug: ai_prefer_target
    info:
      en: |-
        ```hsc
        (<void> ai_prefer_target <object_list> <boolean>)
        ```
        if TRUE, *ALL* enemies will prefer to attack the specified units. if FALSE, removes the preference.
  - slug: ai_prefer_target_team
    info:
      en: |-
        ```hsc
        (<void> ai_prefer_target_team <ai> <team>)
        ```
        the given ai will prefer the indicated team.
  - slug: ai_prefer_target_ai
    info:
      en: |-
        ```hsc
        (<void> ai_prefer_target_ai <ai> <ai> <boolean>)
        ```
        the given ai (actor, squad, task, etc.) will prefer the given other ai (actor, squad, task, etc.)
  - slug: ai_set_targeting_group
    info:
      en: |-
        ```hsc
        (<void> ai_set_targeting_group <ai> <short>)
        ```
        Set the AI to only target other guys of targeting group X
  - slug: ai_set_targeting_group
    info:
      en: |-
        ```hsc
        (<void> ai_set_targeting_group <ai> <short> <boolean>)
        ```
        Set the AI to only target other guys of targeting group X (true/false whether the player should also be targeted)
  - slug: ai_teleport_to_starting_location_if_outside_bsp
    info:
      en: |-
        ```hsc
        (<void> ai_teleport_to_starting_location_if_outside_bsp <ai>)
        ```
        PLEASE USE ai_teleport_to_spawn_point_if_outside_bsp INSTEAD
  - slug: ai_teleport_to_spawn_point_if_outside_bsp
    info:
      en: |-
        ```hsc
        (<void> ai_teleport_to_spawn_point_if_outside_bsp <ai>)
        ```
        teleports a group of actors to the spawn points of their current squad(s) if they are currently outside the world.
  - slug: ai_teleport
    info:
      en: |-
        ```hsc
        (<void> ai_teleport <ai> <point_reference>)
        ```
        teleports the given squad to the given point.
  - slug: ai_bring_forward
    info:
      en: |-
        ```hsc
        (<void> ai_bring_forward <object> <real>)
        ```
        teleports the given mission critical AI character to the current encounter, if beyond the given range from a player
  - slug: ai_renew
    info:
      en: |-
        ```hsc
        (<void> ai_renew <ai>)
        ```
        refreshes the health and grenade count of a group of actors, so they are as good as new
  - slug: ai_force_active
    info:
      en: |-
        ```hsc
        (<void> ai_force_active <ai> <boolean>)
        ```
        forces an encounter to remain active (i.e. not freeze in place) even if there are no players nearby
  - slug: ai_force_active_by_unit
    info:
      en: |-
        ```hsc
        (<void> ai_force_active_by_unit <unit> <boolean>)
        ```
        forces a named actor that is NOT in an encounter to remain active (i.e. not freeze in place) even if there are no players nearby
  - slug: ai_exit_limbo
    info:
      en: |-
        ```hsc
        (<void> ai_exit_limbo <ai>)
        ```
        remove the give AI from limbo, generally induced by spawning in limbo
  - slug: ai_playfight
    info:
      en: |-
        ```hsc
        (<void> ai_playfight <ai> <boolean>)
        ```
        sets an encounter to be playfighting or not
  - slug: ai_reconnect
    info:
      en: |-
        ```hsc
        (<void> ai_reconnect)
        ```
        reconnects all AI information to the current structure bsp (use this after you create encounters or command lists in sapien, or place new firing points or command list points)
  - slug: ai_berserk
    info:
      en: |-
        ```hsc
        (<void> ai_berserk <ai> <boolean>)
        ```
        forces a group of actors to start or stop berserking
  - slug: ai_set_team
    info:
      en: |-
        ```hsc
        (<void> ai_set_team <ai> <team>)
        ```
        makes an encounter change to a new team
  - slug: ai_allow_dormant
    info:
      en: |-
        ```hsc
        (<void> ai_allow_dormant <ai> <boolean>)
        ```
        either enables or disables automatic dormancy for a group of actors
  - slug: ai_is_attacking
    info:
      en: |-
        ```hsc
        (<boolean> ai_is_attacking <ai>)
        ```
        returns whether a platoon is in the attacking mode (or if an encounter is specified, returns whether any platoon in that encounter is attacking)
  - slug: ai_fighting_count
    info:
      en: |-
        ```hsc
        (<short> ai_fighting_count <ai>)
        ```
        return the number of actors that are fighting in a squad or squad_group
  - slug: ai_living_count
    info:
      en: |-
        ```hsc
        (<short> ai_living_count <ai>)
        ```
        return the number of living actors in the specified encounter and/or squad.
  - slug: ai_living_fraction
    info:
      en: |-
        ```hsc
        (<real> ai_living_fraction <ai>)
        ```
        return the fraction \[0-1\] of living actors in the specified encounter and/or squad.
  - slug: ai_in_vehicle_count
    info:
      en: |-
        ```hsc
        (<short> ai_in_vehicle_count <ai>)
        ```
        return the number of living actors in the specified encounter and/or squad who are currently in a vehicle.
  - slug: ai_body_count
    info:
      en: |-
        ```hsc
        (<short> ai_body_count <ai>)
        ```
        return the number of actors who have died in the completiong of the given objective/task.
  - slug: ai_strength
    info:
      en: |-
        ```hsc
        (<real> ai_strength <ai>)
        ```
        return the current strength (average body vitality from 0-1) of the specified encounter and/or squad.
  - slug: ai_swarm_count
    info:
      en: |-
        ```hsc
        (<short> ai_swarm_count <ai>)
        ```
        return the number of swarm actors in the specified encounter and/or squad.
  - slug: ai_nonswarm_count
    info:
      en: |-
        ```hsc
        (<short> ai_nonswarm_count <ai>)
        ```
        return the number of non-swarm actors in the specified encounter and/or squad.
  - slug: ai_actors
    info:
      en: |-
        ```hsc
        (<object_list> ai_actors <ai>)
        ```
        converts an ai reference to an object list.
  - slug: ai_allegiance_broken
    info:
      en: |-
        ```hsc
        (<boolean> ai_allegiance_broken <team> <team>)
        ```
        returns whether two teams have an allegiance that is currently broken by traitorous behavior
  - slug: ai_spawn_count
    info:
      en: |-
        ```hsc
        (<short> ai_spawn_count <ai>)
        ```
        returns the number of actors spawned in the given squad or squad group
  - slug: object_get_ai
    info:
      en: |-
        ```hsc
        (<ai> object_get_ai <object>)
        ```
        returns the ai attached to this object, if any
  - slug: ai_set_task
    info:
      en: |-
        ```hsc
        (<boolean> ai_set_task <ai> <string_id> <string_id>)
        ```
        Sets the current task of the current task
  - slug: ai_set_objective
    info:
      en: |-
        ```hsc
        (<boolean> ai_set_objective <ai> <string_id>)
        ```
        Sets the squad's current objective
  - slug: ai_task_status
    info:
      en: |-
        ```hsc
        (<short> ai_task_status <ai>)
        ```
        Returns the status of the given objective/task. See ai_task_status_<tab> for return codes.
  - slug: ai_set_task_condition
    info:
      en: |-
        ```hsc
        (<boolean> ai_set_task_condition <ai> <boolean>)
        ```
        Latches the task condition true or false
  - slug: ai_leadership
    info:
      en: |-
        ```hsc
        (<boolean> ai_leadership <ai>)
        ```
        Returns whether a squad or task has a leader
  - slug: ai_leadership_all
    info:
      en: |-
        ```hsc
        (<boolean> ai_leadership_all <ai>)
        ```
        Returns whether a task or any of its children has a leader
  - slug: ai_task_count
    info:
      en: |-
        ```hsc
        (<short> ai_task_count <ai>)
        ```
        Returns the living count of the AI in the given task OR any of its children
  - slug: ai_reset_objective
    info:
      en: |-
        ```hsc
        (<void> ai_reset_objective <ai>)
        ```
        Completely reset the given objective, task or task hierarchy (if passed a gate task).
  - slug: ai_squad_patrol_objective_disallow
    info:
      en: |-
        ```hsc
        (<void> ai_squad_patrol_objective_disallow <ai> <boolean>)
        ```
        Disallow the selection of an objective by any squad patrol.
  - slug: ai_place_cue
    info:
      en: |-
        ```hsc
        (<void> ai_place_cue <string_id>)
        ```
        Place the named AI cue
  - slug: ai_remove_cue
    info:
      en: |-
        ```hsc
        (<void> ai_remove_cue <string_id>)
        ```
        Remove the named AI cue
  - slug: generate_pathfinding
    info:
      en: |-
        ```hsc
        (<boolean> generate_pathfinding)
        ```
        Generate pathfinding info for all structure bsps in the current scenario
  - slug: ai_render_paths_all
    info:
      en: |-
        ```hsc
        (<void> ai_render_paths_all)
        ```
        Turns on raw, smoothed, avoided paths and avoidance obstacles
  - slug: ai_render_evaluations_shading_none
    info:
      en: |-
        ```hsc
        (<void> ai_render_evaluations_shading_none)
        ```
        Render no FP evaluation shading
  - slug: ai_render_evaluations_shading_all
    info:
      en: |-
        ```hsc
        (<void> ai_render_evaluations_shading_all)
        ```
        Render all FP evaluation shading
  - slug: ai_render_evaluations_shading
    info:
      en: |-
        ```hsc
        (<void> ai_render_evaluations_shading <firing_point_evaluator>)
        ```
        Add a specific FP evaluation shading to render
  - slug: ai_activity_set
    info:
      en: |-
        ```hsc
        (<void> ai_activity_set <ai> <string_id>)
        ```
        Set the given activity running on the given AI(s)
  - slug: ai_activity_abort
    info:
      en: |-
        ```hsc
        (<void> ai_activity_abort <ai>)
        ```
        Aborts the activities running on the given AI(s)
  - slug: ai_object_set_team
    info:
      en: |-
        ```hsc
        (<void> ai_object_set_team <object> <team>)
        ```
        flag an object as being owned by a certain team
  - slug: ai_object_set_targeting_bias
    info:
      en: |-
        ```hsc
        (<void> ai_object_set_targeting_bias <object> <real>)
        ```
        sets the targeting preference for this object in relation to other equal targets \[-1, 1\]
  - slug: ai_object_set_targeting_ranges
    info:
      en: |-
        ```hsc
        (<void> ai_object_set_targeting_ranges <object> <real> <real>)
        ```
        sets override weapon ranges for enemies attacking this object <min> <max>
  - slug: ai_object_enable_targeting_from_vehicle
    info:
      en: |-
        ```hsc
        (<void> ai_object_enable_targeting_from_vehicle <object> <boolean>)
        ```
        if enabled, actors in vehicles are not allowed to target this object <object> <true/false>
  - slug: ai_object_enable_grenade_attack
    info:
      en: |-
        ```hsc
        (<void> ai_object_enable_grenade_attack <object> <boolean>)
        ```
        if disabled, actors cannot attack the object with grenades <object> <true/false>
  - slug: ai_vehicle_get
    info:
      en: |-
        ```hsc
        (<vehicle> ai_vehicle_get <ai>)
        ```
        Returns the vehicle that the given actor is in.
  - slug: ai_vehicle_get_from_starting_location
    info:
      en: |-
        ```hsc
        (<vehicle> ai_vehicle_get_from_starting_location <ai>)
        ```
        PLEASE START USING ai_vehicle_get_from_spawn_point INSTEAD
  - slug: ai_vehicle_get_from_spawn_point
    info:
      en: |-
        ```hsc
        (<vehicle> ai_vehicle_get_from_spawn_point <ai>)
        ```
        Returns the vehicle that was spawned at the given spawn point
  - slug: ai_vehicle_get_squad_count
    info:
      en: |-
        ```hsc
        (<short> ai_vehicle_get_squad_count <ai>)
        ```
        Returns the number of vehicles in the given squad.
  - slug: ai_vehicle_get_from_squad
    info:
      en: |-
        ```hsc
        (<vehicle> ai_vehicle_get_from_squad <ai> <short>)
        ```
        Returns the nth vehicle from the given squad.
  - slug: ai_vehicle_reserve_seat
    info:
      en: |-
        ```hsc
        (<boolean> ai_vehicle_reserve_seat <vehicle> <unit_seat_mapping> <boolean>)
        ```
        Reserves the given seat on the given vehicle (so that AI may not enter it
  - slug: ai_vehicle_reserve
    info:
      en: |-
        ```hsc
        (<boolean> ai_vehicle_reserve <vehicle> <boolean>)
        ```
        Reserves the given vehicle (so that AI may not enter it
  - slug: ai_player_get_vehicle_squad
    info:
      en: |-
        ```hsc
        (<ai> ai_player_get_vehicle_squad <unit>)
        ```
        Returns the squad (if any) of the vehicle the player is riding in (note, the argument is a UNIT)
  - slug: ai_vehicle_count
    info:
      en: |-
        ```hsc
        (<short> ai_vehicle_count <ai>)
        ```
        Returns the number of vehicles being driven / ridden by the actors in the given squad/squad-group/task/etc.
  - slug: ai_carrying_player
    info:
      en: |-
        ```hsc
        (<boolean> ai_carrying_player <ai>)
        ```
        Returns whether any of the given AI are in a vehicle with the player
  - slug: player_in_vehicle
    info:
      en: |-
        ```hsc
        (<boolean> player_in_vehicle <vehicle>)
        ```
        Returns whether any players are in the given vehicle
  - slug: ai_player_needs_vehicle
    info:
      en: |-
        ```hsc
        (<boolean> ai_player_needs_vehicle <player>)
        ```
        Returns if the given player needs a vehicle at the moment
  - slug: ai_player_any_needs_vehicle
    info:
      en: |-
        ```hsc
        (<boolean> ai_player_any_needs_vehicle)
        ```
        Returns if any player needs a vehicle at the moment
  - slug: ai_vehicle_enter
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter <ai> <unit> <unit_seat_mapping>)
        ```
        tells a group of actors to get into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles
  - slug: ai_vehicle_enter
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter <ai> <unit>)
        ```
        tells a group of actors to get into a vehicle... does not interrupt any actors who are already going to vehicles
  - slug: ai_vehicle_enter_immediate
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter_immediate <ai> <unit> <unit_seat_mapping>)
        ```
        the given group of actors is snapped into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles
  - slug: ai_vehicle_enter_immediate
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter_immediate <ai> <unit>)
        ```
        the given group of actors is snapped into a vehicle
  - slug: ai_enter_squad_vehicles
    info:
      en: |-
        ```hsc
        (<short> ai_enter_squad_vehicles <ai>)
        ```
        Instructs the ai in the given squad to get in all their vehicles
  - slug: ai_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_exit <ai> <unit_seat_mapping>)
        ```
        tells a group of actors to get out of any vehicles that they are in (if their seat matches the substring)
  - slug: ai_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_exit <ai>)
        ```
        tells a group of actors to get out of any vehicles that they are in
  - slug: vehicle_overturned
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_overturned <vehicle>)
        ```
        Returns true if the vehicle is overturned
  - slug: vehicle_flip
    info:
      en: |-
        ```hsc
        (<void> vehicle_flip <vehicle>)
        ```
        Flips an overturned vehicle
  - slug: ai_squad_group_get_squad
    info:
      en: |-
        ```hsc
        (<ai> ai_squad_group_get_squad <ai> <short>)
        ```
        Returns the nth squad from a given squad group.
  - slug: ai_squad_group_get_squad_count
    info:
      en: |-
        ```hsc
        (<short> ai_squad_group_get_squad_count <ai>)
        ```
        Returns the number of squads in a given squad group
  - slug: ai_squad_patrol_enable
    info:
      en: |-
        ```hsc
        (<void> ai_squad_patrol_enable <string_id> <boolean>)
        ```
        Enable/disable a squad patrol
  - slug: ai_combat_status
    info:
      en: |-
        ```hsc
        (<short> ai_combat_status <ai>)
        ```
        Returns the highest integer combat status in the given squad-group/squad/actor
  - slug: ai_set_combat_status
    info:
      en: |-
        ```hsc
        (<void> ai_set_combat_status <ai> <short>)
        ```
        Set the combat status for the given AI
  - slug: flock_start
    info:
      en: |-
        ```hsc
        (<boolean> flock_start <string_id>)
        ```
        The flock starts producing boids
  - slug: flock_stop
    info:
      en: |-
        ```hsc
        (<boolean> flock_stop <string_id>)
        ```
        The flock stops producing boids
  - slug: flock_create
    info:
      en: |-
        ```hsc
        (<boolean> flock_create <string_id>)
        ```
        Create the given flock
  - slug: flock_delete
    info:
      en: |-
        ```hsc
        (<boolean> flock_delete <string_id>)
        ```
        Delete the given flock
  - slug: flock_destroy
    info:
      en: |-
        ```hsc
        (<boolean> flock_destroy <string_id>)
        ```
        Destroy the given flock, killing all members randomly over time.
  - slug: flock_definition_set
    info:
      en: |-
        ```hsc
        (<boolean> flock_definition_set <string_id> <any_tag>)
        ```
        Set the definition of the given flock to the given tag
  - slug: flock_unperch
    info:
      en: |-
        ```hsc
        (<void> flock_unperch <string_id>)
        ```
        Cause the given flock to unperch (if it is perched)
  - slug: flock_set_targeting_group
    info:
      en: |-
        ```hsc
        (<void> flock_set_targeting_group <string_id> <short>)
        ```
        Set the flock to only target other guys in targeting group X
  - slug: flock_destination_set_enabled
    info:
      en: |-
        ```hsc
        (<void> flock_destination_set_enabled <string_id> <string_id> <boolean>)
        ```
        Sets the enabled flag on the flock destination
  - slug: flock_destination_set_position
    info:
      en: |-
        ```hsc
        (<void> flock_destination_set_position <string_id> <string_id> <point_reference>)
        ```
        Sets the position of a flock destination to the location of an ai point
  - slug: flock_destination_copy_position
    info:
      en: |-
        ```hsc
        (<void> flock_destination_copy_position <string_id> <string_id> <string_id>)
        ```
        Sets the position of one flock destination to the position of another flock destination
  - slug: drop_ai
    info:
      en: |-
        ```hsc
        (<void> drop_ai <string> <string>)
        ```
        Drop an ai with the given weapon at the current camera position
  - slug: mantini_create_runtime_squad
    info:
      en: |-
        ```hsc
        (<boolean> mantini_create_runtime_squad <string>)
        ```
        Create a new squad definition entry with the given name. Arg: <squad_name> 
  - slug: mantini_create_runtime_point_set
    info:
      en: |-
        ```hsc
        (<boolean> mantini_create_runtime_point_set <string>)
        ```
        Enables mantini to create new point sets in memory. ARG: <point_set_name>
  - slug: mantini_add_runtime_point_to_set
    info:
      en: |-
        ```hsc
        (<boolean> mantini_add_runtime_point_to_set <string> <string> <real> <real> <real> <real>)
        ```
        Enables mantini to add a point to an in memory point set.  ARG: <point_set_name> <point_name> <x> <y> <yaw> <pitch>
  - slug: mantini_add_runtime_point_to_set_from_camera
    info:
      en: |-
        ```hsc
        (<boolean> mantini_add_runtime_point_to_set_from_camera <string> <string> <real> <real>)
        ```
        Enables mantini to add a point to an in memory point set along the current camera fwd collision point.  ARG: <point_set_name> <point_name> <yaw> <pitch>
  - slug: mantini_add_starting_location_to_squad
    info:
      en: |-
        ```hsc
        (<boolean> mantini_add_starting_location_to_squad <string> <string> <long> <point_reference>)
        ```
        Enables mantini to add a spawn point to a squad identified by an AI point.  ARG: <squad_name> <starting loc name> <cell_index> <pointref>
  - slug: mantini_add_starting_location_to_squad_from_camera
    info:
      en: |-
        ```hsc
        (<boolean> mantini_add_starting_location_to_squad_from_camera <string> <string> <long> <real>)
        ```
        Enables mantini to add a spawn point to a squad identified from the camera position.  ARG: <squad_name> <starting loc name> <cell_index> <offset in wus>
  - slug: mantini_add_cell_to_runtime_squad
    info:
      en: |-
        ```hsc
        (<long> mantini_add_cell_to_runtime_squad <string> <string>)
        ```
        Add a character to a runtime squad. Arg: <squad_name> <character tag>
  - slug: mantini_get_runtime_squad_cell_count
    info:
      en: |-
        ```hsc
        (<long> mantini_get_runtime_squad_cell_count <string>)
        ```
        Get the cell count of a runtime squad. Arg: <squad_name> 
  - slug: mantini_set_squad_team
    info:
      en: |-
        ```hsc
        (<boolean> mantini_set_squad_team <string> <team>)
        ```
        Set the team for a runtime squad. Arg: <squad_name> <team>
  - slug: mantini_set_spawn_point_weapons
    info:
      en: |-
        ```hsc
        (<boolean> mantini_set_spawn_point_weapons <ai> <string> <string>)
        ```
        Set primary and secondary weapon for a spawn point. Arg: <spawn_point> <primary weapon tag> <secondary weapon tag>
  - slug: mantini_set_spawn_point_vehicle
    info:
      en: |-
        ```hsc
        (<boolean> mantini_set_spawn_point_vehicle <ai> <string>)
        ```
        Set vehicle for a spawn point. Arg: <spawn_point> <vehicle tag>
  - slug: mantini_set_spawn_point_variants
    info:
      en: |-
        ```hsc
        (<boolean> mantini_set_spawn_point_variants <ai> <string_id> <string_id>)
        ```
        Set actor and vehicle variants for spawn point. Arg: <spawn_point> <actor variant> <vehicle variant>
  - slug: mantini_set_squad_cell_spawn_count
    info:
      en: |-
        ```hsc
        (<boolean> mantini_set_squad_cell_spawn_count <string> <long> <long>)
        ```
        Set cell spawn count. Arg: <squad name> <cell index> <spawn count>
  - slug: mantini_clear_runtime_squads
    info:
      en: |-
        ```hsc
        (<boolean> mantini_clear_runtime_squads)
        ```
        Clears all runtime created squads. Returns false if there were none to clear
  - slug: mantini_remove_pointset
    info:
      en: |-
        ```hsc
        (<boolean> mantini_remove_pointset <string>)
        ```
        Clears all point sets after a pointset that contains the specified substring. Returns false if there were none to clear. Arg: <substring to search for in pointset name>
  - slug: ai_verify_tags
    info:
      en: |-
        ```hsc
        (<void> ai_verify_tags)
        ```
        Verifies state of ai-related tags (e.g. orders, squads, zones, etc.)
  - slug: ai_wall_lean
    info:
      en: |-
        ```hsc
        (<boolean> ai_wall_lean <ai>)
        ```
        Makes the actor lean against a wall RIGHT NOW
  - slug: ai_fire_dialogue_event
    info:
      en: |-
        ```hsc
        (<void> ai_fire_dialogue_event <ai> <string> <object>)
        ```
        Runs a dialogue event on actor closest to a player
  - slug: ai_play_vocalization
    info:
      en: |-
        ```hsc
        (<void> ai_play_vocalization <string_id>)
        ```
        Runs a dialogue event on actor closest to a player
  - slug: ai_play_vocalization_on_team
    info:
      en: |-
        ```hsc
        (<void> ai_play_vocalization_on_team <string_id> <team>)
        ```
        Runs a dialogue event on actor closest to a player that's allied with the given team
  - slug: ai_play_line
    info:
      en: |-
        ```hsc
        (<real> ai_play_line <ai> <ai_line>)
        ```
        Play the given mission dialogue line on the given ai
  - slug: ai_play_line_at_player
    info:
      en: |-
        ```hsc
        (<real> ai_play_line_at_player <ai> <ai_line>)
        ```
        Play the given mission dialogue line on the given ai, directing the ai's gaze at the nearest visible player
  - slug: ai_play_line_on_object
    info:
      en: |-
        ```hsc
        (<real> ai_play_line_on_object <object> <ai_line>)
        ```
        Play the given mission dialogue line on the given object (uses first available variant)
  - slug: ai_play_line_on_object_for_team
    info:
      en: |-
        ```hsc
        (<real> ai_play_line_on_object_for_team <object> <ai_line> <mp_team>)
        ```
        Play the given mission dialogue line on the given object (uses first available variant) if anyone on the local box is on the specified team
  - slug: ai_play_line_on_point_set
    info:
      en: |-
        ```hsc
        (<short> ai_play_line_on_point_set <string_id> <point_reference> <short>)
        ```
        Play the given line on the N closest point to players in the given point set
  - slug: ai_play_line_on_point_set
    info:
      en: |-
        ```hsc
        (<short> ai_play_line_on_point_set <string_id> <point_reference> <short> <string_id>)
        ```
        Play the given line (with the given 3-letter variant) on the N closest point to players in the given point set
  - slug: campaign_metagame_time_pause
    info:
      en: |-
        ```hsc
        (<void> campaign_metagame_time_pause <boolean>)
        ```
        pause meta game time, while paused your completion multiplier stops going down
  - slug: campaign_metagame_award_points
    info:
      en: |-
        ```hsc
        (<void> campaign_metagame_award_points <player> <long>)
        ```
        award bonus metagame points to a player
  - slug: campaign_metagame_award_skull
    info:
      en: |-
        ```hsc
        (<void> campaign_metagame_award_skull <player> <skull>)
        ```
        award a skull to a player
  - slug: campaign_metagame_enabled
    info:
      en: |-
        ```hsc
        (<boolean> campaign_metagame_enabled)
        ```
        TRUE if the metagame is enabled
  - slug: campaign_survival_enabled
    info:
      en: |-
        ```hsc
        (<boolean> campaign_survival_enabled)
        ```
        TRUE if survival mode is enabled
  - slug: thespian_performance_test
    info:
      en: |-
        ```hsc
        (<void> thespian_performance_test <string_id>)
        ```
        Starts a performance with the given name, spawns needed actors
  - slug: thespian_folder_activate
    info:
      en: |-
        ```hsc
        (<void> thespian_folder_activate <folder>)
        ```
        Activates inactive performances inside a given folder name, waits for actors
  - slug: thespian_folder_deactivate
    info:
      en: |-
        ```hsc
        (<void> thespian_folder_deactivate <folder>)
        ```
        Deactivates active performances inside a given folder name
  - slug: thespian_performance_activate
    info:
      en: |-
        ```hsc
        (<void> thespian_performance_activate <string_id>)
        ```
        Activates an inactive performance with a given name, waits for actors
  - slug: thespian_performance_setup_and_begin
    info:
      en: |-
        ```hsc
        (<boolean> thespian_performance_setup_and_begin <string_id> <string_id> <real>)
        ```
        Finds all of the actors needed for the performance, and then starts the performance
  - slug: performance_new
    info:
      en: |-
        ```hsc
        (<long> performance_new <string_id> <boolean>)
        ```
        Creates a new instance of a performance given a performance definition name. If last argument true, allows duplicates
  - slug: cast_squad_in_performance
    info:
      en: |-
        ```hsc
        (<void> cast_squad_in_performance <long> <ai>)
        ```
        Finds and assigns roles for actors in the given squad in a performance
  - slug: performance_begin
    info:
      en: |-
        ```hsc
        (<void> performance_begin <long>)
        ```
        Starts the script for a performance if all of the critical roles have been cast
  - slug: thespian_performance_kill_by_name
    info:
      en: |-
        ```hsc
        (<void> thespian_performance_kill_by_name <string_id>)
        ```
        Kills any performance with the given name
  - slug: thespian_performance_kill_by_ai
    info:
      en: |-
        ```hsc
        (<void> thespian_performance_kill_by_ai <ai>)
        ```
        Kills any performance that has cast an ai from the given squad
  - slug: thespian_fake_task_transition
    info:
      en: |-
        ```hsc
        (<void> thespian_fake_task_transition <string_id> <string_id>)
        ```
        Unblocks an actor waiting looping animation that's waiting on a task transition
  - slug: performance_play_line_by_id
    info:
      en: |-
        ```hsc
        (<void> performance_play_line_by_id <short>)
        ```
        play a line (referenced by line id) in the performance.
  - slug: performance_play_line
    info:
      en: |-
        ```hsc
        (<void> performance_play_line <string_id>)
        ```
        play a line (referenced by name) in the performance.
  - slug: performance_get_actor_by_index
    info:
      en: |-
        ```hsc
        (<ai> performance_get_actor_by_index <short>)
        ```
        Get the actor in the given participant slot of a performace
  - slug: performance_get_actor
    info:
      en: |-
        ```hsc
        (<ai> performance_get_actor <string_id>)
        ```
        Get the actor who playing the given named role in a performance
  - slug: performance_get_actor_count
    info:
      en: |-
        ```hsc
        (<short> performance_get_actor_count)
        ```
        Get the total number of actors currently in the performance
  - slug: performance_get_role_count
    info:
      en: |-
        ```hsc
        (<short> performance_get_role_count)
        ```
        Get the total number of roles in the performance
  - slug: performance_get_line_count
    info:
      en: |-
        ```hsc
        (<short> performance_get_line_count)
        ```
        Get the total number of lines in the performance
  - slug: performance_get_last_played_line_index
    info:
      en: |-
        ```hsc
        (<short> performance_get_last_played_line_index)
        ```
        Get the index of the last line played in the performance
  - slug: thespian_performance_is_blocked
    info:
      en: |-
        ```hsc
        (<boolean> thespian_performance_is_blocked)
        ```
        Returns true if a line is executing that is blocking
  - slug: actor_from_performance
    info:
      en: |-
        ```hsc
        (<ai> actor_from_performance <long> <string_id>)
        ```
        Get a specified actor from a performance given by its runtime index
  - slug: ai_player_add_fireteam_squad
    info:
      en: |-
        ```hsc
        (<void> ai_player_add_fireteam_squad <unit> <ai>)
        ```
        Adds the given squad to the given player's fire team
  - slug: ai_player_remove_fireteam_squad
    info:
      en: |-
        ```hsc
        (<void> ai_player_remove_fireteam_squad <unit> <ai>)
        ```
        Removes the given squad from the given player's fire team
  - slug: ai_player_set_fireteam_max
    info:
      en: |-
        ```hsc
        (<void> ai_player_set_fireteam_max <unit> <short>)
        ```
        Sets the maximum number of actors allowed in the players fire team.
  - slug: ai_player_set_fireteam_no_max
    info:
      en: |-
        ```hsc
        (<void> ai_player_set_fireteam_no_max <unit>)
        ```
        Sets the maximum number of actors allowed in the players fire team to unlimited.
  - slug: ai_player_set_fireteam_max_squad_absorb_distance
    info:
      en: |-
        ```hsc
        (<void> ai_player_set_fireteam_max_squad_absorb_distance <unit> <real>)
        ```
        Sets the maximum distance at which this squad can absorb nearby squads.
  - slug: ai_set_fireteam_absorber
    info:
      en: |-
        ```hsc
        (<void> ai_set_fireteam_absorber <ai> <boolean>)
        ```
        enables or disables fireteam absortion for a given squad in the specified encounter.
  - slug: ai_set_fireteam_fallback_squad
    info:
      en: |-
        ```hsc
        (<void> ai_set_fireteam_fallback_squad <unit> <ai>)
        ```
        Sets the squad that AI will migrate into if the player dies.
  - slug: ai_is_in_fireteam
    info:
      en: |-
        ```hsc
        (<boolean> ai_is_in_fireteam <ai>)
        ```
        Returns true if the given ai is in a fire team.
  - slug: cs_run_command_script
    info:
      en: |-
        ```hsc
        (<void> cs_run_command_script <ai> <ai_command_script>)
        ```
        Causes the specified actor(s) to start executing a command script immediately (discarding any other command scripts in the queue)
  - slug: cs_queue_command_script
    info:
      en: |-
        ```hsc
        (<void> cs_queue_command_script <ai> <ai_command_script>)
        ```
        Add a command script onto the end of an actor's command script queue
  - slug: cs_stack_command_script
    info:
      en: |-
        ```hsc
        (<void> cs_stack_command_script <ai> <ai_command_script>)
        ```
        Push a command script to the top of the actor's command script queue
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id>)
        ```
        Cast 1 actor for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id>)
        ```
        Cast 2 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id>)
        ```
        Cast 3 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id>)
        ```
        Cast 4 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id> <string_id>)
        ```
        Cast 5 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id> <string_id> <string_id>)
        ```
        Cast 6 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_cast
    info:
      en: |-
        ```hsc
        (<boolean> vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id> <string_id> <string_id> <string_id>)
        ```
        Cast 7 actors for a vignette (at the given priority, higher = more important)
  - slug: vs_role
    info:
      en: |-
        ```hsc
        (<ai> vs_role <short>)
        ```
        Returns the given member of the cast (as per more recent vs_cast call)
  - slug: cs_abort_on_alert
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_alert <boolean>)
        ```
        Command script ends prematurely when actor's combat status raises to 'alert' or higher
  - slug: cs_abort_on_damage
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_damage <boolean>)
        ```
        Command script ends prematurely when actor is damaged
  - slug: cs_abort_on_combat_status
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_combat_status <short>)
        ```
        Command script ends prematurely when actor's combat status rises to given level
  - slug: cs_abort_on_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_vehicle_exit <boolean>)
        ```
        Command script ends prematurely when actor gets out of its vehicle
  - slug: cs_abort_on_alert
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_alert <boolean>)
        ```
        Command script ends prematurely when given actor's combat status raises to 'alert' or higher
  - slug: cs_abort_on_alert
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_alert <ai> <boolean>)
        ```
        Command script ends prematurely when given actor's combat status raises to 'alert' or higher
  - slug: cs_abort_on_damage
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_damage <boolean>)
        ```
        Command script ends prematurely when actor is damaged
  - slug: cs_abort_on_damage
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_damage <ai> <boolean>)
        ```
        Command script ends prematurely when actor is damaged
  - slug: cs_abort_on_combat_status
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_combat_status <short>)
        ```
        Command script ends prematurely when actor's combat status rises to given level
  - slug: cs_abort_on_combat_status
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_combat_status <ai> <short>)
        ```
        Command script ends prematurely when actor's combat status rises to given level
  - slug: cs_abort_on_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_vehicle_exit <boolean>)
        ```
        Command script ends prematurely when actor gets out of its vehicle
  - slug: cs_abort_on_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_vehicle_exit <ai> <boolean>)
        ```
        Command script ends prematurely when actor gets out of its vehicle
  - slug: cs_command_script_running
    info:
      en: |-
        ```hsc
        (<boolean> cs_command_script_running <ai> <ai_command_script>)
        ```
        Returns true if the ai is running the command script in question
  - slug: cs_command_script_attached
    info:
      en: |-
        ```hsc
        (<boolean> cs_command_script_attached <ai> <ai_command_script>)
        ```
        Returns true if the command script is in the ai's cs queue
  - slug: cs_number_queued
    info:
      en: |-
        ```hsc
        (<short> cs_number_queued <ai>)
        ```
        Returns the number of queued command scripts
  - slug: cs_moving
    info:
      en: |-
        ```hsc
        (<boolean> cs_moving)
        ```
        Returns TRUE if the actor is currently following a path
  - slug: cs_moving
    info:
      en: |-
        ```hsc
        (<boolean> cs_moving <ai>)
        ```
        Returns TRUE if the actor is currently following a path
  - slug: cs_fly_to
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to <point_reference>)
        ```
        Flies the actor to the given point
  - slug: cs_fly_to
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to <ai> <boolean> <point_reference>)
        ```
        Flies the actor to the given point
  - slug: cs_fly_to
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to <point_reference> <real>)
        ```
        Flies the actor to the given point (within the given tolerance)
  - slug: cs_fly_to
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to <ai> <boolean> <point_reference> <real>)
        ```
        Flies the actor to the given point (within the given tolerance)
  - slug: cs_fly_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to_and_face <point_reference> <point_reference>)
        ```
        Flies the actor to the given point and orients him in the appropriate direction
  - slug: cs_fly_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to_and_face <ai> <boolean> <point_reference> <point_reference>)
        ```
        Flies the actor to the given point and orients him in the appropriate direction
  - slug: cs_fly_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to_and_face <point_reference> <point_reference> <real>)
        ```
        Flies the actor to the given point and orients him in the appropriate direction (within the given tolerance)
  - slug: cs_fly_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to_and_face <ai> <boolean> <point_reference> <point_reference> <real>)
        ```
        Flies the actor to the given point and orients him in the appropriate direction (within the given tolerance)
  - slug: cs_fly_by
    info:
      en: |-
        ```hsc
        (<void> cs_fly_by <point_reference>)
        ```
        Flies the actor through the given point
  - slug: cs_fly_by
    info:
      en: |-
        ```hsc
        (<void> cs_fly_by <ai> <boolean> <point_reference>)
        ```
        Flies the actor through the given point
  - slug: cs_fly_by
    info:
      en: |-
        ```hsc
        (<void> cs_fly_by <point_reference> <real>)
        ```
        Flies the actor through the given point (within the given tolerance)
  - slug: cs_fly_by
    info:
      en: |-
        ```hsc
        (<void> cs_fly_by <ai> <boolean> <point_reference> <real>)
        ```
        Flies the actor through the given point (within the given tolerance)
  - slug: cs_go_to
    info:
      en: |-
        ```hsc
        (<void> cs_go_to <point_reference>)
        ```
        Moves the actor to a specified point
  - slug: cs_go_to
    info:
      en: |-
        ```hsc
        (<void> cs_go_to <ai> <boolean> <point_reference>)
        ```
        Moves the actor to a specified point
  - slug: cs_go_to
    info:
      en: |-
        ```hsc
        (<void> cs_go_to <point_reference> <real>)
        ```
        Moves the actor to a specified point, attenuating throttle by the given amount when near the goal
  - slug: cs_go_to
    info:
      en: |-
        ```hsc
        (<void> cs_go_to <ai> <boolean> <point_reference> <real>)
        ```
        Moves the actor to a specified point, attenuating throttle by the given amount when near the goal
  - slug: cs_go_by
    info:
      en: |-
        ```hsc
        (<void> cs_go_by <point_reference> <point_reference>)
        ```
        Actor moves toward the point, and considers it hit when it breaks the indicated plane
  - slug: cs_go_by
    info:
      en: |-
        ```hsc
        (<void> cs_go_by <ai> <boolean> <point_reference> <point_reference>)
        ```
        Actor moves toward the point, and considers it hit when it breaks the indicated plane
  - slug: cs_go_by
    info:
      en: |-
        ```hsc
        (<void> cs_go_by <point_reference> <point_reference> <real>)
        ```
        Actor moves toward the point, and considers it hit when it breaks the indicated plane, attenuating throttle by the given amount when near the goal
  - slug: cs_go_by
    info:
      en: |-
        ```hsc
        (<void> cs_go_by <ai> <boolean> <point_reference> <point_reference> <real>)
        ```
        Actor moves toward the point, and considers it hit when it breaks the indicated plane, attenuating throttle by the given amount when near the goal
  - slug: cs_go_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_and_face <point_reference> <point_reference>)
        ```
        Moves the actor to a specified point and has him face the second point
  - slug: cs_go_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_and_face <ai> <boolean> <point_reference> <point_reference>)
        ```
        Moves the actor to a specified point and has him face the second point
  - slug: cs_go_to_and_posture
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_and_posture <point_reference> <string_id>)
        ```
        Actor moves to the point and performs a posture once there
  - slug: cs_go_to_and_posture
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_and_posture <ai> <boolean> <point_reference> <string_id>)
        ```
        Actor moves to the point and performs a posture once there
  - slug: cs_attach_to_spline
    info:
      en: |-
        ```hsc
        (<void> cs_attach_to_spline <string_id>)
        ```
        For use in flying vehicles: Set this vehicle to pathfind using the designated spline.
  - slug: cs_attach_to_spline
    info:
      en: |-
        ```hsc
        (<void> cs_attach_to_spline <ai> <boolean> <string_id>)
        ```
        For use in flying vehicles: Set this vehicle to pathfind using the designated spline.
  - slug: cs_go_to_nearest
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_nearest <point_reference>)
        ```
        Given a point set, AI goes toward the nearest point
  - slug: cs_go_to_nearest
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_nearest <ai> <boolean> <point_reference>)
        ```
        Given a point set, AI goes toward the nearest point
  - slug: cs_move_in_direction
    info:
      en: |-
        ```hsc
        (<void> cs_move_in_direction <real> <real> <real>)
        ```
        Actor moves at given angle, for the given distance, optionally with the given facing (angle, distance, facing)
  - slug: cs_move_in_direction
    info:
      en: |-
        ```hsc
        (<void> cs_move_in_direction <ai> <boolean> <real> <real> <real>)
        ```
        Actor moves at given angle, for the given distance, optionally with the given facing (angle, distance, facing)
  - slug: cs_move_towards
    info:
      en: |-
        ```hsc
        (<void> cs_move_towards <object>)
        ```
        Move in the direction of the given object
  - slug: cs_move_towards
    info:
      en: |-
        ```hsc
        (<void> cs_move_towards <ai> <boolean> <object>)
        ```
        Move in the direction of the given object
  - slug: cs_move_towards
    info:
      en: |-
        ```hsc
        (<void> cs_move_towards <object> <boolean>)
        ```
        Move in the direction of the given object (and melee the target or not)
  - slug: cs_move_towards
    info:
      en: |-
        ```hsc
        (<void> cs_move_towards <ai> <boolean> <object> <boolean>)
        ```
        Move in the direction of the given object (and melee the target or not)
  - slug: cs_move_towards_point
    info:
      en: |-
        ```hsc
        (<void> cs_move_towards_point <point_reference> <real>)
        ```
        Move to within the given radius of the given point
  - slug: cs_move_towards_point
    info:
      en: |-
        ```hsc
        (<void> cs_move_towards_point <ai> <boolean> <point_reference> <real>)
        ```
        Move to within the given radius of the given point
  - slug: cs_swarm_to
    info:
      en: |-
        ```hsc
        (<void> cs_swarm_to <point_reference> <real>)
        ```
        A swarm swarms towards the point (or point set) in question, the individual forms stopping when they get within the given radius
  - slug: cs_swarm_to
    info:
      en: |-
        ```hsc
        (<void> cs_swarm_to <ai> <boolean> <point_reference> <real>)
        ```
        A swarm swarms towards the point (or point set) in question, the individual forms stopping when they get within the given radius
  - slug: cs_swarm_from
    info:
      en: |-
        ```hsc
        (<void> cs_swarm_from <point_reference> <real>)
        ```
        A swarm swarms away from the point in question, going at least the given distance
  - slug: cs_swarm_from
    info:
      en: |-
        ```hsc
        (<void> cs_swarm_from <ai> <boolean> <point_reference> <real>)
        ```
        A swarm swarms away from the point in question, going at least the given distance
  - slug: cs_pause
    info:
      en: |-
        ```hsc
        (<void> cs_pause <real>)
        ```
        The actor does nothing for the given number of seconds
  - slug: cs_pause
    info:
      en: |-
        ```hsc
        (<void> cs_pause <ai> <boolean> <real>)
        ```
        The actor does nothing for the given number of seconds
  - slug: cs_grenade
    info:
      en: |-
        ```hsc
        (<void> cs_grenade <point_reference> <short>)
        ```
        Actor throws a grenade, either by tossing (arg2=0), lobbing (1) or bouncing (2)
  - slug: cs_grenade
    info:
      en: |-
        ```hsc
        (<void> cs_grenade <ai> <boolean> <point_reference> <short>)
        ```
        Actor throws a grenade, either by tossing (arg2=0), lobbing (1) or bouncing (2)
  - slug: cs_use_equipment
    info:
      en: |-
        ```hsc
        (<void> cs_use_equipment <real>)
        ```
        Actor uses their current equipment for the given number of seconds
  - slug: cs_use_equipment
    info:
      en: |-
        ```hsc
        (<void> cs_use_equipment <ai> <boolean> <real>)
        ```
        Actor uses their current equipment for the given number of seconds
  - slug: cs_jump
    info:
      en: |-
        ```hsc
        (<void> cs_jump <real> <real>)
        ```
        Actor jumps in direction of angle at the given velocity (angle, velocity)
  - slug: cs_jump
    info:
      en: |-
        ```hsc
        (<void> cs_jump <ai> <boolean> <real> <real>)
        ```
        Actor jumps in direction of angle at the given velocity (angle, velocity)
  - slug: cs_jump_to_point
    info:
      en: |-
        ```hsc
        (<void> cs_jump_to_point <real> <real>)
        ```
        Actor jumps with given horizontal and vertical velocity
  - slug: cs_jump_to_point
    info:
      en: |-
        ```hsc
        (<void> cs_jump_to_point <ai> <boolean> <real> <real>)
        ```
        Actor jumps with given horizontal and vertical velocity
  - slug: cs_vocalize
    info:
      en: |-
        ```hsc
        (<void> cs_vocalize <short>)
        ```
        Actor emits vocalization of given type
  - slug: cs_vocalize
    info:
      en: |-
        ```hsc
        (<void> cs_vocalize <ai> <boolean> <short>)
        ```
        Actor emits vocalization of given type
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <sound>)
        ```
        Actor plays an impulse sound and the atom blocks until it is complete
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <ai> <boolean> <sound>)
        ```
        Actor plays an impulse sound and the atom blocks until it is complete
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <sound> <real>)
        ```
        Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <ai> <boolean> <sound> <real>)
        ```
        Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <sound> <real> <real>)
        ```
        Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length, at the given volume (0..1)
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <ai> <boolean> <sound> <real> <real>)
        ```
        Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length, at the given volume (0..1)
  - slug: cs_action
    info:
      en: |-
        ```hsc
        (<void> cs_action <point_reference> <short>)
        ```
        Actor plays an AI action towards the given point. ai_action_<tab> to see action options
  - slug: cs_action
    info:
      en: |-
        ```hsc
        (<void> cs_action <ai> <boolean> <point_reference> <short>)
        ```
        Actor plays an AI action towards the given point. ai_action_<tab> to see action options
  - slug: cs_action_at_object
    info:
      en: |-
        ```hsc
        (<void> cs_action_at_object <object> <short>)
        ```
        Actor plays an AI action towards the given object. ai_action_<tab> to see action options
  - slug: cs_action_at_object
    info:
      en: |-
        ```hsc
        (<void> cs_action_at_object <ai> <boolean> <object> <short>)
        ```
        Actor plays an AI action towards the given object. ai_action_<tab> to see action options
  - slug: cs_action_at_player
    info:
      en: |-
        ```hsc
        (<void> cs_action_at_player <short>)
        ```
        Actor plays an AI action towards the nearest_player. ai_action_<tab> to see action options
  - slug: cs_action_at_player
    info:
      en: |-
        ```hsc
        (<void> cs_action_at_player <ai> <boolean> <short>)
        ```
        Actor plays an AI action towards the nearest_player. ai_action_<tab> to see action options
  - slug: cs_custom_animation
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
  - slug: cs_custom_animation
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation <ai> <boolean> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
  - slug: cs_custom_animation
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE)
  - slug: cs_custom_animation
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation <ai> <boolean> <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE)
  - slug: cs_custom_animation_death
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_death <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
  - slug: cs_custom_animation_death
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_death <ai> <boolean> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
  - slug: cs_custom_animation_death
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_death <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
  - slug: cs_custom_animation_death
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_death <ai> <boolean> <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)
  - slug: cs_custom_animation_loop
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_loop <animation_graph> <string_id> <boolean>)
        ```
        starts a looping custom animation playing on the actor (interpolates into animation if last parameter is TRUE) NON-BLOCKING
  - slug: cs_custom_animation_loop
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_loop <ai> <animation_graph> <string_id> <boolean>)
        ```
        starts a looping custom animation playing on the actor (interpolates into animation if last parameter is TRUE) NON-BLOCKING
  - slug: cs_custom_animation_loop
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_loop <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a looping custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE) NON-BLOCKING
  - slug: cs_custom_animation_loop
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation_loop <ai> <animation_graph> <string_id> <boolean> <point_reference>)
        ```
        starts a looping custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE) NON-BLOCKING
  - slug: cs_play_line
    info:
      en: |-
        ```hsc
        (<void> cs_play_line <ai_line>)
        ```
        Play the named line in the current scene
  - slug: cs_play_line
    info:
      en: |-
        ```hsc
        (<void> cs_play_line <ai> <boolean> <ai_line>)
        ```
        Play the named line in the current scene
  - slug: cs_die
    info:
      en: |-
        ```hsc
        (<void> cs_die <short>)
        ```
        Actor dies in specified manner
  - slug: cs_die
    info:
      en: |-
        ```hsc
        (<void> cs_die <ai> <boolean> <short>)
        ```
        Actor dies in specified manner
  - slug: cs_deploy_turret
    info:
      en: |-
        ```hsc
        (<void> cs_deploy_turret <point_reference>)
        ```
        Deploy a turret at the given script point
  - slug: cs_deploy_turret
    info:
      en: |-
        ```hsc
        (<void> cs_deploy_turret <ai> <boolean> <point_reference>)
        ```
        Deploy a turret at the given script point
  - slug: cs_approach
    info:
      en: |-
        ```hsc
        (<void> cs_approach <object> <real> <real> <real>)
        ```
        (approach <object> <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)
  - slug: cs_approach
    info:
      en: |-
        ```hsc
        (<void> cs_approach <ai> <boolean> <object> <real> <real> <real>)
        ```
        (approach <object> <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)
  - slug: cs_approach_player
    info:
      en: |-
        ```hsc
        (<void> cs_approach_player <real> <real> <real>)
        ```
        (approach player <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)
  - slug: cs_approach_player
    info:
      en: |-
        ```hsc
        (<void> cs_approach_player <ai> <boolean> <real> <real> <real>)
        ```
        (approach player <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)
  - slug: cs_go_to_vehicle
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_vehicle <vehicle>)
        ```
        Actor gets in the appropriate vehicle
  - slug: cs_go_to_vehicle
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_vehicle <ai> <boolean> <vehicle>)
        ```
        Actor gets in the appropriate vehicle
  - slug: cs_go_to_vehicle
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_vehicle <vehicle> <unit_seat_mapping>)
        ```
        Actor gets in the named seat of the appropriate vehicle
  - slug: cs_go_to_vehicle
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_vehicle <ai> <boolean> <vehicle> <unit_seat_mapping>)
        ```
        Actor gets in the named seat of the appropriate vehicle
  - slug: cs_set_style
    info:
      en: |-
        ```hsc
        (<void> cs_set_style <style>)
        ```
        Override the actor's style
  - slug: cs_set_style
    info:
      en: |-
        ```hsc
        (<void> cs_set_style <ai> <style>)
        ```
        Override the actor's style
  - slug: cs_force_combat_status
    info:
      en: |-
        ```hsc
        (<void> cs_force_combat_status <short>)
        ```
        Force the actor's combat status (0= no override, 1=idle, 2= alert, 3= active)
  - slug: cs_force_combat_status
    info:
      en: |-
        ```hsc
        (<void> cs_force_combat_status <ai> <short>)
        ```
        Force the actor's combat status (0= no override, 1=idle, 2= alert, 3= active)
  - slug: cs_enable_targeting
    info:
      en: |-
        ```hsc
        (<void> cs_enable_targeting <boolean>)
        ```
        Actor autonomous target selection enabled/disabled.
  - slug: cs_enable_targeting
    info:
      en: |-
        ```hsc
        (<void> cs_enable_targeting <ai> <boolean>)
        ```
        Actor autonomous target selection enabled/disabled.
  - slug: cs_enable_looking
    info:
      en: |-
        ```hsc
        (<void> cs_enable_looking <boolean>)
        ```
        Actor autonomous looking enabled/disabled.
  - slug: cs_enable_looking
    info:
      en: |-
        ```hsc
        (<void> cs_enable_looking <ai> <boolean>)
        ```
        Actor autonomous looking enabled/disabled.
  - slug: cs_enable_moving
    info:
      en: |-
        ```hsc
        (<void> cs_enable_moving <boolean>)
        ```
        Actor autonomous moving enabled/disabled.
  - slug: cs_enable_moving
    info:
      en: |-
        ```hsc
        (<void> cs_enable_moving <ai> <boolean>)
        ```
        Actor autonomous moving enabled/disabled.
  - slug: cs_enable_dialogue
    info:
      en: |-
        ```hsc
        (<void> cs_enable_dialogue <boolean>)
        ```
        Actor combat dialogue enabled/disabled.
  - slug: cs_enable_dialogue
    info:
      en: |-
        ```hsc
        (<void> cs_enable_dialogue <ai> <boolean>)
        ```
        Actor combat dialogue enabled/disabled.
  - slug: cs_suppress_activity_termination
    info:
      en: |-
        ```hsc
        (<void> cs_suppress_activity_termination <boolean>)
        ```
        Autonomous termination of activities is suppressed for the remainder of the command script
  - slug: cs_suppress_activity_termination
    info:
      en: |-
        ```hsc
        (<void> cs_suppress_activity_termination <ai> <boolean>)
        ```
        Autonomous termination of activities is suppressed for the remainder of the command script
  - slug: cs_suppress_dialogue_global
    info:
      en: |-
        ```hsc
        (<void> cs_suppress_dialogue_global <boolean>)
        ```
        Combat dialogue is suppressed for the remainder of the command script
  - slug: cs_suppress_dialogue_global
    info:
      en: |-
        ```hsc
        (<void> cs_suppress_dialogue_global <ai> <boolean>)
        ```
        Combat dialogue is suppressed for the remainder of the command script
  - slug: cs_look
    info:
      en: |-
        ```hsc
        (<void> cs_look <boolean> <point_reference>)
        ```
        Actor looks at the point for the remainder of the cs, or until overridden
  - slug: cs_look
    info:
      en: |-
        ```hsc
        (<void> cs_look <ai> <boolean> <point_reference>)
        ```
        Actor looks at the point for the remainder of the cs, or until overridden
  - slug: cs_look_player
    info:
      en: |-
        ```hsc
        (<void> cs_look_player <boolean>)
        ```
        Actor looks at nearest player for the duration of the cs, or until overridden
  - slug: cs_look_player
    info:
      en: |-
        ```hsc
        (<void> cs_look_player <ai> <boolean>)
        ```
        Actor looks at nearest player for the duration of the cs, or until overridden
  - slug: cs_look_object
    info:
      en: |-
        ```hsc
        (<void> cs_look_object <boolean> <object>)
        ```
        Actor looks at the object for the duration of the cs, or until overridden
  - slug: cs_look_object
    info:
      en: |-
        ```hsc
        (<void> cs_look_object <ai> <boolean> <object>)
        ```
        Actor looks at the object for the duration of the cs, or until overridden
  - slug: cs_aim
    info:
      en: |-
        ```hsc
        (<void> cs_aim <boolean> <point_reference>)
        ```
        Actor aims at the point for the remainder of the cs, or until overridden (overrides look)
  - slug: cs_aim
    info:
      en: |-
        ```hsc
        (<void> cs_aim <ai> <boolean> <point_reference>)
        ```
        Actor aims at the point for the remainder of the cs, or until overridden (overrides look)
  - slug: cs_aim_player
    info:
      en: |-
        ```hsc
        (<void> cs_aim_player <boolean>)
        ```
        Actor aims at nearest player for the duration of the cs, or until overridden (overrides look)
  - slug: cs_aim_player
    info:
      en: |-
        ```hsc
        (<void> cs_aim_player <ai> <boolean>)
        ```
        Actor aims at nearest player for the duration of the cs, or until overridden (overrides look)
  - slug: cs_aim_object
    info:
      en: |-
        ```hsc
        (<void> cs_aim_object <boolean> <object>)
        ```
        Actor aims at the object for the duration of the cs, or until overridden (overrides look)
  - slug: cs_aim_object
    info:
      en: |-
        ```hsc
        (<void> cs_aim_object <ai> <boolean> <object>)
        ```
        Actor aims at the object for the duration of the cs, or until overridden (overrides look)
  - slug: cs_face
    info:
      en: |-
        ```hsc
        (<void> cs_face <boolean> <point_reference>)
        ```
        Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)
  - slug: cs_face
    info:
      en: |-
        ```hsc
        (<void> cs_face <ai> <boolean> <point_reference>)
        ```
        Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)
  - slug: cs_face_player
    info:
      en: |-
        ```hsc
        (<void> cs_face_player <boolean>)
        ```
        Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)
  - slug: cs_face_player
    info:
      en: |-
        ```hsc
        (<void> cs_face_player <ai> <boolean>)
        ```
        Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)
  - slug: cs_face_object
    info:
      en: |-
        ```hsc
        (<void> cs_face_object <boolean> <object>)
        ```
        Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)
  - slug: cs_face_object
    info:
      en: |-
        ```hsc
        (<void> cs_face_object <ai> <boolean> <object>)
        ```
        Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)
  - slug: cs_shoot
    info:
      en: |-
        ```hsc
        (<void> cs_shoot <boolean>)
        ```
        Actor is allowed to shoot at its target or not
  - slug: cs_shoot
    info:
      en: |-
        ```hsc
        (<void> cs_shoot <ai> <boolean>)
        ```
        Actor is allowed to shoot at its target or not
  - slug: cs_shoot
    info:
      en: |-
        ```hsc
        (<void> cs_shoot <boolean> <object>)
        ```
        Actor shoots at given target
  - slug: cs_shoot
    info:
      en: |-
        ```hsc
        (<void> cs_shoot <ai> <boolean> <object>)
        ```
        Actor shoots at given target
  - slug: cs_shoot_point
    info:
      en: |-
        ```hsc
        (<void> cs_shoot_point <boolean> <point_reference>)
        ```
        Actor shoots at given point
  - slug: cs_shoot_point
    info:
      en: |-
        ```hsc
        (<void> cs_shoot_point <ai> <boolean> <point_reference>)
        ```
        Actor shoots at given point
  - slug: cs_shoot_secondary_trigger
    info:
      en: |-
        ```hsc
        (<void> cs_shoot_secondary_trigger <boolean>)
        ```
        Actor uses secondary trigger whenever he shoots
  - slug: cs_shoot_secondary_trigger
    info:
      en: |-
        ```hsc
        (<void> cs_shoot_secondary_trigger <ai> <boolean>)
        ```
        Actor uses secondary trigger whenever he shoots
  - slug: cs_lower_weapon
    info:
      en: |-
        ```hsc
        (<void> cs_lower_weapon <boolean>)
        ```
        Actor keeps weapon lowered
  - slug: cs_lower_weapon
    info:
      en: |-
        ```hsc
        (<void> cs_lower_weapon <ai> <boolean>)
        ```
        Actor keeps weapon lowered
  - slug: cs_vehicle_speed
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_speed <real>)
        ```
        Set the speed at which the actor will drive a vehicle, expressed as a multiplier 0-1
  - slug: cs_vehicle_speed
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_speed <ai> <real>)
        ```
        Set the speed at which the actor will drive a vehicle, expressed as a multiplier 0-1
  - slug: cs_vehicle_speed_instantaneous
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_speed_instantaneous <real>)
        ```
        Set the instantaneous speed of the vehicle we're driving
  - slug: cs_vehicle_speed_instantaneous
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_speed_instantaneous <ai> <real>)
        ```
        Set the instantaneous speed of the vehicle we're driving
  - slug: cs_vehicle_boost
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_boost <boolean>)
        ```
        Enables or disables boost
  - slug: cs_vehicle_boost
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_boost <ai> <boolean>)
        ```
        Enables or disables boost
  - slug: cs_turn_sharpness
    info:
      en: |-
        ```hsc
        (<void> cs_turn_sharpness <boolean> <real>)
        ```
        Set the sharpness of a vehicle turn (values 0 -> 1). Only applicable to nondirectional flying vehicles (e.g. dropships)
  - slug: cs_turn_sharpness
    info:
      en: |-
        ```hsc
        (<void> cs_turn_sharpness <ai> <boolean> <real>)
        ```
        Set the sharpness of a vehicle turn (values 0 -> 1). Only applicable to nondirectional flying vehicles (e.g. dropships)
  - slug: cs_enable_pathfinding_failsafe
    info:
      en: |-
        ```hsc
        (<void> cs_enable_pathfinding_failsafe <boolean>)
        ```
        Actor blocks until pathfinding calls succeed
  - slug: cs_enable_pathfinding_failsafe
    info:
      en: |-
        ```hsc
        (<void> cs_enable_pathfinding_failsafe <ai> <boolean>)
        ```
        Actor blocks until pathfinding calls succeed
  - slug: cs_set_pathfinding_radius
    info:
      en: |-
        ```hsc
        (<void> cs_set_pathfinding_radius <real>)
        ```
        Sets the actor's pathfinding radius (this distance at which a destination is considered to have been reached) for the remainder of the command script
  - slug: cs_set_pathfinding_radius
    info:
      en: |-
        ```hsc
        (<void> cs_set_pathfinding_radius <ai> <real>)
        ```
        Sets the actor's pathfinding radius (this distance at which a destination is considered to have been reached) for the remainder of the command script
  - slug: cs_ignore_obstacles
    info:
      en: |-
        ```hsc
        (<void> cs_ignore_obstacles <boolean>)
        ```
        Actor does not avoid obstacles when true
  - slug: cs_ignore_obstacles
    info:
      en: |-
        ```hsc
        (<void> cs_ignore_obstacles <ai> <boolean>)
        ```
        Actor does not avoid obstacles when true
  - slug: cs_approach_stop
    info:
      en: |-
        ```hsc
        (<void> cs_approach_stop)
        ```
        Actor stops approaching
  - slug: cs_approach_stop
    info:
      en: |-
        ```hsc
        (<void> cs_approach_stop <ai>)
        ```
        Actor stops approaching
  - slug: cs_push_stance
    info:
      en: |-
        ```hsc
        (<void> cs_push_stance <string_id>)
        ```
        Actor pushes given stance during this command script
  - slug: cs_push_stance
    info:
      en: |-
        ```hsc
        (<void> cs_push_stance <ai> <string_id>)
        ```
        Actor pushes given stance during this command script
  - slug: cs_crouch
    info:
      en: |-
        ```hsc
        (<void> cs_crouch <boolean>)
        ```
        Actor crouches for the remainder of the command script, or until overridden
  - slug: cs_crouch
    info:
      en: |-
        ```hsc
        (<void> cs_crouch <ai> <boolean>)
        ```
        Actor crouches for the remainder of the command script, or until overridden
  - slug: cs_crouch
    info:
      en: |-
        ```hsc
        (<void> cs_crouch <boolean> <real>)
        ```
        Actor crouches / uncrouches, transitioning over the given number of seconds
  - slug: cs_crouch
    info:
      en: |-
        ```hsc
        (<void> cs_crouch <ai> <boolean> <real>)
        ```
        Actor crouches / uncrouches, transitioning over the given number of seconds
  - slug: cs_walk
    info:
      en: |-
        ```hsc
        (<void> cs_walk <boolean>)
        ```
        Actor walks for the remainder of the command script, or until overridden
  - slug: cs_walk
    info:
      en: |-
        ```hsc
        (<void> cs_walk <ai> <boolean>)
        ```
        Actor walks for the remainder of the command script, or until overridden
  - slug: cs_posture_set
    info:
      en: |-
        ```hsc
        (<void> cs_posture_set <string_id> <boolean>)
        ```
        Actor enters the given posture (enters immediately rather than plays the entry animation if argument is TRUE)
  - slug: cs_posture_set
    info:
      en: |-
        ```hsc
        (<void> cs_posture_set <ai> <string_id> <boolean>)
        ```
        Actor enters the given posture (enters immediately rather than plays the entry animation if argument is TRUE)
  - slug: cs_posture_exit
    info:
      en: |-
        ```hsc
        (<void> cs_posture_exit)
        ```
        Actor exits the posture it's in
  - slug: cs_posture_exit
    info:
      en: |-
        ```hsc
        (<void> cs_posture_exit <ai>)
        ```
        Actor exits the posture it's in
  - slug: cs_stow
    info:
      en: |-
        ```hsc
        (<void> cs_stow <boolean>)
        ```
        Actor stows its current weapon, based on the second bool variable
  - slug: cs_stow
    info:
      en: |-
        ```hsc
        (<void> cs_stow <ai> <boolean>)
        ```
        Actor stows its current weapon, based on the second bool variable
  - slug: cs_teleport
    info:
      en: |-
        ```hsc
        (<void> cs_teleport <point_reference> <point_reference>)
        ```
        Actor teleports to point1 facing point2
  - slug: cs_teleport
    info:
      en: |-
        ```hsc
        (<void> cs_teleport <ai> <point_reference> <point_reference>)
        ```
        Actor teleports to point1 facing point2
  - slug: cs_stop_custom_animation
    info:
      en: |-
        ```hsc
        (<void> cs_stop_custom_animation)
        ```
        Stop running a custom animation
  - slug: cs_stop_custom_animation
    info:
      en: |-
        ```hsc
        (<void> cs_stop_custom_animation <ai>)
        ```
        Stop running a custom animation
  - slug: cs_stop_sound
    info:
      en: |-
        ```hsc
        (<void> cs_stop_sound <sound>)
        ```
        Stops the specified impulse sound.
  - slug: cs_stop_sound
    info:
      en: |-
        ```hsc
        (<void> cs_stop_sound <ai> <sound>)
        ```
        Stops the specified impulse sound.
  - slug: cs_player_melee
    info:
      en: |-
        ```hsc
        (<void> cs_player_melee <long>)
        ```
        Actor performs player-specific melee
  - slug: cs_player_melee
    info:
      en: |-
        ```hsc
        (<void> cs_player_melee <ai> <boolean> <long>)
        ```
        Actor performs player-specific melee
  - slug: cs_melee_direction
    info:
      en: |-
        ```hsc
        (<void> cs_melee_direction <long>)
        ```
        Actor performs melee in provided direction (0= front, 1= back, 2= offhand, 3= tackle)
  - slug: cs_melee_direction
    info:
      en: |-
        ```hsc
        (<void> cs_melee_direction <ai> <boolean> <long>)
        ```
        Actor performs melee in provided direction (0= front, 1= back, 2= offhand, 3= tackle)
  - slug: cs_smash_direction
    info:
      en: |-
        ```hsc
        (<void> cs_smash_direction <long>)
        ```
        Actor performs smash in provided direction
  - slug: cs_smash_direction
    info:
      en: |-
        ```hsc
        (<void> cs_smash_direction <ai> <boolean> <long>)
        ```
        Actor performs smash in provided direction
  - slug: camera_control
    info:
      en: |-
        ```hsc
        (<void> camera_control <boolean>)
        ```
        toggles script control of the camera.
  - slug: camera_set
    info:
      en: |-
        ```hsc
        (<void> camera_set <cutscene_camera_point> <short>)
        ```
        moves the camera to the specified camera point over the specified number of ticks.
  - slug: camera_set_relative
    info:
      en: |-
        ```hsc
        (<void> camera_set_relative <cutscene_camera_point> <short> <object>)
        ```
        moves the camera to the specified camera point over the specified number of ticks (position is relative to the specified object).
  - slug: camera_set_animation
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation <animation_graph> <string_id>)
        ```
        begins a prerecorded camera animation.
  - slug: camera_set_animation_relative
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation_relative <animation_graph> <string_id> <unit> <cutscene_flag>)
        ```
        begins a prerecorded camera animation synchronized to unit relative to cutscene flag.
  - slug: camera_set_animation_with_speed
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation_with_speed <animation_graph> <string_id> <real>)
        ```
        begins a prerecorded camera animation.
  - slug: camera_set_animation_relative_with_speed
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation_relative_with_speed <animation_graph> <string_id> <unit> <cutscene_flag> <real>)
        ```
        begins a prerecorded camera animation synchronized to unit relative to cutscene flag.
  - slug: camera_set_animation_relative_with_speed_loop
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation_relative_with_speed_loop <animation_graph> <string_id> <unit> <cutscene_flag> <real> <boolean>)
        ```
        begins a prerecorded camera animation synchronized to unit relative to cutscene flag.
  - slug: camera_set_animation_relative_with_speed_loop_offset
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation_relative_with_speed_loop_offset <animation_graph> <string_id> <unit> <cutscene_flag> <real> <boolean> <real>)
        ```
        begins a prerecorded camera animation synchronized to unit relative to cutscene flag.
  - slug: camera_predict_resources_at_frame
    info:
      en: |-
        ```hsc
        (<void> camera_predict_resources_at_frame <animation_graph> <string_id> <unit> <cutscene_flag> <long>)
        ```
        predict resources at a frame in camera animation.
  - slug: camera_predict_resources_at_point
    info:
      en: |-
        ```hsc
        (<void> camera_predict_resources_at_point <cutscene_camera_point>)
        ```
        predict resources given a camera point
  - slug: camera_set_first_person
    info:
      en: |-
        ```hsc
        (<void> camera_set_first_person <unit>)
        ```
        makes the scripted camera follow a unit.
  - slug: camera_set_cinematic
    info:
      en: |-
        ```hsc
        (<void> camera_set_cinematic)
        ```
        makes the scripted camera follow the path of a cinematic scene.
  - slug: camera_set_cinematic_scene
    info:
      en: |-
        ```hsc
        (<void> camera_set_cinematic_scene <cinematic_scene_definition> <long> <cutscene_flag>)
        ```
        sets the scene, shot, and cutscene flag for the cinematic camera (NOTE: camera must be in cinematic mode by calling camera_set_cinematic).
  - slug: camera_place_relative
    info:
      en: |-
        ```hsc
        (<void> camera_place_relative <object>)
        ```
        all subsequent camera placement in sapien be marked as relative to this object
  - slug: camera_place_worldspace
    info:
      en: |-
        ```hsc
        (<void> camera_place_worldspace)
        ```
        all subsequent camera placement in sapien will be marked as worldspace
  - slug: camera_time
    info:
      en: |-
        ```hsc
        (<short> camera_time)
        ```
        returns the number of ticks remaining in the current camera interpolation.
  - slug: camera_set_field_of_view
    info:
      en: |-
        ```hsc
        (<void> camera_set_field_of_view <real> <short>)
        ```
        sets the field of view
  - slug: cinematic_camera_set_easing_in
    info:
      en: |-
        ```hsc
        (<void> cinematic_camera_set_easing_in <real> <real> <real> <real> <real> <real>)
        ```
        controls the camera easing from player position
  - slug: cinematic_camera_set_easing_out
    info:
      en: |-
        ```hsc
        (<void> cinematic_camera_set_easing_out <real>)
        ```
        controls the camera easing back to the player position
  - slug: cinematic_print
    info:
      en: |-
        ```hsc
        (<void> cinematic_print <string>)
        ```
        Print status lines for cinematic debugging
  - slug: camera_set_pan
    info:
      en: |-
        ```hsc
        (<void> camera_set_pan <cutscene_camera_point> <short>)
        ```
        moves the camera to the specified camera point over the specified number of ticks with a constant speed.
  - slug: camera_pan
    info:
      en: |-
        ```hsc
        (<void> camera_pan <cutscene_camera_point> <cutscene_camera_point> <short> <short> <real> <short> <real>)
        ```
        camera_pan <start point> <end point> <ticks> <ease-in ticks> <start velocity scale> <ease-out ticks> <end velocity scale>
  - slug: debug_camera_save
    info:
      en: |-
        ```hsc
        (<void> debug_camera_save)
        ```
        saves the camera position and facing to camera_<map_name>.txt
  - slug: debug_camera_load
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load)
        ```
        loads the saved camera position and facing from camera_<map_name>.txt
  - slug: debug_camera_save_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_save_name <string>)
        ```
        saves the camera position and facing to <name>_<map_name>.txt
  - slug: debug_camera_load_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load_name <string>)
        ```
        loads the camera position and facing from <name>_<map_name>.txt
  - slug: debug_camera_save_simple_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_save_simple_name <string>)
        ```
        saves the camera position and facing to camera_<name>.txt
  - slug: debug_camera_load_simple_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load_simple_name <string>)
        ```
        loads the camera position and facing from camera_<name>.txt
  - slug: debug_camera_load_text
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load_text <string>)
        ```
        loads the camera position and facing from a passed in string
  - slug: director_debug_camera
    info:
      en: |-
        ```hsc
        (<void> director_debug_camera <boolean>)
        ```
        enable/disable camera debugging
  - slug: director_print_camera_transform
    info:
      en: |-
        ```hsc
        (<void> director_print_camera_transform <long>)
        ```
        Spews camera transform for the given output user index. For remote tools.
  - slug: director_print_deterministic_camera_transform
    info:
      en: |-
        ```hsc
        (<void> director_print_deterministic_camera_transform <long>)
        ```
        Spews camera transform for the reticule for the given output user index. For remote tools.
  - slug: game_difficulty_get
    info:
      en: |-
        ```hsc
        (<game_difficulty> game_difficulty_get)
        ```
        returns the current difficulty setting, but lies to you and will never return easy, instead returning normal
  - slug: game_difficulty_get_real
    info:
      en: |-
        ```hsc
        (<game_difficulty> game_difficulty_get_real)
        ```
        returns the actual current difficulty setting without lying
  - slug: game_insertion_point_get
    info:
      en: |-
        ```hsc
        (<short> game_insertion_point_get)
        ```
        returns the number of the insertion point the map was started at
  - slug: pvs_set_object
    info:
      en: |-
        ```hsc
        (<void> pvs_set_object <object>)
        ```
        sets the specified object as the special place that activates everything it sees.
  - slug: pvs_set_camera
    info:
      en: |-
        ```hsc
        (<void> pvs_set_camera <cutscene_camera_point>)
        ```
        sets the specified cutscene camera point as the special place that activates everything it sees.
  - slug: pvs_clear
    info:
      en: |-
        ```hsc
        (<void> pvs_clear)
        ```
        removes the special place that activates everything it sees.
  - slug: pvs_reset
    info:
      en: |-
        ```hsc
        (<void> pvs_reset)
        ```
        forces pvs to empty then back to full.
  - slug: players_unzoom_all
    info:
      en: |-
        ```hsc
        (<void> players_unzoom_all)
        ```
        resets zoom levels on all players
  - slug: player_enable_input
    info:
      en: |-
        ```hsc
        (<void> player_enable_input <boolean>)
        ```
        toggle player input. the player can still free-look, but nothing else.
  - slug: player_disable_movement
    info:
      en: |-
        ```hsc
        (<void> player_disable_movement <boolean>)
        ```
        toggle player input. the look stick works, but nothing else.
  - slug: player_disable_weapon_pickup
    info:
      en: |-
        ```hsc
        (<void> player_disable_weapon_pickup <boolean>)
        ```
        enable/disable all players' ability to pick up weapons
  - slug: player_night_vision_on
    info:
      en: |-
        ```hsc
        (<boolean> player_night_vision_on)
        ```
        returns true if any player has night vision on
  - slug: unit_night_vision_on
    info:
      en: |-
        ```hsc
        (<boolean> unit_night_vision_on <unit>)
        ```
        returns true if the unit has a flashlight on
  - slug: player_active_camouflage_on
    info:
      en: |-
        ```hsc
        (<boolean> player_active_camouflage_on)
        ```
        returns true if any player is active camouflaged
  - slug: player_camera_control
    info:
      en: |-
        ```hsc
        (<boolean> player_camera_control <boolean>)
        ```
        enables/disables camera control globally
  - slug: player_action_test_reset
    info:
      en: |-
        ```hsc
        (<void> player_action_test_reset)
        ```
        resets the player action test state so that all tests will return false.
  - slug: player_action_test_primary_trigger
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_primary_trigger)
        ```
        returns true if any player has used primary trigger since the last call to (player_action_test_reset).
  - slug: player_action_test_grenade_trigger
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_grenade_trigger)
        ```
        returns true if any player has used grenade trigger since the last call to (player_action_test_reset).
  - slug: player_action_test_vision_trigger
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_vision_trigger)
        ```
        returns true if any player has used vision trigger since the last call to (player_action_test_reset).
  - slug: player_action_test_rotate_weapons
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_rotate_weapons)
        ```
        returns true if any player has hit the rotate-weapon button since the last call to (player_action_test_reset).
  - slug: player_action_test_rotate_grenades
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_rotate_grenades)
        ```
        returns true if any player has hit the rotate-grenades button since the last call to (player_action_test_reset).
  - slug: player_action_test_jump
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_jump)
        ```
        returns true if any player has hit the jump button since the last call to (player_action_test_reset).
  - slug: player_action_test_equipment
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_equipment)
        ```
        returns true if any player has hit the equipment button since the last call to (player_action_test_reset).
  - slug: player_action_test_context_primary
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_context_primary)
        ```
        returns true if any player has hit the reload button since the last call to (player_action_test_reset).
  - slug: player_action_test_vehicle_trick_primary
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_vehicle_trick_primary)
        ```
        returns true if any player has hit the vehicle trick button on the primary trigger side since the last call to (player_action_test_reset).
  - slug: player_action_test_vehicle_trick_secondary
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_vehicle_trick_secondary)
        ```
        returns true if any player has hit the vehicle trick button on the grenade trigger side since the last call to (player_action_test_reset).
  - slug: player_action_test_melee
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_melee)
        ```
        returns true if any player has hit the melee button since the last call to (player_action_test_reset).
  - slug: player_action_test_action
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_action)
        ```
        returns true if any player has hit the action key since the last call to (player_action_test_reset).
  - slug: player_action_test_accept
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_accept)
        ```
        returns true if any player has hit accept since the last call to (player_action_test_reset).
  - slug: player_action_test_cancel
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_cancel)
        ```
        returns true if any player has hit cancel key since the last call to (player_action_test_reset).
  - slug: player_action_test_look_relative_up
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_up)
        ```
        returns true if any player has looked up since the last call to (player_action_test_reset).
  - slug: player_action_test_look_relative_down
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_down)
        ```
        returns true if any player has looked down since the last call to (player_action_test_reset).
  - slug: player_action_test_look_relative_left
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_left)
        ```
        returns true if any player has looked left since the last call to (player_action_test_reset).
  - slug: player_action_test_look_relative_right
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_right)
        ```
        returns true if any player has looked right since the last call to (player_action_test_reset).
  - slug: player_action_test_look_relative_all_directions
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_all_directions)
        ```
        returns true if any player has looked up, down, left, and right since the last call to (player_action_test_reset).
  - slug: player_action_test_move_relative_all_directions
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_move_relative_all_directions)
        ```
        returns true if any player has moved forward, backward, left, and right since the last call to (player_action_test_reset).
  - slug: player_action_test_cinematic_skip
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_cinematic_skip)
        ```
        returns true if any player has pressed the cinematic skip button (player_action_test_reset).
  - slug: player_action_test_start
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_start)
        ```
        returns true if any player has pressed the start button since the last call to (player_action_test_reset).
  - slug: player_action_test_back
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_back)
        ```
        returns true if any player has pressed the back button since the last call to (player_action_test_reset).
  - slug: player_action_test_dpad_up
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_dpad_up)
        ```
        returns true if any player has pressed dpad up since the last call to (player_action_test_reset).
  - slug: player_action_test_dpad_down
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_dpad_down)
        ```
        returns true if any player has pressed dpad down since the last call to (player_action_test_reset).
  - slug: player_action_test_dpad_left
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_dpad_left)
        ```
        returns true if any player has pressed dpad left since the last call to (player_action_test_reset).
  - slug: player_action_test_dpad_right
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_dpad_right)
        ```
        returns true if any player has pressed dpad right since the last call to (player_action_test_reset).
  - slug: unit_action_test_reset
    info:
      en: |-
        ```hsc
        (<void> unit_action_test_reset <player>)
        ```
        resets the player action test state so that all tests will return false.
  - slug: unit_action_test_primary_trigger
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_primary_trigger <player>)
        ```
        returns true if any player has used primary trigger since the last call to (player_action_test_reset).
  - slug: unit_action_test_grenade_trigger
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_grenade_trigger <player>)
        ```
        returns true if any player has used grenade trigger since the last call to (player_action_test_reset).
  - slug: unit_action_test_vision_trigger
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_vision_trigger <player>)
        ```
        returns true if any player has used vision trigger since the last call to (player_action_test_reset).
  - slug: unit_action_test_rotate_weapons
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_rotate_weapons <player>)
        ```
        returns true if any player has hit the rotate-weapon button since the last call to (player_action_test_reset).
  - slug: unit_action_test_rotate_grenades
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_rotate_grenades <player>)
        ```
        returns true if any player has hit the rotate-grenades button since the last call to (player_action_test_reset).
  - slug: unit_action_test_jump
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_jump <player>)
        ```
        returns true if any player has hit the jump button since the last call to (player_action_test_reset).
  - slug: unit_action_test_equipment
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_equipment <player>)
        ```
        returns true if any player has hit the equipment button since the last call to (player_action_test_reset).
  - slug: unit_action_test_context_primary
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_context_primary <player>)
        ```
        returns true if any player has hit the reload button since the last call to (player_action_test_reset).
  - slug: unit_action_test_vehicle_trick_primary
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_vehicle_trick_primary <player>)
        ```
        returns true if any player has hit the vehicle trick button on the primary trigger side since the last call to (player_action_test_reset).
  - slug: unit_action_test_vehicle_trick_secondary
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_vehicle_trick_secondary <player>)
        ```
        returns true if any player has hit the vehicle trick button on the grenade trigger side since the last call to (player_action_test_reset).
  - slug: unit_action_test_melee
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_melee <player>)
        ```
        returns true if any player has hit the melee button since the last call to (player_action_test_reset).
  - slug: unit_action_test_action
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_action <player>)
        ```
        returns true if any player has hit the action key since the last call to (player_action_test_reset).
  - slug: unit_action_test_accept
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_accept <player>)
        ```
        returns true if any player has hit accept since the last call to (player_action_test_reset).
  - slug: unit_action_test_cancel
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_cancel <player>)
        ```
        returns true if any player has hit cancel key since the last call to (player_action_test_reset).
  - slug: unit_action_test_look_relative_up
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_look_relative_up <player>)
        ```
        returns true if any player has looked up since the last call to (player_action_test_reset).
  - slug: unit_action_test_look_relative_down
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_look_relative_down <player>)
        ```
        returns true if any player has looked down since the last call to (player_action_test_reset).
  - slug: unit_action_test_look_relative_left
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_look_relative_left <player>)
        ```
        returns true if any player has looked left since the last call to (player_action_test_reset).
  - slug: unit_action_test_look_relative_right
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_look_relative_right <player>)
        ```
        returns true if any player has looked right since the last call to (player_action_test_reset).
  - slug: unit_action_test_look_relative_all_directions
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_look_relative_all_directions <player>)
        ```
        returns true if any player has looked up, down, left, and right since the last call to (player_action_test_reset).
  - slug: unit_action_test_move_relative_all_directions
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_move_relative_all_directions <player>)
        ```
        returns true if any player has moved forward, backward, left, and right since the last call to (player_action_test_reset).
  - slug: unit_action_test_cinematic_skip
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_cinematic_skip <player>)
        ```
        returns true if any player has pressed the cinematic skip button (player_action_test_reset).
  - slug: unit_action_test_start
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_start <player>)
        ```
        returns true if any player has pressed the start button since the last call to (player_action_test_reset).
  - slug: unit_action_test_back
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_back <player>)
        ```
        returns true if any player has pressed the back button since the last call to (player_action_test_reset).
  - slug: unit_action_test_dpad_up
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_dpad_up <player>)
        ```
        returns true if any player has pressed dpad up since the last call to (player_action_test_reset).
  - slug: unit_action_test_dpad_down
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_dpad_down <player>)
        ```
        returns true if any player has pressed dpad down since the last call to (player_action_test_reset).
  - slug: unit_action_test_dpad_left
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_dpad_left <player>)
        ```
        returns true if any player has pressed dpad left since the last call to (player_action_test_reset).
  - slug: unit_action_test_dpad_right
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_dpad_right <player>)
        ```
        returns true if any player has pressed dpad right since the last call to (player_action_test_reset).
  - slug: unit_confirm_message
    info:
      en: |-
        ```hsc
        (<void> unit_confirm_message <player>)
        ```
        Locks the accept button until the player presses accept
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_confirm_cancel_message
    info:
      en: |-
        ```hsc
        (<void> unit_confirm_cancel_message <player>)
        ```
        Locks the cancel button until the player presses cancel
    net_safe_raw: unknown, assumed unsafe
  - slug: unit_enable_soft_ping_region
    info:
      en: |-
        ```hsc
        (<void> unit_enable_soft_ping_region <unit> <damage_region> <boolean>)
        ```
        Enable/disable pain screen damage weight outputs on all units
  - slug: unit_print_soft_ping_regions
    info:
      en: |-
        ```hsc
        (<void> unit_print_soft_ping_regions <unit>)
        ```
        Print the pain screen state on all the units
  - slug: player0_looking_up
    info:
      en: |-
        ```hsc
        (<boolean> player0_looking_up)
        ```
        true if the first player is looking up
  - slug: player0_looking_down
    info:
      en: |-
        ```hsc
        (<boolean> player0_looking_down)
        ```
        true if the first player is looking down
  - slug: player_set_pitch
    info:
      en: |-
        ```hsc
        (<void> player_set_pitch <player> <real> <long>)
        ```
        sets up player look up test
  - slug: player_has_female_voice
    info:
      en: |-
        ```hsc
        (<boolean> player_has_female_voice <player>)
        ```
        returns true if the player has selected the female voice option
  - slug: player_action_test_lookstick_forward
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_lookstick_forward)
        ```
        true if the first player pushed forward on lookstick
  - slug: player_action_test_lookstick_backward
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_lookstick_backward)
        ```
        true if the first player pushed backward on lookstick
  - slug: debug_teleport_player
    info:
      en: |-
        ```hsc
        (<void> debug_teleport_player <unit> <unit>)
        ```
        for testing: teleports one player to another's location
  - slug: scenario_content_status_reload
    info:
      en: |-
        ```hsc
        (<void> scenario_content_status_reload)
        ```
        looks for local tags on disk if they are not already loaded.
  - slug: scenario_content_status_force_local
    info:
      en: |-
        ```hsc
        (<void> scenario_content_status_force_local)
        ```
        forces game to use local tags if available.
  - slug: scenario_content_status_force_content
    info:
      en: |-
        ```hsc
        (<void> scenario_content_status_force_content)
        ```
        forces game to use content tags.
  - slug: scenario_content_status_force_clear
    info:
      en: |-
        ```hsc
        (<void> scenario_content_status_force_clear)
        ```
        clears any force on the content status system.
  - slug: map_reset
    info:
      en: |-
        ```hsc
        (<void> map_reset)
        ```
        starts the map from the beginning.
  - slug: map_reset_random
    info:
      en: |-
        ```hsc
        (<void> map_reset_random)
        ```
        starts the map from the beginning with a new random seed.
  - slug: switch_zone_set
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> switch_zone_set <zone_set>)
        ```
        switches to a different zone set
  - slug: scenario_print_zone_sets
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> scenario_print_zone_sets)
        ```
        prints out the names of all the zone sets.
  - slug: scenario_print_current_zone_set
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> scenario_print_current_zone_set)
        ```
        brings out the names of all the bsps in the current zone set.
  - slug: current_zone_set
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<long> current_zone_set)
        ```
        returns the current zone set
  - slug: current_zone_set_fully_active
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<long> current_zone_set_fully_active)
        ```
        returns the current zone set
  - slug: switch_map_and_zone_set
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> switch_map_and_zone_set <string> <string>)
        ```
        switches to a different scenario and zone set
  - slug: crash
    info:
      en: |-
        ```hsc
        (<void> crash <string>)
        ```
        crashes (for debugging).
  - slug: version
    info:
      en: |-
        ```hsc
        (<void> version)
        ```
        prints the build version.
  - slug: status
    info:
      en: |-
        ```hsc
        (<void> status)
        ```
        prints the value of all global status variables.
  - slug: record_movie
    info:
      en: |-
        ```hsc
        (<void> record_movie <short> <real> <short> <short>)
        ```
        <frame rate> <seconds> <width> <height>
  - slug: record_movie_distributed
    info:
      en: |-
        ```hsc
        (<void> record_movie_distributed <short> <long> <short> <long> <long>)
        ```
        <frame rate> <seconds> <screen size> <mod count> <mod index>
  - slug: screenshot
    info:
      en: |-
        ```hsc
        (<void> screenshot <string>)
        ```
        takes a screenshot and saves as <name>.tif
  - slug: screenshot_debug
    info:
      en: |-
        ```hsc
        (<void> screenshot_debug)
        ```
        takes a screenshot and saves as <name>.tif
  - slug: screenshot_big
    info:
      en: |-
        ```hsc
        (<void> screenshot_big <short> <string>)
        ```
        takes an NxN multiple-page screenshot and saves as <name>.tif
  - slug: screenshot_big_raw
    info:
      en: |-
        ```hsc
        (<void> screenshot_big_raw <short> <string>)
        ```
        takes an NxN multiple-page screenshot and saves as an HDR <name>.tif
  - slug: screenshot_size
    info:
      en: |-
        ```hsc
        (<void> screenshot_size <short> <short> <string>)
        ```
        takes a <width> x <height> screenshot and saves as an HDR <name>.tif
  - slug: screenshot_simple
    info:
      en: |-
        ```hsc
        (<void> screenshot_simple <string>)
        ```
        takes a simple screenshot and saves as <name>.tif
  - slug: screenshot_cubemap
    info:
      en: |-
        ```hsc
        (<void> screenshot_cubemap <string>)
        ```
        takes a cubemap screenshot and saves as <name>.tif
  - slug: screenshot_webmap
    info:
      en: |-
        ```hsc
        (<void> screenshot_webmap <string>)
        ```
        takes two special screenshots and saves them, along with the camera information, as <name>.tif, <name>_secondary.tif and <name>_camera.txt
  - slug: cubemap_dynamic_generate
    info:
      en: |-
        ```hsc
        (<void> cubemap_dynamic_generate)
        ```
        generates a dynamic cubemap and saves in the cubemaps directory
  - slug: object_snapshot
    info:
      en: |-
        ```hsc
        (<void> object_snapshot <long> <string>)
        ```
        takes a set of snapshot of object and saves as <snapshot\name>.tif
  - slug: structure_instance_snapshot
    info:
      en: |-
        ```hsc
        (<void> structure_instance_snapshot <long>)
        ```
        takes snapshot of all the instances in this bsp
  - slug: object_thumbnail
    info:
      en: |-
        ```hsc
        (<void> object_thumbnail <string> <string> <string>)
        ```
        takes snapshots of objects to be used as thumnail previews
  - slug: main_menu
    info:
      en: |-
        ```hsc
        (<void> main_menu)
        ```
        goes back to the main menu
  - slug: main_halt
    info:
      en: |-
        ```hsc
        (<void> main_halt <string>)
        ```
        goes to a halted pregame state
  - slug: map_name
    info:
      en: |-
        ```hsc
        (<void> map_name <string>)
        ```
        the same as game_start: launches a game for debugging purposes
  - slug: game_multiplayer
    info:
      en: |-
        ```hsc
        (<void> game_multiplayer <string>)
        ```
        debug map launching: sets the multiplayer engine for the next map.
  - slug: game_campaign
    info:
      en: |-
        ```hsc
        (<void> game_campaign)
        ```
        debug map launching: sets the next map to run in campaign mode.
  - slug: game_survival
    info:
      en: |-
        ```hsc
        (<void> game_survival)
        ```
        debug map launching: sets the next map to run in survival mode.
  - slug: game_player_count
    info:
      en: |-
        ```hsc
        (<void> game_player_count <long>)
        ```
        debug map launching: sets the number of splitscreen players for the next map; does NOT set game mode (campaign vs. multiplayer).
  - slug: game_set_variant
    info:
      en: |-
        ```hsc
        (<void> game_set_variant <string>)
        ```
        Launches a game variant a on a map
  - slug: game_splitscreen
    info:
      en: |-
        ```hsc
        (<void> game_splitscreen <long>)
        ```
        debug map launching: sets the number of multiplayer splitscreen players for the next map.
  - slug: game_difficulty
    info:
      en: |-
        ```hsc
        (<void> game_difficulty <game_difficulty>)
        ```
        debug map launching: sets the difficulty of the next map.
  - slug: game_active_skulls
    info:
      en: |-
        ```hsc
        (<void> game_active_skulls <long>)
        ```
        debug map launching: sets the active skulls of the next map.
  - slug: game_coop_players
    info:
      en: |-
        ```hsc
        (<void> game_coop_players <long>)
        ```
        debug map launching: sets the number of coop players for the next map.
  - slug: game_initial_zone_set
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> game_initial_zone_set <string>)
        ```
        debug map launching: sets the initial bsp for the next map.
  - slug: game_tick_rate
    info:
      en: |-
        ```hsc
        (<void> game_tick_rate <long>)
        ```
        debug map launching: sets the tick rate for the next map.
  - slug: game_start
    info:
      en: |-
        ```hsc
        (<void> game_start <string>)
        ```
        debug map launching: starts a game on the specified map.
  - slug: game_start_when_ready
    info:
      en: |-
        ```hsc
        (<void> game_start_when_ready)
        ```
        nicely starts the current game once the pregame lobby is stable
  - slug: game_start_when_joined
    info:
      en: |-
        ```hsc
        (<void> game_start_when_joined <long>)
        ```
        nicely starts a game when the specified number of users are in the lobby
  - slug: game_rate
    info:
      en: |-
        ```hsc
        (<void> game_rate <real> <real> <real>)
        ```
        changes game update rate (DANGER: only use if you know what you're doing!)
  - slug: texture_cache_flush
    info:
      en: |-
        ```hsc
        (<void> texture_cache_flush)
        ```
        don't make me kick your ass
  - slug: geometry_cache_flush
    info:
      en: |-
        ```hsc
        (<void> geometry_cache_flush)
        ```
        we fear change
  - slug: sound_cache_flush
    info:
      en: |-
        ```hsc
        (<void> sound_cache_flush)
        ```
        i'm a rebel!
  - slug: animation_cache_flush
    info:
      en: |-
        ```hsc
        (<void> animation_cache_flush)
        ```
        it's just sooooo wrong
  - slug: font_cache_flush
    info:
      en: |-
        ```hsc
        (<void> font_cache_flush)
        ```
  - slug: language_set
    info:
      en: |-
        ```hsc
        (<void> language_set <string>)
        ```
        change the language for localization
  - slug: texture_cache_test_malloc
    info:
      en: |-
        ```hsc
        (<void> texture_cache_test_malloc)
        ```
  - slug: debug_memory
    info:
      en: |-
        ```hsc
        (<void> debug_memory)
        ```
        dumps memory leaks.
  - slug: debug_memory_by_file
    info:
      en: |-
        ```hsc
        (<void> debug_memory_by_file)
        ```
        dumps memory leaks by source file.
  - slug: debug_memory_for_file
    info:
      en: |-
        ```hsc
        (<void> debug_memory_for_file <string>)
        ```
        dumps memory leaks from the specified source file.
  - slug: debug_tags
    info:
      en: |-
        ```hsc
        (<void> debug_tags)
        ```
        writes all memory being used by tag files into tag_memory_dump.txt
  - slug: debug_single_tag
    info:
      en: |-
        ```hsc
        (<void> debug_single_tag)
        ```
        inspect a single tag for programmer within visual studio
  - slug: tags_verify_all
    info:
      en: |-
        ```hsc
        (<void> tags_verify_all)
        ```
        verifies usage of infidel fields is correct
  - slug: trace_next_frame
    info:
      en: |-
        ```hsc
        (<void> trace_next_frame <long>)
        ```
        creates a tracedump of the next frame
  - slug: trace_next_frame_to_file
    info:
      en: |-
        ```hsc
        (<void> trace_next_frame_to_file <long> <string>)
        ```
        creates a tracedump of the next frame in a specific file
  - slug: trace_tick
    info:
      en: |-
        ```hsc
        (<void> trace_tick <long>)
        ```
        creates a tracedump of a specific game tick
  - slug: collision_log_enable
    info:
      en: |-
        ```hsc
        (<void> collision_log_enable <boolean>)
        ```
        enables or disables collision logging.
  - slug: damage_control_get
    info:
      en: |-
        ```hsc
        (<void> damage_control_get <string>)
        ```
        gets a damage control setting by string
  - slug: damage_control_set
    info:
      en: |-
        ```hsc
        (<void> damage_control_set <string> <boolean>)
        ```
        sets a damage control setting by string
  - slug: ai_lines
    info:
      en: |-
        ```hsc
        (<void> ai_lines)
        ```
        cycles through AI line-spray modes
  - slug: ai_dialogue_break_on_vocalization
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_break_on_vocalization <string_id>)
        ```
        break when the following vocalization is chosen for utterance
  - slug: fade_in
    info:
      en: |-
        ```hsc
        (<void> fade_in <real> <real> <real> <short>)
        ```
        does a screen fade in from a particular color
  - slug: fade_out
    info:
      en: |-
        ```hsc
        (<void> fade_out <real> <real> <real> <short>)
        ```
        does a screen fade out to a particular color
  - slug: fade_in_for_player
    info:
      en: |-
        ```hsc
        (<void> fade_in_for_player <player>)
        ```
        fade in a player's screen from black
  - slug: fade_out_for_player
    info:
      en: |-
        ```hsc
        (<void> fade_out_for_player <player>)
        ```
        fade out a player's screen to black
  - slug: cinematic_tag_fade_out_from_game
    info:
      en: |-
        ```hsc
        (<short> cinematic_tag_fade_out_from_game <string_id>)
        ```
        executes the fade settings setup in the cinematics tag for fading out from the game
  - slug: cinematic_tag_fade_in_to_cinematic
    info:
      en: |-
        ```hsc
        (<short> cinematic_tag_fade_in_to_cinematic <string_id>)
        ```
        executes the fade settings setup in the cinematics tag for fading in to the cinematic
  - slug: cinematic_tag_fade_out_from_cinematic
    info:
      en: |-
        ```hsc
        (<short> cinematic_tag_fade_out_from_cinematic <string_id>)
        ```
        executes the fade settings setup in the cinematics tag for fading out from the cinematic
  - slug: cinematic_tag_fade_in_to_game
    info:
      en: |-
        ```hsc
        (<short> cinematic_tag_fade_in_to_game <string_id>)
        ```
        executes the fade settings setup in the cinematics tag for fading in to the game
  - slug: cinematic_transition_fade_out_from_game
    info:
      en: |-
        ```hsc
        (<short> cinematic_transition_fade_out_from_game <cinematic_transition_definition>)
        ```
        executes the fade settings setup in the cinematic transition for fading out from the game
  - slug: cinematic_transition_fade_in_to_cinematic
    info:
      en: |-
        ```hsc
        (<short> cinematic_transition_fade_in_to_cinematic <cinematic_transition_definition>)
        ```
        executes the fade settings setup in the cinematic transition for fading in to the cinematic
  - slug: cinematic_transition_fade_out_from_cinematic
    info:
      en: |-
        ```hsc
        (<short> cinematic_transition_fade_out_from_cinematic <cinematic_transition_definition>)
        ```
        executes the fade settings setup in the cinematic transition for fading out from the cinematic
  - slug: cinematic_transition_fade_in_to_game
    info:
      en: |-
        ```hsc
        (<short> cinematic_transition_fade_in_to_game <cinematic_transition_definition>)
        ```
        executes the fade settings setup in the cinematic transition for fading in to the game
  - slug: cinematic_run_script_by_name
    info:
      en: |-
        ```hsc
        (<void> cinematic_run_script_by_name <string_id>)
        ```
        runs a cinematic script by name
  - slug: cinematic_start
    info:
      en: |-
        ```hsc
        (<void> cinematic_start)
        ```
        initializes game to start a cinematic (interruptive) cutscene
  - slug: cinematic_stop
    info:
      en: |-
        ```hsc
        (<void> cinematic_stop)
        ```
        initializes the game to end a cinematic (interruptive) cutscene
  - slug: cinematic_skip_start_internal
    info:
      en: |-
        ```hsc
        (<void> cinematic_skip_start_internal)
        ```
  - slug: cinematic_skip_stop_internal
    info:
      en: |-
        ```hsc
        (<void> cinematic_skip_stop_internal)
        ```
  - slug: cinematic_show_letterbox
    info:
      en: |-
        ```hsc
        (<void> cinematic_show_letterbox <boolean>)
        ```
        sets or removes the letterbox bars
  - slug: cinematic_show_letterbox_immediate
    info:
      en: |-
        ```hsc
        (<void> cinematic_show_letterbox_immediate <boolean>)
        ```
        sets or removes the letterbox bars
  - slug: cinematic_set_title
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_title <cutscene_title>)
        ```
        activates the chapter title
  - slug: cinematic_set_title_delayed
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_title_delayed <cutscene_title> <real>)
        ```
        activates the chapter title, delayed by <real> seconds
  - slug: cinematic_suppress_bsp_object_creation
    info:
      en: |-
        ```hsc
        (<void> cinematic_suppress_bsp_object_creation <boolean>)
        ```
        suppresses or enables the automatic creation of objects during cutscenes due to a bsp switch
  - slug: cinematic_subtitle
    info:
      en: |-
        ```hsc
        (<void> cinematic_subtitle <string_id> <real>)
        ```
        displays the named subtitle for <real> seconds
  - slug: cinematic_set
    info:
      en: |-
        ```hsc
        (<void> cinematic_set <cinematic_definition>)
        ```
        sets the cinematic name for the current cinematic.
  - slug: cinematic_set_shot
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_shot <cinematic_scene_definition> <long>)
        ```
        sets the scene and shot for the current cinematic.
  - slug: cinematic_get_shot
    info:
      en: |-
        ```hsc
        (<void> cinematic_get_shot)
        ```
        Print the stored scene and shot information to the screen
  - slug: cinematic_set_early_exit
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_early_exit <long>)
        ```
        Used to store the state of skippable cinematics
  - slug: cinematic_get_early_exit
    info:
      en: |-
        ```hsc
        (<long> cinematic_get_early_exit)
        ```
        Used to retrieve the state of skippable cinematics
  - slug: cinematic_set_active_camera
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_active_camera <string_id>)
        ```
        Used to change the rasterizer to display one of the texture cameras
  - slug: cinematic_object_create
    info:
      en: |-
        ```hsc
        (<void> cinematic_object_create <string_id>)
        ```
        Creates an object for use by cinematics
  - slug: cinematic_object_create_cinematic_anchor
    info:
      en: |-
        ```hsc
        (<void> cinematic_object_create_cinematic_anchor <cutscene_flag>)
        ```
        Creates a cinematic anchor object for use by cinematics
  - slug: cinematic_object_destroy
    info:
      en: |-
        ```hsc
        (<void> cinematic_object_destroy <string_id>)
        ```
        Destroys an object created by cinematic_object_create
  - slug: cinematic_objects_destroy_all
    info:
      en: |-
        ```hsc
        (<void> cinematic_objects_destroy_all)
        ```
        Destroys all objects created by cinematic_object_create
  - slug: cinematic_destroy
    info:
      en: |-
        ```hsc
        (<void> cinematic_destroy)
        ```
        Releases everything created by the cinematics system
  - slug: cinematic_in_progress
    info:
      en: |-
        ```hsc
        (<boolean> cinematic_in_progress)
        ```
        Tests if a cinematic is in progress
  - slug: cinematic_can_be_skipped
    info:
      en: |-
        ```hsc
        (<boolean> cinematic_can_be_skipped)
        ```
        Tests if a cinematic can be skipped
  - slug: cinematic_clips_initialize_for_shot
    info:
      en: |-
        ```hsc
        (<void> cinematic_clips_initialize_for_shot <long>)
        ```
        intializes the cinematic clip planes for the given shot of the current cinematic
  - slug: cinematic_clips_destroy
    info:
      en: |-
        ```hsc
        (<void> cinematic_clips_destroy)
        ```
        destroys any existing cinematic clip planes for the current cinematic
  - slug: cinematic_lights_initialize_for_shot
    info:
      en: |-
        ```hsc
        (<void> cinematic_lights_initialize_for_shot <long>)
        ```
        intializes the cinematic lighting for the given shot of the current cinematic
  - slug: cinematic_lights_destroy
    info:
      en: |-
        ```hsc
        (<void> cinematic_lights_destroy)
        ```
        destroys any existing cinematic lights for the current cinematic
  - slug: cinematic_lights_destroy_shot
    info:
      en: |-
        ```hsc
        (<void> cinematic_lights_destroy_shot)
        ```
        destroys any non-persistent existing cinematic lights for the current shot
  - slug: cinematic_light_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_light_object <object> <string_id> <cinematic_lightprobe> <cutscene_camera_point>)
        ```
        attaches cinematic lights to <object> at <marker> using scenario cinematic lighting palette entry <scenario-cinematic-lighting-name> from point of view of camera reference <camera>
  - slug: cinematic_light_object_off
    info:
      en: |-
        ```hsc
        (<void> cinematic_light_object_off <object>)
        ```
        Turn off cinematic lighting for the object.
  - slug: cinematic_lighting_rebuild_all
    info:
      en: |-
        ```hsc
        (<void> cinematic_lighting_rebuild_all)
        ```
        Rebuild all cinematic lighting (SH only)
  - slug: cinematic_lighting_update_dynamic_light_direction
    info:
      en: |-
        ```hsc
        (<void> cinematic_lighting_update_dynamic_light_direction <string> <long> <real> <real> <real>)
        ```
        Updates the direction of a loaded cinematic dynamic light
  - slug: cinematic_lighting_update_vmf_light
    info:
      en: |-
        ```hsc
        (<void> cinematic_lighting_update_vmf_light <string> <real> <real> <real> <real> <real> <real> <real>)
        ```
        Updates the vmf light
  - slug: cinematic_lighting_update_analytical_light
    info:
      en: |-
        ```hsc
        (<void> cinematic_lighting_update_analytical_light <string> <real> <real> <real> <real> <real> <real>)
        ```
        Updates the analytical light
  - slug: cinematic_lighting_update_ambient_light
    info:
      en: |-
        ```hsc
        (<void> cinematic_lighting_update_ambient_light <string> <real> <real> <real> <real>)
        ```
        Updates the ambient light
  - slug: cinematic_lighting_update_scales
    info:
      en: |-
        ```hsc
        (<void> cinematic_lighting_update_scales <string> <real> <real> <real> <real>)
        ```
        Updates the weights
  - slug: cinematic_object_get
    info:
      en: |-
        ```hsc
        (<object> cinematic_object_get <string_id>)
        ```
        Returns an object created by cinematic_object_create
  - slug: cinematic_unit_get
    info:
      en: |-
        ```hsc
        (<unit> cinematic_unit_get <string_id>)
        ```
        Returns a unit created by cinematic_object_create
  - slug: cinematic_weapon_get
    info:
      en: |-
        ```hsc
        (<weapon> cinematic_weapon_get <string_id>)
        ```
        Returns a weapon created by cinematic_object_create
  - slug: cinematic_reset
    info:
      en: |-
        ```hsc
        (<void> cinematic_reset)
        ```
        Resets the cinematics internal state
  - slug: camera_set_briefing
    info:
      en: |-
        ```hsc
        (<void> camera_set_briefing <boolean>)
        ```
        Used for briefing cinematics
  - slug: cinematic_tag_reference_get_cinematic
    info:
      en: |-
        ```hsc
        (<cinematic_definition> cinematic_tag_reference_get_cinematic <long>)
        ```
        Retrieve a cinematic tag from the cinematic system
  - slug: cinematic_tag_reference_get_scene
    info:
      en: |-
        ```hsc
        (<cinematic_scene_definition> cinematic_tag_reference_get_scene <long>)
        ```
        Retrieve a cinematic tag from the cinematic system
  - slug: cinematic_tag_reference_get_effect
    info:
      en: |-
        ```hsc
        (<effect> cinematic_tag_reference_get_effect <long> <long> <long> <long>)
        ```
        Retrieve an effect tag from the cinematic system
  - slug: cinematic_tag_reference_get_dialogue
    info:
      en: |-
        ```hsc
        (<sound> cinematic_tag_reference_get_dialogue <long> <long> <long> <long>)
        ```
        Retrieve a sound tag from the cinematic system
  - slug: cinematic_tag_reference_get_music
    info:
      en: |-
        ```hsc
        (<sound> cinematic_tag_reference_get_music <long> <long> <long> <long>)
        ```
        Retrieve a sound tag from the cinematic system
  - slug: cinematic_tag_reference_get_music_looping
    info:
      en: |-
        ```hsc
        (<looping_sound> cinematic_tag_reference_get_music_looping <long> <long> <long> <long>)
        ```
        Retrieve a looping sound tag from the cinematic system
  - slug: cinematic_tag_reference_get_animation
    info:
      en: |-
        ```hsc
        (<animation_graph> cinematic_tag_reference_get_animation <long> <long> <long>)
        ```
        Retrieve a looping sound tag from the cinematic system
  - slug: cinematic_scripting_object_coop_flags_valid
    info:
      en: |-
        ```hsc
        (<boolean> cinematic_scripting_object_coop_flags_valid <long> <long>)
        ```
        Evaluate if a cinematic object should be displayed for the current coop flags
  - slug: cinematic_scripting_fade_out
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_fade_out <real> <real> <real> <short>)
        ```
        Fade out at the end of the cinematic
  - slug: cinematic_scripting_create_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_object <long> <long>)
        ```
        Create a manually placed cinematic object
  - slug: cinematic_scripting_create_cinematic_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_cinematic_object <long> <long>)
        ```
        Create a manually placed cinematic object
  - slug: cinematic_scripting_start_animation
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_start_animation <long> <long> <string_id>)
        ```
        Animate a manually placed cinematic object
  - slug: cinematic_scripting_destroy_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_destroy_object <long> <long>)
        ```
        Destroy a cinematic object
  - slug: cinematic_scripting_destroy_objects
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_destroy_objects <long>)
        ```
        Destroys all cinematic object
  - slug: cinematic_scripting_create_scene
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_scene <long>)
        ```
        Creates cinematic scene
  - slug: cinematic_scripting_destroy_scene
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_destroy_scene <long>)
        ```
        Destroys cinematic scene
  - slug: cinematic_scripting_start_effect
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_start_effect <long> <long> <long> <object>)
        ```
        Play a cinematic effect
  - slug: cinematic_scripting_start_music
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_start_music <long> <long> <long>)
        ```
        Play a cinematic music
  - slug: cinematic_scripting_start_dialogue
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_start_dialogue <long> <long> <long> <object>)
        ```
        Play a cinematic dialogue
  - slug: cinematic_scripting_stop_music
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_stop_music <long> <long> <long>)
        ```
        Stops a cinematic music
  - slug: cinematic_scripting_start_screen_effect
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_start_screen_effect <long> <long> <long>)
        ```
        Play a cinematic screen effect
  - slug: cinematic_scripting_stop_screen_effect
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_stop_screen_effect <long> <long> <long>)
        ```
        Stop the associated area screen effect.
  - slug: cinematic_scripting_create_and_animate_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_and_animate_object <long> <long> <long> <string_id> <boolean>)
        ```
        Create and Animate a cinematic object.
  - slug: cinematic_scripting_create_and_animate_cinematic_object
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_and_animate_cinematic_object <long> <long> <long> <string_id> <boolean>)
        ```
        Create and Animate a cinematic object.
  - slug: cinematic_scripting_create_and_animate_object_no_animation
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_and_animate_object_no_animation <long> <long> <long> <boolean>)
        ```
        Create and Animate a cinematic object.
  - slug: cinematic_scripting_create_and_animate_cinematic_object_no_animation
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_create_and_animate_cinematic_object_no_animation <long> <long> <long> <boolean>)
        ```
        Create and Animate a cinematic object.
  - slug: cinematic_scripting_set_user_input_constraints
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_set_user_input_constraints <long> <long> <long>)
        ```
        Set user input constraints from a cinematic tag
  - slug: attract_mode_start
    info:
      en: |-
        ```hsc
        (<void> attract_mode_start)
        ```
        starts an attract mode movie
  - slug: attract_mode_set_seconds
    info:
      en: |-
        ```hsc
        (<void> attract_mode_set_seconds <long>)
        ```
        sets number of seconds of the attract mode countdown timer.
  - slug: game_won
    info:
      en: |-
        ```hsc
        (<void> game_won)
        ```
        causes the player to successfully finish the current level and move to the next
  - slug: game_lost
    info:
      en: |-
        ```hsc
        (<void> game_lost <boolean>)
        ```
        marks the game as lost or not lost
  - slug: game_revert
    info:
      en: |-
        ```hsc
        (<void> game_revert)
        ```
        causes the player to revert to his previous saved game (for testing and cinematic skipping only please!)
  - slug: game_award_level_complete_achievements
    info:
      en: |-
        ```hsc
        (<void> game_award_level_complete_achievements)
        ```
        awards end of level progress to players
  - slug: game_is_cooperative
    info:
      en: |-
        ```hsc
        (<boolean> game_is_cooperative)
        ```
        returns TRUE if the game is cooperative
  - slug: game_is_playtest
    info:
      en: |-
        ```hsc
        (<boolean> game_is_playtest)
        ```
        returns the hs global boolean 'global_playtest_mode' which can be set in your init.txt
  - slug: game_can_use_flashlights
    info:
      en: |-
        ```hsc
        (<void> game_can_use_flashlights <boolean>)
        ```
        allows or disallows the user of player flashlights
  - slug: game_save_and_quit
    info:
      en: |-
        ```hsc
        (<void> game_save_and_quit)
        ```
        save & quit to the main menu
  - slug: game_save_unsafe
    info:
      en: |-
        ```hsc
        (<void> game_save_unsafe)
        ```
        saves right now, even if the game is in an immediate-loss state (NEVER USE THIS! EVER!)
  - slug: game_insertion_point_unlock
    info:
      en: |-
        ```hsc
        (<void> game_insertion_point_unlock <short>)
        ```
        unlocks the given insertion point for the current map for all players
  - slug: game_insertion_point_lock
    info:
      en: |-
        ```hsc
        (<void> game_insertion_point_lock <short>)
        ```
        unlocks the given insertion point for the current map for all players
  - slug: game_insertion_point_set
    info:
      en: |-
        ```hsc
        (<void> game_insertion_point_set <short>)
        ```
        debug map launching: sets the map insertion_point
  - slug: saved_games_delete_campaign_save
    info:
      en: |-
        ```hsc
        (<void> saved_games_delete_campaign_save <controller>)
        ```
        delete the campaign saved game file for a controller
  - slug: saved_games_autosave_free_up_space
    info:
      en: |-
        ```hsc
        (<void> saved_games_autosave_free_up_space)
        ```
        tell the autosave queue to run its cleanup routine for each content type
  - slug: achievement_grant_to_player
    info:
      en: |-
        ```hsc
        (<void> achievement_grant_to_player <player> <string_id>)
        ```
        award named achievement to player
  - slug: achievement_grant_to_controller
    info:
      en: |-
        ```hsc
        (<void> achievement_grant_to_controller <controller> <string_id>)
        ```
        award named achievement to player
  - slug: achievement_grant_to_all_players
    info:
      en: |-
        ```hsc
        (<void> achievement_grant_to_all_players <string_id>)
        ```
        award named achievement to all players
  - slug: achievements_enable
    info:
      en: |-
        ```hsc
        (<void> achievements_enable <boolean>)
        ```
        enable or disable the awarding of achievements
  - slug: achievements_skip_validation_checks
    info:
      en: |-
        ```hsc
        (<void> achievements_skip_validation_checks <boolean>)
        ```
        toggle the disabling of validation checks on achievement awarding
  - slug: debug_spawning_influencers
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_influencers <boolean>)
        ```
        toggle debugging of any & all dynamic respawn influencers
  - slug: debug_spawning_respawn_zones
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_respawn_zones <boolean>)
        ```
        debugs respawn zone influences
  - slug: debug_spawning_proximity_forbid
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_proximity_forbid <boolean>)
        ```
        debugs enemy proximity forbid influences
  - slug: debug_spawning_moving_vehicle
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_moving_vehicle <boolean>)
        ```
        debugs moving vehicle danger influences
  - slug: debug_spawning_weapon_influences
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_weapon_influences <boolean>)
        ```
        debugs enemy weapon danger influences
  - slug: debug_spawning_dangerous_projectiles
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_dangerous_projectiles <boolean>)
        ```
        debugs dangerous projectile influences
  - slug: debug_spawning_deployed_equipment
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_deployed_equipment <boolean>)
        ```
        debugs deployed equipment influences
  - slug: debug_spawning_proximity_enemy
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_proximity_enemy <boolean>)
        ```
        debugs enemy proximity bias influences
  - slug: debug_spawning_teammates
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_teammates <boolean>)
        ```
        debugs teammate proximity bias influences
  - slug: debug_spawning_dead_teammates
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_dead_teammates <boolean>)
        ```
        debug dead teammate influencers
  - slug: debug_spawning_random_influence
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_random_influence <boolean>)
        ```
        toggles display of random influence contribution
  - slug: debug_spawning_nominal_weight
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_nominal_weight <boolean>)
        ```
        toggles display of the nominal weight influence contribution
  - slug: debug_spawning_natural_weight
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_natural_weight <boolean>)
        ```
        toggles display of the natural weight influence contribution
  - slug: debug_spawning_target
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_target <string>)
        ```
        sets target player for respawn influencer debugging display
  - slug: debug_spawning_use_history
    info:
      en: |-
        ```hsc
        (<void> debug_spawning_use_history <long>)
        ```
        sets the saved respawn state for respawn influencer debugging display
  - slug: debug_initial_spawn_point_objects
    info:
      en: |-
        ```hsc
        (<void> debug_initial_spawn_point_objects <boolean>)
        ```
        toggles debug cycling through multiplayer initial spawn points objects
  - slug: debug_respawn_point_objects
    info:
      en: |-
        ```hsc
        (<void> debug_respawn_point_objects <boolean>)
        ```
        toggles debug cycling through multiplayer respawn points objects
  - slug: game_export_variant_settings
    info:
      en: |-
        ```hsc
        (<void> game_export_variant_settings <string>)
        ```
        export the current game engine variant settings to the specified text file
  - slug: game_engine_event_test_general
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_general <long>)
        ```
        test game engine general event
  - slug: game_engine_event_test_flavor
    info:
      en: |-
        ```hsc
        (<void> game_engine_event_test_flavor <long>)
        ```
        test game engine flavor event
  - slug: core_load
    info:
      en: |-
        ```hsc
        (<void> core_load)
        ```
        loads debug game state from core\core.bin
  - slug: core_load_name
    info:
      en: |-
        ```hsc
        (<void> core_load_name <string>)
        ```
        loads debug game state from core\<path>
  - slug: core_save
    info:
      en: |-
        ```hsc
        (<void> core_save)
        ```
        saves debug game state to core\core.bin
  - slug: core_save_name
    info:
      en: |-
        ```hsc
        (<void> core_save_name <string>)
        ```
        saves debug game state to core\<path>
  - slug: core_load_game
    info:
      en: |-
        ```hsc
        (<void> core_load_game)
        ```
        loads level and game state from core\core.bin
  - slug: core_load_game_name
    info:
      en: |-
        ```hsc
        (<void> core_load_game_name <string>)
        ```
        loads level and game state from core\<path>
  - slug: core_regular_upload_to_debug_server
    info:
      en: |-
        ```hsc
        (<void> core_regular_upload_to_debug_server <boolean>)
        ```
        toggle periodic core uploading to debug server
  - slug: core_set_upload_option
    info:
      en: |-
        ```hsc
        (<void> core_set_upload_option <string>)
        ```
        sets options for game state uploading (current options are 'default', 'repro', and 'stress'
  - slug: core_force_immediate_save_on_core_load
    info:
      en: |-
        ```hsc
        (<void> core_force_immediate_save_on_core_load <boolean>)
        ```
        Forces film core loads to trigger game_save_immediate() on load (which mimics the game save that occurs on core load in stress jobs).
  - slug: force_debugger_not_present
    info:
      en: |-
        ```hsc
        (<void> force_debugger_not_present <boolean>)
        ```
        forces is_debugger_present() to return false
  - slug: force_debugger_always_present
    info:
      en: |-
        ```hsc
        (<void> force_debugger_always_present <boolean>)
        ```
        forces is_debugger_present() to return true
  - slug: game_safe_to_save
    info:
      en: |-
        ```hsc
        (<boolean> game_safe_to_save)
        ```
        returns FALSE if it would be a bad idea to save the player's game right now
  - slug: game_safe_to_speak
    info:
      en: |-
        ```hsc
        (<boolean> game_safe_to_speak)
        ```
        returns FALSE if it would be a bad idea to play mission dialog right now
  - slug: game_all_quiet
    info:
      en: |-
        ```hsc
        (<boolean> game_all_quiet)
        ```
        returns FALSE if there are bad guys around, projectiles in the air, etc.
  - slug: game_save
    info:
      en: |-
        ```hsc
        (<void> game_save)
        ```
        checks to see if it is safe to save game, then saves (gives up after 8 seconds)
  - slug: game_save_cancel
    info:
      en: |-
        ```hsc
        (<void> game_save_cancel)
        ```
        cancels any pending game_save, timeout or not
  - slug: game_save_no_timeout
    info:
      en: |-
        ```hsc
        (<void> game_save_no_timeout)
        ```
        checks to see if it is safe to save game, then saves (this version never gives up)
  - slug: game_save_immediate
    info:
      en: |-
        ```hsc
        (<void> game_save_immediate)
        ```
        disregards player's current situation and saves (BE VERY CAREFUL!)
  - slug: game_saving
    info:
      en: |-
        ```hsc
        (<boolean> game_saving)
        ```
        checks to see if the game is trying to save the map.
  - slug: game_reverted
    info:
      en: |-
        ```hsc
        (<boolean> game_reverted)
        ```
        don't use this for anything, you black-hearted bastards.
  - slug: survival_mode_respawn_dead_players
    info:
      en: |-
        ```hsc
        (<void> survival_mode_respawn_dead_players)
        ```
        respawns all dead players even if no lives are left
  - slug: survival_mode_lives_get
    info:
      en: |-
        ```hsc
        (<long> survival_mode_lives_get <team>)
        ```
        get the number of lives left in survival mode
  - slug: survival_mode_lives_set
    info:
      en: |-
        ```hsc
        (<void> survival_mode_lives_set <team> <long>)
        ```
        set the number of lives left in survival mode
  - slug: survival_mode_get_mp_round_count
    info:
      en: |-
        ```hsc
        (<long> survival_mode_get_mp_round_count)
        ```
        get the number of mp rounds
  - slug: survival_mode_get_mp_round_current
    info:
      en: |-
        ```hsc
        (<long> survival_mode_get_mp_round_current)
        ```
        get the current mp round index
  - slug: survival_mode_set_get
    info:
      en: |-
        ```hsc
        (<short> survival_mode_set_get)
        ```
        get the current set index for survival mode
  - slug: survival_mode_round_get
    info:
      en: |-
        ```hsc
        (<short> survival_mode_round_get)
        ```
        get the current round index for survival mode
  - slug: survival_mode_waves_per_round
    info:
      en: |-
        ```hsc
        (<short> survival_mode_waves_per_round)
        ```
        get the number of waves per round for survival mode
  - slug: survival_mode_rounds_per_set
    info:
      en: |-
        ```hsc
        (<short> survival_mode_rounds_per_set)
        ```
        get the number of rounds per set for survival mode
  - slug: survival_mode_wave_get
    info:
      en: |-
        ```hsc
        (<short> survival_mode_wave_get)
        ```
        get the current wave index for survival mode
  - slug: survival_mode_set_multiplier_get
    info:
      en: |-
        ```hsc
        (<real> survival_mode_set_multiplier_get)
        ```
        get the current wave index for survival mode
  - slug: survival_mode_set_multiplier_set
    info:
      en: |-
        ```hsc
        (<void> survival_mode_set_multiplier_set <real>)
        ```
        set the current wave index for survival mode
  - slug: survival_mode_bonus_multiplier_get
    info:
      en: |-
        ```hsc
        (<real> survival_mode_bonus_multiplier_get)
        ```
        get the current wave index for survival mode
  - slug: survival_mode_bonus_multiplier_set
    info:
      en: |-
        ```hsc
        (<void> survival_mode_bonus_multiplier_set <real>)
        ```
        set the current wave index for survival mode
  - slug: survival_mode_get_wave_squad
    info:
      en: |-
        ```hsc
        (<long> survival_mode_get_wave_squad)
        ```
        returns the name of the squad template for the current wave
  - slug: survival_mode_current_wave_is_initial
    info:
      en: |-
        ```hsc
        (<boolean> survival_mode_current_wave_is_initial)
        ```
        returns true if the current wave is the first of the round
  - slug: survival_mode_current_wave_is_boss
    info:
      en: |-
        ```hsc
        (<boolean> survival_mode_current_wave_is_boss)
        ```
        returns true if the current wave is the final of the round
  - slug: survival_mode_current_wave_is_bonus
    info:
      en: |-
        ```hsc
        (<boolean> survival_mode_current_wave_is_bonus)
        ```
        returns true if the current wave is the bonus round
  - slug: survival_mode_current_wave_is_last_in_set
    info:
      en: |-
        ```hsc
        (<boolean> survival_mode_current_wave_is_last_in_set)
        ```
        returns true if the currect wave is the last wave before the end of the set
  - slug: survival_mode_begin_new_set
    info:
      en: |-
        ```hsc
        (<void> survival_mode_begin_new_set)
        ```
        Starts a new set
  - slug: survival_mode_begin_new_wave
    info:
      en: |-
        ```hsc
        (<void> survival_mode_begin_new_wave)
        ```
        Starts a new wave
  - slug: survival_mode_end_set
    info:
      en: |-
        ```hsc
        (<void> survival_mode_end_set)
        ```
        Ends a set
  - slug: survival_mode_end_wave
    info:
      en: |-
        ```hsc
        (<void> survival_mode_end_wave)
        ```
        Ends a wave
  - slug: survival_mode_award_hero_medal
    info:
      en: |-
        ```hsc
        (<void> survival_mode_award_hero_medal)
        ```
        lets the engine award the hero medal
  - slug: survival_mode_incident_new
    info:
      en: |-
        ```hsc
        (<void> survival_mode_incident_new <string_id>)
        ```
        fires a start new set game event
  - slug: chud_bonus_round_show_timer
    info:
      en: |-
        ```hsc
        (<void> chud_bonus_round_show_timer <boolean>)
        ```
        show the bonus timer
  - slug: chud_bonus_round_start_timer
    info:
      en: |-
        ```hsc
        (<void> chud_bonus_round_start_timer <boolean>)
        ```
        tick the bonus timer
  - slug: chud_bonus_round_set_timer
    info:
      en: |-
        ```hsc
        (<void> chud_bonus_round_set_timer <real>)
        ```
        set the bonus timer
  - slug: survival_mode_get_time_limit
    info:
      en: |-
        ```hsc
        (<long> survival_mode_get_time_limit)
        ```
        Get the survival mode time limit from the game variant
  - slug: survival_mode_get_set_count
    info:
      en: |-
        ```hsc
        (<long> survival_mode_get_set_count)
        ```
        Get the survival mode set count from the game variant
  - slug: survival_mode_get_bonus_lives_awarded
    info:
      en: |-
        ```hsc
        (<long> survival_mode_get_bonus_lives_awarded)
        ```
        Get the survival mode bonus lives from the game variant
  - slug: survival_mode_get_bonus_target
    info:
      en: |-
        ```hsc
        (<long> survival_mode_get_bonus_target)
        ```
        Get the survival mode bonus target from the game variant
  - slug: survival_mode_get_shared_team_life_count
    info:
      en: |-
        ```hsc
        (<long> survival_mode_get_shared_team_life_count)
        ```
        Get the survival mode spartan life count from the game variant
  - slug: survival_mode_get_elite_life_count
    info:
      en: |-
        ```hsc
        (<long> survival_mode_get_elite_life_count)
        ```
        Get the survival mode elite life count from the game variant
  - slug: survival_mode_max_lives
    info:
      en: |-
        ```hsc
        (<long> survival_mode_max_lives)
        ```
        Get the survival mode max lives from the game variant
  - slug: survival_mode_generator_count
    info:
      en: |-
        ```hsc
        (<long> survival_mode_generator_count)
        ```
        Get the survival mode generator count from the game variant
  - slug: survival_mode_bonus_lives_elite_death
    info:
      en: |-
        ```hsc
        (<long> survival_mode_bonus_lives_elite_death)
        ```
        Get the survival mode bonus lives for killing an elite player from the game variant
  - slug: survival_mode_scenario_extras_enable
    info:
      en: |-
        ```hsc
        (<boolean> survival_mode_scenario_extras_enable)
        ```
        Get the survival mode scenario hazards enabled property from the game variant
  - slug: survival_mode_weapon_drops_enable
    info:
      en: |-
        ```hsc
        (<boolean> survival_mode_weapon_drops_enable)
        ```
        Get the survival mode weapon drops enabled property from the game variant
  - slug: survival_mode_ammo_crates_enable
    info:
      en: |-
        ```hsc
        (<boolean> survival_mode_ammo_crates_enable)
        ```
        Get the survival mode ammo crates enabled property from the game variant
  - slug: survival_mode_generator_defend_all
    info:
      en: |-
        ```hsc
        (<boolean> survival_mode_generator_defend_all)
        ```
        Get the survival mode generator defend all property from the game variant
  - slug: survival_mode_generator_random_spawn
    info:
      en: |-
        ```hsc
        (<boolean> survival_mode_generator_random_spawn)
        ```
        Get the survival mode generator random spawn property from the game variant
  - slug: survival_mode_current_wave_uses_dropship
    info:
      en: |-
        ```hsc
        (<boolean> survival_mode_current_wave_uses_dropship)
        ```
        Get the survival mode current wave uses a dropship property from the game variant
  - slug: survival_mode_get_current_wave_time_limit
    info:
      en: |-
        ```hsc
        (<short> survival_mode_get_current_wave_time_limit)
        ```
        Get the survival mode duration property for the current wave from the game variant
  - slug: survival_mode_get_respawn_time_seconds
    info:
      en: |-
        ```hsc
        (<long> survival_mode_get_respawn_time_seconds <mp_team>)
        ```
        Respawn time for a team
  - slug: survival_mode_team_respawns_on_wave
    info:
      en: |-
        ```hsc
        (<boolean> survival_mode_team_respawns_on_wave <team>)
        ```
        Does this team respawn only when waves complete?
  - slug: survival_mode_sudden_death
    info:
      en: |-
        ```hsc
        (<void> survival_mode_sudden_death <boolean>)
        ```
        Start or stop sudden death for survival mode
  - slug: survival_increment_human_score
    info:
      en: |-
        ```hsc
        (<void> survival_increment_human_score <player>)
        ```
        Increments the player's score by one.
  - slug: survival_increment_elite_score
    info:
      en: |-
        ```hsc
        (<void> survival_increment_elite_score <player>)
        ```
        Increments the player's score by one.
  - slug: survival_mode_set_spartan_license_plate
    info:
      en: |-
        ```hsc
        (<void> survival_mode_set_spartan_license_plate <long> <long> <string_id> <string_id> <string_id>)
        ```
        Shows the license plate for Spartans: Variant Icon, Designator Icon, Variant Text, Description Text, Designator Text
  - slug: survival_mode_set_elite_license_plate
    info:
      en: |-
        ```hsc
        (<void> survival_mode_set_elite_license_plate <long> <long> <string_id> <string_id> <string_id>)
        ```
        Shows the license plate for Elites: Variant Icon, Designator Icon, Variant Text, Description Text, Designator Text
  - slug: survival_mode_player_count_by_team
    info:
      en: |-
        ```hsc
        (<long> survival_mode_player_count_by_team <team>)
        ```
        given a team index, returns the player count of that team
  - slug: survival_mode_players_by_team
    info:
      en: |-
        ```hsc
        (<object_list> survival_mode_players_by_team <team>)
        ```
        given a team index, returns an object list containing all living player objects belonging to that team
  - slug: sound_impulse_predict
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_predict <sound>)
        ```
        your mom part 2.
  - slug: sound_impulse_trigger
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_trigger <sound> <object> <real> <long>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale.
  - slug: sound_impulse_start
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start <sound> <object> <real>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale.
  - slug: sound_impulse_start_cinematic
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_cinematic <sound> <object> <real> <real> <real>)
        ```
        <sound> <object> <scale> <3d gain> <first person gain> plays an impulse sound from the specified source object.
  - slug: sound_impulse_start_effect
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_effect <sound> <object> <real> <string_id>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale and effect.
  - slug: sound_impulse_start_with_subtitle
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_with_subtitle <sound> <object> <real> <string_id> <string_id>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale and displays a subtitle.
  - slug: sound_impulse_time
    info:
      en: |-
        ```hsc
        (<long> sound_impulse_time <sound>)
        ```
        returns the time remaining for the specified impulse sound.
  - slug: sound_impulse_time
    info:
      en: |-
        ```hsc
        (<long> sound_impulse_time <sound> <long>)
        ```
        <sound> <total playing time> returns the time remaining for the specified impulse sound based on <total playing time>.
  - slug: sound_impulse_language_time
    info:
      en: |-
        ```hsc
        (<long> sound_impulse_language_time <sound>)
        ```
        returns the time remaining for the specified impulse sound. DO NOT CALL IN CUTSCENES.
  - slug: sound_impulse_stop
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_stop <sound>)
        ```
        stops the specified impulse sound.
  - slug: sound_impulse_start_3d
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_3d <sound> <real> <real>)
        ```
        <sound> <azimuth> <scale> at the sound's minimum distance
  - slug: sound_impulse_mark_as_outro
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_mark_as_outro <sound>)
        ```
        marks a sound as outro (meaning it plays past an unskipped cinematic).
  - slug: sound_impulse_start_naked
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_naked <sound> <string_id> <string_id>)
        ```
        <sound> <pitch range name> <permutation index name> through the speakers it was encoded for
  - slug: sound_preload_dialogue_sounds
    info:
      en: |-
        ```hsc
        (<void> sound_preload_dialogue_sounds <string>)
        ```
        <dialogue> preloads the dialogue tag so the sounds it refer to don't hitch in the dialog view.
  - slug: sound_looping_predict
    info:
      en: |-
        ```hsc
        (<void> sound_looping_predict <looping_sound>)
        ```
        your mom.
  - slug: sound_looping_start_with_effect
    info:
      en: |-
        ```hsc
        (<void> sound_looping_start_with_effect <looping_sound> <object> <real> <string_id>)
        ```
        plays a looping sound from the specified source object (or "none"), with the specified scale and playback effect.
  - slug: sound_looping_start
    info:
      en: |-
        ```hsc
        (<void> sound_looping_start <looping_sound> <object> <real>)
        ```
        plays a looping sound from the specified source object (or "none"), with the specified scale.
  - slug: sound_looping_resume
    info:
      en: |-
        ```hsc
        (<void> sound_looping_resume <looping_sound> <object> <real>)
        ```
        plays a looping sound from the specified source object (or "none"), with the specified scale without playing the intro.
  - slug: sound_looping_stop
    info:
      en: |-
        ```hsc
        (<void> sound_looping_stop <looping_sound>)
        ```
        stops the specified looping sound.
  - slug: sound_looping_stop_immediately
    info:
      en: |-
        ```hsc
        (<void> sound_looping_stop_immediately <looping_sound>)
        ```
        stops the specified looping sound immediately.
  - slug: sound_looping_set_scale
    info:
      en: |-
        ```hsc
        (<void> sound_looping_set_scale <looping_sound> <real>)
        ```
        changes the scale of the sound (which should affect the volume) within the range 0 to 1.
  - slug: sound_looping_set_alternate
    info:
      en: |-
        ```hsc
        (<void> sound_looping_set_alternate <looping_sound> <boolean>)
        ```
        enables or disables the alternate loop/alternate end for a looping sound.
  - slug: sound_looping_activate_layer
    info:
      en: |-
        ```hsc
        (<void> sound_looping_activate_layer <looping_sound> <long>)
        ```
        activates a looping sound layer (1-4).
  - slug: sound_looping_deactivate_layer
    info:
      en: |-
        ```hsc
        (<void> sound_looping_deactivate_layer <looping_sound> <long>)
        ```
        deactivates a looping sound layer (1-4).
  - slug: sound_loop_spam
    info:
      en: |-
        ```hsc
        (<void> sound_loop_spam)
        ```
        start all loaded looping sounds
  - slug: sound_class_show_channel
    info:
      en: |-
        ```hsc
        (<void> sound_class_show_channel <string> <boolean>)
        ```
        shows/hides sound classes w/ substring in debug_sound_channels view
  - slug: sound_class_debug_sound_start
    info:
      en: |-
        ```hsc
        (<void> sound_class_debug_sound_start <string> <boolean>)
        ```
        shows/hides when sounds of sound classes w/ substring start
  - slug: debug_sounds_enable
    info:
      en: |-
        ```hsc
        (<void> debug_sounds_enable <string> <boolean>)
        ```
        enables or disables all sound classes matching the substring.
  - slug: sound_class_set_gain
    info:
      en: |-
        ```hsc
        (<void> sound_class_set_gain <string> <real> <short>)
        ```
        changes the gain on the specified sound class(es) to the specified gain over the specified number of ticks.
  - slug: sound_class_set_gain_db
    info:
      en: |-
        ```hsc
        (<void> sound_class_set_gain_db <string> <real> <short>)
        ```
        changes the gain on the specified sound class(es) to the specified gain(dB) over the specified number of ticks.
  - slug: sound_class_enable_ducker
    info:
      en: |-
        ```hsc
        (<void> sound_class_enable_ducker <string> <boolean>)
        ```
        enables or disables the ducker on all sound classes matching the substring.
  - slug: debug_sound_environment_parameter
    info:
      en: |-
        ```hsc
        (<void> debug_sound_environment_parameter <long> <real>)
        ```
  - slug: sound_start_global_effect
    info:
      en: |-
        ```hsc
        (<void> sound_start_global_effect <string_id> <real>)
        ```
        start a global effect
  - slug: sound_start_timed_global_effect
    info:
      en: |-
        ```hsc
        (<void> sound_start_timed_global_effect <string_id> <real> <real>)
        ```
        start a global sound effect for a given amount of time
  - slug: sound_stop_global_effect
    info:
      en: |-
        ```hsc
        (<void> sound_stop_global_effect <string_id>)
        ```
        stop a global effect
  - slug: sound_enable_acoustic_palette
    info:
      en: |-
        ```hsc
        (<void> sound_enable_acoustic_palette <string_id>)
        ```
        reenable a disabled acoustic palette
  - slug: sound_disable_acoustic_palette
    info:
      en: |-
        ```hsc
        (<void> sound_disable_acoustic_palette <string_id>)
        ```
        disable an acoustic palette
  - slug: vehicle_force_alternate_state
    info:
      en: |-
        ```hsc
        (<void> vehicle_force_alternate_state <vehicle> <boolean>)
        ```
        Forces alternate state for selected vehicle (like deploying a wolverine
  - slug: vehicle_auto_turret
    info:
      en: |-
        ```hsc
        (<void> vehicle_auto_turret <vehicle> <trigger_volume> <real> <real> <real>)
        ```
        Sets the specified trigger volume and parameters for an auto turret
  - slug: vehicle_hover
    info:
      en: |-
        ```hsc
        (<void> vehicle_hover <vehicle> <boolean>)
        ```
        stops the vehicle from running real physics and runs fake hovering physics instead.
  - slug: vehicle_count_bipeds_killed
    info:
      en: |-
        ```hsc
        (<long> vehicle_count_bipeds_killed <vehicle>)
        ```
        returns how many people this vehicle has killed
  - slug: biped_ragdoll
    info:
      en: |-
        ```hsc
        (<void> biped_ragdoll <unit>)
        ```
        given a dead biped, turns on ragdoll
  - slug: water_float_reset
    info:
      en: |-
        ```hsc
        (<void> water_float_reset <object>)
        ```
        allows an object to continue floating
  - slug: hud_show_training_text
    info:
      en: |-
        ```hsc
        (<void> hud_show_training_text <boolean>)
        ```
        true turns on scripted training text
  - slug: hud_set_training_text
    info:
      en: |-
        ```hsc
        (<void> hud_set_training_text <string_id>)
        ```
        sets the string id fo the scripted training text
  - slug: hud_enable_training
    info:
      en: |-
        ```hsc
        (<void> hud_enable_training <boolean>)
        ```
        true turns training on, false turns it off.
  - slug: player_training_activate_night_vision
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_night_vision)
        ```
        guess
  - slug: player_training_activate_crouch
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_crouch)
        ```
        guess
  - slug: player_training_activate_stealth
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_stealth)
        ```
        guess
  - slug: player_training_activate_equipment
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_equipment)
        ```
        guess
  - slug: player_training_activate_jump
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_jump)
        ```
        guess
  - slug: player_training_reset
    info:
      en: |-
        ```hsc
        (<void> player_training_reset <controller>)
        ```
        Resets all player training data
  - slug: chud_texture_cam
    info:
      en: |-
        ```hsc
        (<void> chud_texture_cam <boolean>)
        ```
        turns the chud texturecam on/off
  - slug: chud_show
    info:
      en: |-
        ```hsc
        (<void> chud_show <boolean>)
        ```
        hides/shows the entire chud
  - slug: chud_show_weapon_stats
    info:
      en: |-
        ```hsc
        (<void> chud_show_weapon_stats <boolean>)
        ```
        hides/shows the weapon huds
  - slug: chud_show_crosshair
    info:
      en: |-
        ```hsc
        (<void> chud_show_crosshair <boolean>)
        ```
        hides/shows the crosshair
  - slug: chud_show_shield
    info:
      en: |-
        ```hsc
        (<void> chud_show_shield <boolean>)
        ```
        hides/shows the shield
  - slug: chud_show_grenades
    info:
      en: |-
        ```hsc
        (<void> chud_show_grenades <boolean>)
        ```
        hides/shows the grenade hud
  - slug: chud_show_messages
    info:
      en: |-
        ```hsc
        (<void> chud_show_messages <boolean>)
        ```
        hides/shows the chud messages
  - slug: chud_show_motion_sensor
    info:
      en: |-
        ```hsc
        (<void> chud_show_motion_sensor <boolean>)
        ```
        hides/shows the motion sensor chud
  - slug: chud_show_cinematics
    info:
      en: |-
        ```hsc
        (<void> chud_show_cinematics <boolean>)
        ```
        hides/shows the cinematics huds
  - slug: chud_fade_weapon_stats_for_player
    info:
      en: |-
        ```hsc
        (<void> chud_fade_weapon_stats_for_player <player> <real> <long>)
        ```
        fade out the hud to <real> opacity over <integer> ticks
  - slug: chud_fade_crosshair_for_player
    info:
      en: |-
        ```hsc
        (<void> chud_fade_crosshair_for_player <player> <real> <long>)
        ```
        fade out the hud to <real> opacity over <integer> ticks
  - slug: chud_fade_shield_for_player
    info:
      en: |-
        ```hsc
        (<void> chud_fade_shield_for_player <player> <real> <long>)
        ```
        fade out the hud to <real> opacity over <integer> ticks
  - slug: chud_fade_grenades_for_player
    info:
      en: |-
        ```hsc
        (<void> chud_fade_grenades_for_player <player> <real> <long>)
        ```
        fade out the hud to <real> opacity over <integer> ticks
  - slug: chud_fade_messages_for_player
    info:
      en: |-
        ```hsc
        (<void> chud_fade_messages_for_player <player> <real> <long>)
        ```
        fade out the hud to <real> opacity over <integer> ticks
  - slug: chud_fade_motion_sensor_for_player
    info:
      en: |-
        ```hsc
        (<void> chud_fade_motion_sensor_for_player <player> <real> <long>)
        ```
        fade out the hud to <real> opacity over <integer> ticks
  - slug: chud_fade_chapter_title_for_player
    info:
      en: |-
        ```hsc
        (<void> chud_fade_chapter_title_for_player <player> <real> <long>)
        ```
        fade out the hud to <real> opacity over <integer> ticks
  - slug: chud_fade_cinematics_for_player
    info:
      en: |-
        ```hsc
        (<void> chud_fade_cinematics_for_player <player> <real> <long>)
        ```
        fade out the hud to <real> opacity over <integer> ticks
  - slug: chud_cinematic_fade
    info:
      en: |-
        ```hsc
        (<void> chud_cinematic_fade <real> <real>)
        ```
        parameter 1 is how, parameter 2 is when
  - slug: chud_track_object
    info:
      en: |-
        ```hsc
        (<void> chud_track_object <object> <boolean>)
        ```
        turns on/off the navpoint and display text of the specified object
  - slug: chud_track_object_with_priority
    info:
      en: |-
        ```hsc
        (<void> chud_track_object_with_priority <object> <long>)
        ```
        turns on the navpoint and display text of the specified object
  - slug: chud_track_object_with_priority
    info:
      en: |-
        ```hsc
        (<void> chud_track_object_with_priority <object> <long> <string_id>)
        ```
        turns on the navpoint and display text of the specified object
  - slug: chud_track_flag
    info:
      en: |-
        ```hsc
        (<void> chud_track_flag <cutscene_flag> <boolean>)
        ```
        turns on/off the navpoint and display text of the specified flag
  - slug: chud_track_flag_with_priority
    info:
      en: |-
        ```hsc
        (<void> chud_track_flag_with_priority <cutscene_flag> <long>)
        ```
        turns on the navpoint and display text of the specified flag
  - slug: chud_track_flag_with_priority
    info:
      en: |-
        ```hsc
        (<void> chud_track_flag_with_priority <cutscene_flag> <long> <string_id>)
        ```
        turns on the navpoint and display text of the specified flag
  - slug: chud_track_object_for_player
    info:
      en: |-
        ```hsc
        (<void> chud_track_object_for_player <player> <object> <boolean>)
        ```
        turns on/off the navpoint and display text of the specified object
  - slug: chud_track_object_for_player_with_priority
    info:
      en: |-
        ```hsc
        (<void> chud_track_object_for_player_with_priority <player> <object> <long>)
        ```
        turns on the navpoint and display text of the specified object
  - slug: chud_track_object_for_player_with_priority
    info:
      en: |-
        ```hsc
        (<void> chud_track_object_for_player_with_priority <player> <object> <long> <string_id>)
        ```
        turns on the navpoint and display text of the specified object
  - slug: chud_track_flag_for_player
    info:
      en: |-
        ```hsc
        (<void> chud_track_flag_for_player <player> <cutscene_flag> <boolean>)
        ```
        turns on/off the navpoint and display text of the specified flag
  - slug: chud_track_flag_for_player_with_priority
    info:
      en: |-
        ```hsc
        (<void> chud_track_flag_for_player_with_priority <player> <cutscene_flag> <long>)
        ```
        turns on the navpoint and display text of the specified flag
  - slug: chud_track_flag_for_player_with_priority
    info:
      en: |-
        ```hsc
        (<void> chud_track_flag_for_player_with_priority <player> <cutscene_flag> <long> <string_id>)
        ```
        turns on the navpoint and display text of the specified flag
  - slug: chud_track_object_set_vertical_offset
    info:
      en: |-
        ```hsc
        (<void> chud_track_object_set_vertical_offset <object> <real>)
        ```
        set the vertical offset in world units for a chud_track_object object
  - slug: chud_track_cutscene_flag_set_vertical_offset
    info:
      en: |-
        ```hsc
        (<void> chud_track_cutscene_flag_set_vertical_offset <cutscene_flag> <real>)
        ```
        set the vertical offset in world units for a chud_track_cutscene_flag
  - slug: chud_post_message_HACK
    info:
      en: |-
        ```hsc
        (<void> chud_post_message_HACK <string>)
        ```
        posts a string to the given user's HUD.  Use NONE for all users
  - slug: chud_post_message
    info:
      en: |-
        ```hsc
        (<void> chud_post_message <player> <string_id>)
        ```
        posts a string to the given player's HUD.
  - slug: chud_post_medal
    info:
      en: |-
        ```hsc
        (<void> chud_post_medal <player> <string_id>)
        ```
        posts a medal to the given player's HUD.
  - slug: chud_set_static_hs_variable
    info:
      en: |-
        ```hsc
        (<void> chud_set_static_hs_variable <player> <long> <real>)
        ```
        Sets a CHUD variable
  - slug: chud_set_countdown_hs_variable
    info:
      en: |-
        ```hsc
        (<void> chud_set_countdown_hs_variable <player> <long> <real>)
        ```
        Sets a CHUD variable that counts down to 0
  - slug: chud_set_countup_hs_variable
    info:
      en: |-
        ```hsc
        (<void> chud_set_countup_hs_variable <player> <long> <real>)
        ```
        Sets a CHUD variable that counts up forever
  - slug: chud_clear_hs_variable
    info:
      en: |-
        ```hsc
        (<void> chud_clear_hs_variable <player> <long>)
        ```
        Clear a CHUD variable
  - slug: chud_get_hs_variable
    info:
      en: |-
        ```hsc
        (<void> chud_get_hs_variable <real> <player>)
        ```
        Get the value of a CHUD variable
  - slug: chud_show_arbiter_ai_navpoint
    info:
      en: |-
        ```hsc
        (<void> chud_show_arbiter_ai_navpoint <boolean>)
        ```
        hides/shows the entire chud
  - slug: chud_show_screen_objective
    info:
      en: |-
        ```hsc
        (<void> chud_show_screen_objective <string_id>)
        ```
        hides/shows the objective tip in the chud
  - slug: chud_show_screen_chapter_title
    info:
      en: |-
        ```hsc
        (<void> chud_show_screen_chapter_title <string_id>)
        ```
        hides/shows the chapter title in the chud
  - slug: chud_show_screen_training
    info:
      en: |-
        ```hsc
        (<void> chud_show_screen_training <player> <string_id>)
        ```
        hides/shows the training tip in the chud
  - slug: cls
    info:
      en: |-
        ```hsc
        (<void> cls)
        ```
        clears console text from the screen
  - slug: events_spam_suppression_enable
    info:
      en: |-
        ```hsc
        (<void> events_spam_suppression_enable <boolean>)
        ```
        enables or disables the suppression of event spamming
  - slug: error_geometry_show
    info:
      en: |-
        ```hsc
        (<void> error_geometry_show <string>)
        ```
        highlights all error geometry with a name that includes the given substring
  - slug: error_geometry_hide
    info:
      en: |-
        ```hsc
        (<void> error_geometry_hide <string>)
        ```
        hides all error geometry with a name that includes the given substring
  - slug: error_geometry_show_all
    info:
      en: |-
        ```hsc
        (<void> error_geometry_show_all)
        ```
        highlights all error geometry
  - slug: error_geometry_hide_all
    info:
      en: |-
        ```hsc
        (<void> error_geometry_hide_all)
        ```
        hides all error geometry
  - slug: error_geometry_list
    info:
      en: |-
        ```hsc
        (<void> error_geometry_list)
        ```
        prints out a list of all error geometry types and counts
  - slug: player_effect_set_max_translation
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_translation <real> <real> <real>)
        ```
        <x> <y> <z>
  - slug: player_effect_set_max_rotation
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_rotation <real> <real> <real>)
        ```
        <yaw> <pitch> <roll>
  - slug: player_effect_set_max_rumble
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_rumble <real> <real>)
        ```
        <left> <right>
  - slug: player_effect_start
    info:
      en: |-
        ```hsc
        (<void> player_effect_start <real> <real>)
        ```
        <max_intensity> <attack time>
  - slug: player_effect_stop
    info:
      en: |-
        ```hsc
        (<void> player_effect_stop <real>)
        ```
        <decay>
  - slug: player_effect_set_max_translation_for_player
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_translation_for_player <player> <real> <real> <real>)
        ```
        <x> <y> <z>
  - slug: player_effect_set_max_rotation_for_player
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_rotation_for_player <player> <real> <real> <real>)
        ```
        <yaw> <pitch> <roll>
  - slug: player_effect_set_max_rumble_for_player
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_rumble_for_player <player> <real> <real>)
        ```
        <left> <right>
  - slug: player_effect_start_for_player
    info:
      en: |-
        ```hsc
        (<void> player_effect_start_for_player <player> <real> <real>)
        ```
        <max_intensity> <attack time>
  - slug: player_effect_stop_for_player
    info:
      en: |-
        ```hsc
        (<void> player_effect_stop_for_player <player> <real>)
        ```
        <decay>
  - slug: time_code_show
    info:
      en: |-
        ```hsc
        (<void> time_code_show <boolean>)
        ```
        shows the time code timer
  - slug: time_code_start
    info:
      en: |-
        ```hsc
        (<void> time_code_start <boolean>)
        ```
        starts/stops the time code timer
  - slug: time_code_reset
    info:
      en: |-
        ```hsc
        (<void> time_code_reset)
        ```
        resets the time code timer
  - slug: render_atmosphere_fog
    info:
      en: |-
        ```hsc
        (<void> render_atmosphere_fog <boolean>)
        ```
        enable/disable atmosphere fog
  - slug: motion_blur
    info:
      en: |-
        ```hsc
        (<void> motion_blur <boolean>)
        ```
        enable/disable motion blur
  - slug: antialias_blur
    info:
      en: |-
        ```hsc
        (<void> antialias_blur <boolean>)
        ```
        enable/disable antialias blur
  - slug: render_weather
    info:
      en: |-
        ```hsc
        (<void> render_weather <boolean>)
        ```
        enable/disable atmosphere fog
  - slug: render_patchy_fog
    info:
      en: |-
        ```hsc
        (<void> render_patchy_fog <boolean>)
        ```
        enable/disable patchy fog
  - slug: render_ssao
    info:
      en: |-
        ```hsc
        (<void> render_ssao <boolean>)
        ```
        enable/disable ssao
  - slug: render_planar_fog
    info:
      en: |-
        ```hsc
        (<void> render_planar_fog <boolean>)
        ```
        enable/disable planar fog
  - slug: motion_blur_enabled
    info:
      en: |-
        ```hsc
        (<boolean> motion_blur_enabled)
        ```
        check if motion blur is enabled
  - slug: render_disable_vsync
    info:
      en: |-
        ```hsc
        (<void> render_disable_vsync <boolean>)
        ```
        enable/disable vsync
  - slug: player_has_skills
    info:
      en: |-
        ```hsc
        (<boolean> player_has_skills)
        ```
        Are you the best?
  - slug: player_has_mad_secret_skills
    info:
      en: |-
        ```hsc
        (<void> player_has_mad_secret_skills <long>)
        ```
        You are the best!
  - slug: controller_invert_look
    info:
      en: |-
        ```hsc
        (<void> controller_invert_look)
        ```
        invert look on all attached controllers
  - slug: controller_look_speed
    info:
      en: |-
        ```hsc
        (<void> controller_look_speed <short>)
        ```
        set look speed for all attached controllers
  - slug: player_invert_look
    info:
      en: |-
        ```hsc
        (<void> player_invert_look <player>)
        ```
        invert player's look inversion setting
  - slug: user_interface_controller_get_last_level_played
    info:
      en: |-
        ```hsc
        (<long> user_interface_controller_get_last_level_played <short>)
        ```
        returns index of last completed solo level for profile index passed in
  - slug: controller_set_look_inverted
    info:
      en: |-
        ```hsc
        (<void> controller_set_look_inverted <controller> <boolean>)
        ```
        set look inversion for specified controller
  - slug: controller_set_vibration_enabled
    info:
      en: |-
        ```hsc
        (<void> controller_set_vibration_enabled <controller> <boolean>)
        ```
        set vibration for specified controller
  - slug: controller_set_flight_stick_aircraft_controls
    info:
      en: |-
        ```hsc
        (<void> controller_set_flight_stick_aircraft_controls <controller> <boolean>)
        ```
        set airrcraft flight stick controls for specified controller
  - slug: controller_set_auto_center_look
    info:
      en: |-
        ```hsc
        (<void> controller_set_auto_center_look <controller> <boolean>)
        ```
        set auto center look for specified controller
  - slug: controller_set_crouch_lock
    info:
      en: |-
        ```hsc
        (<void> controller_set_crouch_lock <controller> <boolean>)
        ```
        set crouch lock for specified controller
  - slug: controller_set_southpaw
    info:
      en: |-
        ```hsc
        (<void> controller_set_southpaw <controller> <boolean>)
        ```
        set southpaw for specified controller
  - slug: controller_set_clench_protection
    info:
      en: |-
        ```hsc
        (<void> controller_set_clench_protection <controller> <boolean>)
        ```
        set clench protection look for specified controller
  - slug: controller_set_button_preset
    info:
      en: |-
        ```hsc
        (<void> controller_set_button_preset <controller> <button_preset>)
        ```
        set button preset for specified controller
  - slug: controller_set_custom_button
    info:
      en: |-
        ```hsc
        (<void> controller_set_custom_button <controller> <long> <long>)
        ```
        set custom button for specified controller
  - slug: controller_set_joystick_preset
    info:
      en: |-
        ```hsc
        (<void> controller_set_joystick_preset <controller> <joystick_preset>)
        ```
        set joystick preset for specified controller
  - slug: controller_set_look_sensitivity
    info:
      en: |-
        ```hsc
        (<void> controller_set_look_sensitivity <controller> <short>)
        ```
        set look sensitivity for specified controller
  - slug: controller_unlock_single_player_levels
    info:
      en: |-
        ```hsc
        (<void> controller_unlock_single_player_levels <controller>)
        ```
        <controller> unlock all single player levels for specified controller
  - slug: controller_lock_single_player_levels
    info:
      en: |-
        ```hsc
        (<void> controller_lock_single_player_levels <controller>)
        ```
        <controller> lock all single player levels for specified controller
  - slug: controller_unlock_skulls
    info:
      en: |-
        ```hsc
        (<void> controller_unlock_skulls <controller>)
        ```
        <controller> unlock all campaign skulls for specified controller
  - slug: controller_lock_skulls
    info:
      en: |-
        ```hsc
        (<void> controller_lock_skulls <controller>)
        ```
        <controller> lock all campaign skulls for specified controller
  - slug: controller_unlock_models
    info:
      en: |-
        ```hsc
        (<void> controller_unlock_models <controller>)
        ```
        <controller> unlock all model permutations for specified controller
  - slug: controller_lock_models
    info:
      en: |-
        ```hsc
        (<void> controller_lock_models <controller>)
        ```
        <controller> lock all model permutations for specified controller
  - slug: controller_set_single_player_level_completed
    info:
      en: |-
        ```hsc
        (<void> controller_set_single_player_level_completed <controller> <long> <boolean> <game_difficulty> <boolean>)
        ```
        <controller> <level index> <co-op> <difficulty> <completed> set the single player levels completed state for specified controller
  - slug: controller_set_primary_change_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_primary_change_color <controller> <player_color>)
        ```
        set primary change color for specified controller
  - slug: controller_set_secondary_change_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_secondary_change_color <controller> <player_color>)
        ```
        set secondary change color for specified controller
  - slug: controller_set_tertiary_change_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_tertiary_change_color <controller> <player_color>)
        ```
        set tertiary color for specified controller
  - slug: controller_set_primary_emblem_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_primary_emblem_color <controller> <player_color>)
        ```
        set primary change color for specified controller
  - slug: controller_set_secondary_emblem_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_secondary_emblem_color <controller> <player_color>)
        ```
        set secondary change color for specified controller
  - slug: controller_set_background_emblem_color
    info:
      en: |-
        ```hsc
        (<void> controller_set_background_emblem_color <controller> <player_color>)
        ```
        set tertiary color for specified controller
  - slug: controller_set_player_character_type
    info:
      en: |-
        ```hsc
        (<void> controller_set_player_character_type <controller> <player_model_choice>)
        ```
        set player character type for specified controller
  - slug: controller_set_emblem_info
    info:
      en: |-
        ```hsc
        (<void> controller_set_emblem_info <controller> <short> <short>)
        ```
        set emblem for specified controller
  - slug: controller_set_voice_output_setting
    info:
      en: |-
        ```hsc
        (<void> controller_set_voice_output_setting <controller> <voice_output_setting>)
        ```
        set voice output setting for specified controller
  - slug: controller_set_subtitle_setting
    info:
      en: |-
        ```hsc
        (<void> controller_set_subtitle_setting <controller> <subtitle_setting>)
        ```
        set subtitle setting for specified controller
  - slug: controller_set_nag_message_data
    info:
      en: |-
        ```hsc
        (<void> controller_set_nag_message_data <controller> <long> <long> <long> <long>)
        ```
        <controller> <last global nag msg id> <last per user nag msg id> <last global nag msg view count> <last per-user nag msg view count>
  - slug: controller_temporary_users_always_attached
    info:
      en: |-
        ```hsc
        (<void> controller_temporary_users_always_attached <boolean>)
        ```
        toggle pretending that temporary users' controllers are always attached
  - slug: controller_set_new_user_experience
    info:
      en: |-
        ```hsc
        (<void> controller_set_new_user_experience <controller> <boolean>)
        ```
        <controller> set if this controller will get the new user experience
  - slug: controller_set_initial_bonus_toast
    info:
      en: |-
        ```hsc
        (<void> controller_set_initial_bonus_toast <controller> <boolean>)
        ```
        <controller> set if this controller has seen the 5000 initial credits toast
  - slug: controller_set_loyalty_bonus_toast
    info:
      en: |-
        ```hsc
        (<void> controller_set_loyalty_bonus_toast <controller> <short>)
        ```
        <controller> <credits> act as if this controller was awarded loyalty credits from the LSP
  - slug: controller_set_generic_bonus_toast
    info:
      en: |-
        ```hsc
        (<void> controller_set_generic_bonus_toast <controller> <short>)
        ```
        <controller> <credits> act as if this controller was awarded bonus credits from the LSP
  - slug: controller_set_unsignedin_user
    info:
      en: |-
        ```hsc
        (<void> controller_set_unsignedin_user <controller> <boolean>)
        ```
        Toggle controller as unsigned-in user
  - slug: controller_display_storage_device_selection
    info:
      en: |-
        ```hsc
        (<void> controller_display_storage_device_selection <controller>)
        ```
        display storage device selection ui for the specified controller
  - slug: font_cache_bitmap_save
    info:
      en: |-
        ```hsc
        (<void> font_cache_bitmap_save <string>)
        ```
        save font cache bitmap to targa file
  - slug: ui_debug_load_main_menu
    info:
      en: |-
        ```hsc
        (<void> ui_debug_load_main_menu)
        ```
        loads the main menu screen
  - slug: ui_debug_text_bounds
    info:
      en: |-
        ```hsc
        (<void> ui_debug_text_bounds <boolean>)
        ```
        toggle rendering of ui text boundaries
  - slug: ui_debug_text_font
    info:
      en: |-
        ```hsc
        (<void> ui_debug_text_font <boolean>)
        ```
        toggle display of ui text font
  - slug: ui_debug_show_title_safe_bounds
    info:
      en: |-
        ```hsc
        (<void> ui_debug_show_title_safe_bounds <boolean>)
        ```
        toggle display of title safe boundary
  - slug: ui_debug_element_bounds
    info:
      en: |-
        ```hsc
        (<void> ui_debug_element_bounds <boolean>)
        ```
        toggle rendering of widget tag block bounds
  - slug: ui_memory_dump
    info:
      en: |-
        ```hsc
        (<void> ui_memory_dump <string>)
        ```
        dump the UI memory tracked allocations to a specified file
  - slug: ui_time_scale_step
    info:
      en: |-
        ```hsc
        (<void> ui_time_scale_step <real>)
        ```
        move the ui time forward by a specified amount on next tick
  - slug: xoverlapped_debug_render
    info:
      en: |-
        ```hsc
        (<void> xoverlapped_debug_render <boolean>)
        ```
        toggle display a list of active xoverlapped tasks
  - slug: shader_compile_target_platform
    info:
      en: |-
        ```hsc
        (<void> shader_compile_target_platform <string>)
        ```
        set target platform for shader compiling
  - slug: shader_compile_shader_pipeline
    info:
      en: |-
        ```hsc
        (<void> shader_compile_shader_pipeline <string>)
        ```
        set valid part of pipeline for compiling
  - slug: shader_compile_filter_shader_type
    info:
      en: |-
        ```hsc
        (<void> shader_compile_filter_shader_type <string>)
        ```
        skip compiling for one specifical type of templated shader
  - slug: shader_compile_filter_category_option
    info:
      en: |-
        ```hsc
        (<void> shader_compile_filter_category_option <string> <string>)
        ```
        skip compiling for one specifical combination of category and option for templated shader
  - slug: gui_load_screen
    info:
      en: |-
        ```hsc
        (<void> gui_load_screen <string_id>)
        ```
        load the named screen
  - slug: gui_reset
    info:
      en: |-
        ```hsc
        (<void> gui_reset)
        ```
        cleans out the halox ui screens and errors
  - slug: gui_start
    info:
      en: |-
        ```hsc
        (<void> gui_start)
        ```
        tells the window location manager to resume
  - slug: gui_stop
    info:
      en: |-
        ```hsc
        (<void> gui_stop)
        ```
        tells the window location manager to stop bringing up screens on its own
  - slug: gui_error_post
    info:
      en: |-
        ```hsc
        (<void> gui_error_post <string_id> <long> <boolean>)
        ```
        <error_code> <controller_index> <must_be_cleared> sets an error condition in the ui
  - slug: gui_error_post_toast
    info:
      en: |-
        ```hsc
        (<void> gui_error_post_toast <string_id> <long> <boolean>)
        ```
        <error_code> <controller_index> <must_be_cleared> sets an error condition in the ui
  - slug: gui_error_resolve
    info:
      en: |-
        ```hsc
        (<void> gui_error_resolve <string_id> <long>)
        ```
        <error_name> <controller_index> resolves an error condition in the ui
  - slug: gui_error_clear
    info:
      en: |-
        ```hsc
        (<void> gui_error_clear <string_id> <long>)
        ```
        <error_name> <controller_index> clears an error condition in the ui
  - slug: gui_dialog_show
    info:
      en: |-
        ```hsc
        (<void> gui_dialog_show <string_id>)
        ```
        <dialog name>
  - slug: gui_debug_music_state
    info:
      en: |-
        ```hsc
        (<void> gui_debug_music_state <boolean>)
        ```
        Toggle display of UI music state
  - slug: cc_enable
    info:
      en: |-
        ```hsc
        (<void> cc_enable <boolean>)
        ```
        toggle closed captions
  - slug: cc_test
    info:
      en: |-
        ```hsc
        (<void> cc_test <boolean>)
        ```
        test a line of cc text
  - slug: objectives_clear
    info:
      en: |-
        ```hsc
        (<void> objectives_clear)
        ```
        clears the mission objectives.
  - slug: objectives_show_up_to
    info:
      en: |-
        ```hsc
        (<void> objectives_show_up_to <long>)
        ```
        show primary campaign objectives 0..n
  - slug: objectives_finish_up_to
    info:
      en: |-
        ```hsc
        (<void> objectives_finish_up_to <long>)
        ```
        mark primary campaign objectives 0..n as complete
  - slug: objectives_show
    info:
      en: |-
        ```hsc
        (<void> objectives_show <long>)
        ```
        show secondary campaign objective N
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_finish
    info:
      en: |-
        ```hsc
        (<void> objectives_finish <long>)
        ```
        mark secondary campaign objective N as complete
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_unavailable
    info:
      en: |-
        ```hsc
        (<void> objectives_unavailable <long>)
        ```
        mark secondary campaign objective N as unavailable
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_secondary_show
    info:
      en: |-
        ```hsc
        (<void> objectives_secondary_show <long>)
        ```
        show secondary campaign objective N
  - slug: objectives_secondary_finish
    info:
      en: |-
        ```hsc
        (<void> objectives_secondary_finish <long>)
        ```
        mark secondary campaign objective N as complete
  - slug: objectives_secondary_unavailable
    info:
      en: |-
        ```hsc
        (<void> objectives_secondary_unavailable <long>)
        ```
        mark secondary campaign objective N as unavailable
  - slug: objectives_set_string
    info:
      en: |-
        ```hsc
        (<void> objectives_set_string <long> <string_id>)
        ```
        set the primary campaign objective string into the objectives text
  - slug: objectives_secondary_set_string
    info:
      en: |-
        ```hsc
        (<void> objectives_secondary_set_string <long> <string_id>)
        ```
        set the secondary campaign objective string into the objectives text
  - slug: objectives_show_string
    info:
      en: |-
        ```hsc
        (<void> objectives_show_string <string_id>)
        ```
        show secondary campaign objective
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_finish_string
    info:
      en: |-
        ```hsc
        (<void> objectives_finish_string <string_id>)
        ```
        mark secondary campaign objective as complete
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_unavailable_string
    info:
      en: |-
        ```hsc
        (<void> objectives_unavailable_string <string_id>)
        ```
        mark secondary campaign objective as unavailable
    net_safe_raw: unknown, assumed unsafe
  - slug: objectives_secondary_show_string
    info:
      en: |-
        ```hsc
        (<void> objectives_secondary_show_string <string_id>)
        ```
        show secondary campaign objective
  - slug: objectives_secondary_finish_string
    info:
      en: |-
        ```hsc
        (<void> objectives_secondary_finish_string <string_id>)
        ```
        mark secondary campaign objective as complete
  - slug: objectives_secondary_unavailable_string
    info:
      en: |-
        ```hsc
        (<void> objectives_secondary_unavailable_string <string_id>)
        ```
        mark secondary campaign objective as unavailable
  - slug: input_suppress_rumble
    info:
      en: |-
        ```hsc
        (<void> input_suppress_rumble <boolean>)
        ```
        disable the friggin' rumble
  - slug: input_disable_claw_button_combos
    info:
      en: |-
        ```hsc
        (<void> input_disable_claw_button_combos <boolean>)
        ```
        disabe the Claw button combos (for monkey testing)
  - slug: update_remote_camera
    info:
      en: |-
        ```hsc
        (<void> update_remote_camera)
        ```
        force synchronization of remote machine camera
  - slug: net_build_network_config
    info:
      en: |-
        ```hsc
        (<void> net_build_network_config)
        ```
        writes a new network configuration file
  - slug: net_build_game_variant
    info:
      en: |-
        ```hsc
        (<void> net_build_game_variant <boolean> <string>)
        ```
        writes the current game variant to a file
  - slug: net_verify_game_variant
    info:
      en: |-
        ```hsc
        (<void> net_verify_game_variant <string>)
        ```
        verifies the contents of a packed game variant file
  - slug: net_load_and_use_game_variant
    info:
      en: |-
        ```hsc
        (<void> net_load_and_use_game_variant <string>)
        ```
        loads the contents of a packed game variant file and submits to networking for use in the current game
  - slug: net_use_hopper_directory
    info:
      en: |-
        ```hsc
        (<void> net_use_hopper_directory <string>)
        ```
        set which hopper directory to use
  - slug: net_lsp_dump_services_and_servers
    info:
      en: |-
        ```hsc
        (<void> net_lsp_dump_services_and_servers)
        ```
        dump lsp state
  - slug: net_lsp_force_server
    info:
      en: |-
        ```hsc
        (<void> net_lsp_force_server <string> <long> <boolean>)
        ```
        forces a service to use a server
  - slug: net_lsp_disable_server
    info:
      en: |-
        ```hsc
        (<void> net_lsp_disable_server <long> <boolean>)
        ```
        disables a server
  - slug: net_lsp_disable_service
    info:
      en: |-
        ```hsc
        (<void> net_lsp_disable_service <string> <boolean>)
        ```
        disables a service
  - slug: net_quality_dump
    info:
      en: |-
        ```hsc
        (<void> net_quality_dump)
        ```
        dump all network quality statistics
  - slug: net_quality_clear
    info:
      en: |-
        ```hsc
        (<void> net_quality_clear)
        ```
        clear all network quality statistics
  - slug: net_quality_set_connection_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_connection_badness_history <boolean> <short>)
        ```
        set connection history, true/false, # of bits to set
  - slug: net_quality_set_squad_host_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_squad_host_badness_history <boolean> <short>)
        ```
        set host badness history, true/false, # of bits to set
  - slug: net_quality_set_squad_client_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_squad_client_badness_history <boolean> <short>)
        ```
        set client badness history, true/false, # of bits to set
  - slug: net_quality_set_squad_speculative_migration_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_squad_speculative_migration_badness_history <boolean> <short>)
        ```
        true/false, # of bits to set
  - slug: net_quality_set_squad_bridging_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_squad_bridging_badness_history <boolean> <short>)
        ```
        true/false, # of bits to set
  - slug: net_quality_set_group_host_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_group_host_badness_history <boolean> <short>)
        ```
        set host badness history, true/false, # of bits to set
  - slug: net_quality_set_group_client_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_group_client_badness_history <boolean> <short>)
        ```
        set client badness history, true/false, # of bits to set
  - slug: net_quality_set_group_speculative_migration_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_group_speculative_migration_badness_history <boolean> <short>)
        ```
        true/false, # of bits to set
  - slug: net_quality_set_group_bridging_badness_history
    info:
      en: |-
        ```hsc
        (<void> net_quality_set_group_bridging_badness_history <boolean> <short>)
        ```
        true/false, # of bits to set
  - slug: net_join_friend
    info:
      en: |-
        ```hsc
        (<void> net_join_friend <string>)
        ```
        join a friend's squad session, 'none' to cancel a previous join
  - slug: net_join_squad_to_friend
    info:
      en: |-
        ```hsc
        (<void> net_join_squad_to_friend <string>)
        ```
        join our squad to a friend's squad session, 'none' to cancel a previous join
  - slug: net_join_sessionid
    info:
      en: |-
        ```hsc
        (<void> net_join_sessionid <string>)
        ```
        join a squad session by sessionid, 'none' to cancel a previous join
  - slug: net_join_squad_to_sessionid
    info:
      en: |-
        ```hsc
        (<void> net_join_squad_to_sessionid <string>)
        ```
        join a squad session by sessionid, 'none' to cancel a previous join
  - slug: net_enable_join_friend_loop
    info:
      en: |-
        ```hsc
        (<void> net_enable_join_friend_loop <long>)
        ```
        randomly join a friend every <param> seconds, 0 to reset
  - slug: net_set_maximum_player_count
    info:
      en: |-
        ```hsc
        (<void> net_set_maximum_player_count <long>)
        ```
        sets the maximum player count for this squad
  - slug: net_status_filter
    info:
      en: |-
        ```hsc
        (<void> net_status_filter <string>)
        ```
        filters the set of network status to display
  - slug: net_test_ping
    info:
      en: |-
        ```hsc
        (<void> net_test_ping)
        ```
        network test: sends a ping
  - slug: net_test_channel_delete
    info:
      en: |-
        ```hsc
        (<void> net_test_channel_delete)
        ```
        network test: deletes all channels
  - slug: net_test_delegate_host
    info:
      en: |-
        ```hsc
        (<void> net_test_delegate_host <long>)
        ```
        network test: delegate host to the specified player
  - slug: net_test_delegate_leader
    info:
      en: |-
        ```hsc
        (<void> net_test_delegate_leader <long>)
        ```
        network test: delegate leadership to the specified player
  - slug: net_test_map_name
    info:
      en: |-
        ```hsc
        (<void> net_test_map_name <string>)
        ```
        network test: sets the name of the scenario to play
  - slug: net_test_variant
    info:
      en: |-
        ```hsc
        (<void> net_test_variant <string_id>)
        ```
        network test: sets the game variant to play
  - slug: net_test_campaign_difficulty
    info:
      en: |-
        ```hsc
        (<void> net_test_campaign_difficulty <short>)
        ```
        network test: sets the difficulty of the campaign game to play
  - slug: net_test_player_color
    info:
      en: |-
        ```hsc
        (<void> net_test_player_color <long>)
        ```
        network test: temporarily sets the color for all local players
  - slug: net_test_reset_objects
    info:
      en: |-
        ```hsc
        (<void> net_test_reset_objects)
        ```
        network test: resets all objects on the map
  - slug: net_test_fatal_error
    info:
      en: |-
        ```hsc
        (<void> net_test_fatal_error)
        ```
        creates a fatal simulation error
  - slug: net_set_machine_name
    info:
      en: |-
        ```hsc
        (<void> net_set_machine_name <string>)
        ```
        sets the nickname of your xbox
  - slug: events_enabled
    info:
      en: |-
        ```hsc
        (<void> events_enabled <boolean>)
        ```
        enable/disable all events
  - slug: events_suppression
    info:
      en: |-
        ```hsc
        (<void> events_suppression <boolean>)
        ```
        enable/disable event suppression
  - slug: events_suppress_display
    info:
      en: |-
        ```hsc
        (<void> events_suppress_display <boolean>)
        ```
        disables console display for events
  - slug: events_global_display
    info:
      en: |-
        ```hsc
        (<void> events_global_display <event>)
        ```
        sets the global event console display level
  - slug: events_global_log
    info:
      en: |-
        ```hsc
        (<void> events_global_log <event>)
        ```
        sets the global event log level
  - slug: events_global_debugger
    info:
      en: |-
        ```hsc
        (<void> events_global_debugger <event>)
        ```
        sets the global event debugger display level
  - slug: events_global_datamine
    info:
      en: |-
        ```hsc
        (<void> events_global_datamine <event>)
        ```
        sets the global event datamine level
  - slug: events_category_display
    info:
      en: |-
        ```hsc
        (<void> events_category_display <string> <event>)
        ```
        sets the console display level for a named category of network events
  - slug: events_category_force_display
    info:
      en: |-
        ```hsc
        (<void> events_category_force_display <string> <event>)
        ```
        sets the forced console display level for a named category of network events
  - slug: events_category_log
    info:
      en: |-
        ```hsc
        (<void> events_category_log <string> <event>)
        ```
        sets the log level for a named category of network events
  - slug: events_category_debugger
    info:
      en: |-
        ```hsc
        (<void> events_category_debugger <string> <event>)
        ```
        sets the debugger display level for a named category of network events
  - slug: events_category_debugger_break
    info:
      en: |-
        ```hsc
        (<void> events_category_debugger_break <string> <event>)
        ```
        sets the debugger break level for a named category of network events
  - slug: events_category_halt
    info:
      en: |-
        ```hsc
        (<void> events_category_halt <string> <event>)
        ```
        sets the halt (assert/crash) level for a named category of network events
  - slug: events_category_datamine
    info:
      en: |-
        ```hsc
        (<void> events_category_datamine <string> <event>)
        ```
        sets the datamine level for a named category of network events
  - slug: events_list_categories
    info:
      en: |-
        ```hsc
        (<void> events_list_categories <string>)
        ```
        lists all categories that exist under a particular category string
  - slug: event_logs_snapshot
    info:
      en: |-
        ```hsc
        (<void> event_logs_snapshot)
        ```
        copy error files to the error snapshot folder
  - slug: events_disable_suppression
    info:
      en: |-
        ```hsc
        (<void> events_disable_suppression <boolean>)
        ```
        DEPRECATED(use events_suppression): disable/enable event suppression
  - slug: event_global_display_category
    info:
      en: |-
        ```hsc
        (<void> event_global_display_category <event>)
        ```
        DEPRECATED(use events_global_display): sets the global event console display level
  - slug: event_global_log_category
    info:
      en: |-
        ```hsc
        (<void> event_global_log_category <event>)
        ```
        DEPRECATED(use events_global_log): sets the global event log level
  - slug: event_global_remote_log_category
    info:
      en: |-
        ```hsc
        (<void> event_global_remote_log_category <event>)
        ```
        DEPRECATED(use events_global_datamine): sets the global event datamine level
  - slug: event_display_category
    info:
      en: |-
        ```hsc
        (<void> event_display_category <string> <event>)
        ```
        DEPRECATED(use events_category_display): sets the console display level for a named category of network events
  - slug: event_force_display_category
    info:
      en: |-
        ```hsc
        (<void> event_force_display_category <string> <event>)
        ```
        DEPRECATED(use events_category_force_display): sets the forced console display level for a named category of network events
  - slug: event_debugger_break_category
    info:
      en: |-
        ```hsc
        (<void> event_debugger_break_category <string> <event>)
        ```
        DEPRECATED(use events_category_debugger_break): sets the debugger break level for a named category of network events
  - slug: event_halt_category
    info:
      en: |-
        ```hsc
        (<void> event_halt_category <string> <event>)
        ```
        DEPRECATED(use events_category_halt): sets the halt (assert/crash) level for a named category of network events
  - slug: event_list_categories
    info:
      en: |-
        ```hsc
        (<void> event_list_categories <string>)
        ```
        DEPRECATED(use events_list_categories): lists all categories that exist under a particular category string
  - slug: events_suppress_console_display
    info:
      en: |-
        ```hsc
        (<void> events_suppress_console_display <boolean>)
        ```
        DEPRECATED(use events_suppress_display): disables console display for events
  - slug: play_bink_movie
    info:
      en: |-
        ```hsc
        (<void> play_bink_movie <string>)
        ```
        um...
  - slug: play_bink_movie_from_tag
    info:
      en: |-
        ```hsc
        (<void> play_bink_movie_from_tag <bink_definition>)
        ```
        play a bink movie from a tag
  - slug: play_credits_skip_to_menu
    info:
      en: |-
        ```hsc
        (<void> play_credits_skip_to_menu)
        ```
        plays credits movie, pressing any button will stop credits and launch main menu
  - slug: bink_time
    info:
      en: |-
        ```hsc
        (<long> bink_time)
        ```
        uh...
  - slug: set_global_doppler_factor
    info:
      en: |-
        ```hsc
        (<void> set_global_doppler_factor <real>)
        ```
        new doppler factor: <real>
  - slug: set_global_mixbin_headroom
    info:
      en: |-
        ```hsc
        (<void> set_global_mixbin_headroom <long> <long>)
        ```
        blah
  - slug: debug_sound_environment_source_parameter
    info:
      en: |-
        ```hsc
        (<void> debug_sound_environment_source_parameter <long> <real>)
        ```
        blah
  - slug: data_mine_set_mission_segment
    info:
      en: |-
        ```hsc
        (<void> data_mine_set_mission_segment <string>)
        ```
        sets the mission segment for single player data mine events
  - slug: data_mine_insert
    info:
      en: |-
        ```hsc
        (<void> data_mine_insert <string>)
        ```
        insert text and camera position in the data mine
  - slug: data_mine_upload
    info:
      en: |-
        ```hsc
        (<void> data_mine_upload)
        ```
        upload all data mining data files to debug server
  - slug: data_mine_enable
    info:
      en: |-
        ```hsc
        (<void> data_mine_enable <boolean>)
        ```
        enable/disable data mining
  - slug: data_mine_flush
    info:
      en: |-
        ```hsc
        (<void> data_mine_flush)
        ```
        flush any pending data mine data to disk
  - slug: data_mine_debug_menu_setting
    info:
      en: |-
        ```hsc
        (<void> data_mine_debug_menu_setting <string>)
        ```
        close debug menu and set user experience setting to string
  - slug: data_mine_open_debug_menu
    info:
      en: |-
        ```hsc
        (<void> data_mine_open_debug_menu)
        ```
        open debug menu
  - slug: data_mine_set_display_mission_segment
    info:
      en: |-
        ```hsc
        (<void> data_mine_set_display_mission_segment <boolean>)
        ```
        toggle display of data mine mission segment
  - slug: data_mine_set_header_flag
    info:
      en: |-
        ```hsc
        (<void> data_mine_set_header_flag <long> <boolean>)
        ```
        sets the source flags of the data mine header (used for backend bucketing)
  - slug: test_memory_allocators
    info:
      en: |-
        ```hsc
        (<void> test_memory_allocators <long> <short> <short> <short> <long>)
        ```
        performs tests on different memory allocators
  - slug: test_memory_allocators
    info:
      en: |-
        ```hsc
        (<void> test_memory_allocators <long> <short> <short> <short> <long> <string>)
        ```
        performs tests on different memory allocators and saves the results
  - slug: display_video_standard
    info:
      en: |-
        ```hsc
        (<void> display_video_standard)
        ```
        displays the video standard the game is in
  - slug: test_xcr_monkey_enable
    info:
      en: |-
        ```hsc
        (<void> test_xcr_monkey_enable <boolean>)
        ```
        enable/disable controller monkeys for all in game players
  - slug: test_show_guide_status
    info:
      en: |-
        ```hsc
        (<void> test_show_guide_status)
        ```
        prints the guide status as automation events.
  - slug: test_show_users_xuids
    info:
      en: |-
        ```hsc
        (<void> test_show_users_xuids)
        ```
        prints the signed in users' xuids as automation events.
  - slug: test_show_are_users_friends
    info:
      en: |-
        ```hsc
        (<void> test_show_are_users_friends <long> <string>)
        ```
        prints whether the current controller and specified xuid are friends as automation events
  - slug: test_invite_friend
    info:
      en: |-
        ```hsc
        (<void> test_invite_friend <long> <string>)
        ```
        shows the guide send friend invite ui from the current controller to the specified xuid
  - slug: test_get_squad_session_id
    info:
      en: |-
        ```hsc
        (<void> test_get_squad_session_id)
        ```
        get the current squad session id
  - slug: cui_get_active_screens
    info:
      en: |-
        ```hsc
        (<void> cui_get_active_screens <long>)
        ```
        <arbitrary int> list the current cui screens
  - slug: cui_get_screen_components
    info:
      en: |-
        ```hsc
        (<void> cui_get_screen_components <long> <long>)
        ```
        <arbitrary int> <window index> lists widgets in a screen
  - slug: cui_get_component_properties
    info:
      en: |-
        ```hsc
        (<void> cui_get_component_properties <long> <long> <string_id>)
        ```
        <arbitrary int> <window index> <component_name> lists a component's property names, types and values
  - slug: cui_send_button_press
    info:
      en: |-
        ```hsc
        (<void> cui_send_button_press <long> <long> <long> <string>)
        ```
        <arbitrary int> <window index> <controller index> <button name> sends the button press to the screen.  Use controller index -1 for automatically guessing the right controller.
  - slug: cui_invoke_list_item_by_string_id
    info:
      en: |-
        ```hsc
        (<void> cui_invoke_list_item_by_string_id <long> <long> <string_id> <string_id> <string_id> <string_id>)
        ```
        <command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one
  - slug: cui_invoke_list_item_by_long
    info:
      en: |-
        ```hsc
        (<void> cui_invoke_list_item_by_long <long> <long> <string_id> <string_id> <string_id> <long>)
        ```
        <command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one
  - slug: cui_invoke_list_item_by_boolean
    info:
      en: |-
        ```hsc
        (<void> cui_invoke_list_item_by_boolean <long> <long> <string_id> <string_id> <string_id> <boolean>)
        ```
        <command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one
  - slug: cui_invoke_list_item_by_text
    info:
      en: |-
        ```hsc
        (<void> cui_invoke_list_item_by_text <long> <long> <string_id> <string_id> <string_id> <string>)
        ```
        <command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one
  - slug: test_download_storage_file
    info:
      en: |-
        ```hsc
        (<void> test_download_storage_file <string> <string>)
        ```
        <url> <filename> downloads a file from LSP to the client
  - slug: test_game_results_save_to_file
    info:
      en: |-
        ```hsc
        (<void> test_game_results_save_to_file <string>)
        ```
        <filename> save game results to a file.
  - slug: test_game_results_load_from_file
    info:
      en: |-
        ```hsc
        (<void> test_game_results_load_from_file <string>)
        ```
        <filename> load game results into memory for use in the carnage report.  the format may change build to build causing this to fail or weird results to come up.
  - slug: test_game_results_make_random
    info:
      en: |-
        ```hsc
        (<void> test_game_results_make_random)
        ```
        makes random game results using the current variant
  - slug: test_fragment_utility_drive
    info:
      en: |-
        ```hsc
        (<void> test_fragment_utility_drive <long> <long> <long>)
        ```
        <file_count> <growth_repetitions> <growth_size> writes files of varying sizes to the utiltiy drive in an effort to fragment it really badly
  - slug: clear_webcache
    info:
      en: |-
        ```hsc
        (<void> clear_webcache)
        ```
        clears the webcache
  - slug: online_files_upload
    info:
      en: |-
        ```hsc
        (<void> online_files_upload <string>)
        ```
        <filename> enqueues the specified filename for upload
  - slug: online_files_throttle_bandwidth
    info:
      en: |-
        ```hsc
        (<void> online_files_throttle_bandwidth <long>)
        ```
        <bytes per second> sets the maximum bandwidth that online_files can use
  - slug: online_marketplace_refresh
    info:
      en: |-
        ```hsc
        (<void> online_marketplace_refresh)
        ```
        tells the marketplace manager to take another look at signed in users
  - slug: webstats_disable
    info:
      en: |-
        ```hsc
        (<void> webstats_disable <boolean>)
        ```
        disables webstats
  - slug: webstats_test_submit
    info:
      en: |-
        ```hsc
        (<void> webstats_test_submit <string>)
        ```
        submits a string to webstats upload
  - slug: webstats_test_submit_random_realistic
    info:
      en: |-
        ```hsc
        (<void> webstats_test_submit_random_realistic)
        ```
        submits a test multiplayer blob to webstats with realistic values
  - slug: webstats_throttle_bandwidth
    info:
      en: |-
        ```hsc
        (<void> webstats_throttle_bandwidth <long>)
        ```
        <bytes per second> sets the maximum bandwidth that webstats can use
  - slug: webstats_log_uploads
    info:
      en: |-
        ```hsc
        (<void> webstats_log_uploads <boolean>)
        ```
        toggle logging of webstats buffered uploads
  - slug: flag_new
    info:
      en: |-
        ```hsc
        (<void> flag_new <string> <string>)
        ```
        <name> <description>
  - slug: flag_new_at_look
    info:
      en: |-
        ```hsc
        (<void> flag_new_at_look <string> <string>)
        ```
        <name> <description>
  - slug: flags_clear
    info:
      en: |-
        ```hsc
        (<void> flags_clear)
        ```
        erases all comment flags when not in editor (sapien)
  - slug: flags_default_name
    info:
      en: |-
        ```hsc
        (<void> flags_default_name <string>)
        ```
        <default comment flag name>
  - slug: flags_default_comment
    info:
      en: |-
        ```hsc
        (<void> flags_default_comment <string>)
        ```
        <default comment flag description>
  - slug: flags_set_filter
    info:
      en: |-
        ```hsc
        (<void> flags_set_filter <string>)
        ```
        <flag name filter>
  - slug: bug_now
    info:
      en: |-
        ```hsc
        (<void> bug_now <string>)
        ```
        uploads files for bug <name>
  - slug: bug_now_lite
    info:
      en: |-
        ```hsc
        (<void> bug_now_lite <string>)
        ```
        uploads files (w/ no minidump) for bug <name>
  - slug: bug_now_auto
    info:
      en: |-
        ```hsc
        (<void> bug_now_auto <boolean>)
        ```
        uploads bug files, auto named <include_minidump>
  - slug: bug_now_on_next_kill
    info:
      en: |-
        ```hsc
        (<void> bug_now_on_next_kill <string>)
        ```
        uploads files for a bug <name> for the next kill that could produce an incident
  - slug: object_list_children
    info:
      en: |-
        ```hsc
        (<object_list> object_list_children <object> <object_definition>)
        ```
        returns list of child objects by definition.
  - slug: voice_set_outgoing_channel_count
    info:
      en: |-
        ```hsc
        (<void> voice_set_outgoing_channel_count <long> <long>)
        ```
        sets the outgoing bps for voice <in-game> <out-of-game>
  - slug: voice_set_voice_repeater_peer_index
    info:
      en: |-
        ```hsc
        (<void> voice_set_voice_repeater_peer_index <long>)
        ```
        sets the repeater peer index
  - slug: voice_set_mute
    info:
      en: |-
        ```hsc
        (<void> voice_set_mute <long> <long> <boolean>)
        ```
        mute a player
  - slug: net_leaderboard_clear_hopper
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_clear_hopper <long>)
        ```
        <user index> clears the hopper stats for the user
  - slug: net_leaderboard_clear_global_unarbitrated
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_clear_global_unarbitrated <long>)
        ```
        <user index> clears the global unarbitrated stats for the user
  - slug: net_leaderboard_refresh
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_refresh)
        ```
        <user index> refreshes stats for everybody in the session
  - slug: ai_selected_actor_jump
    info:
      en: |-
        ```hsc
        (<void> ai_selected_actor_jump <real> <real>)
        ```
        Makes the currently selected actor jump x wus forward and y wus up
  - slug: dump_loaded_tags
    info:
      en: |-
        ```hsc
        (<void> dump_loaded_tags)
        ```
        dump a list of open tags to tag_dump_<map_name>.txt
  - slug: interpolator_start
    info:
      en: |-
        ```hsc
        (<void> interpolator_start <string_id>)
        ```
        <name> starts up the specified interpolator - uses the name of the interpolator defined in tags, NOT scenario_interpolatorXX!
  - slug: interpolator_stop
    info:
      en: |-
        ```hsc
        (<void> interpolator_stop <string_id>)
        ```
        <name> stops the progression of the specified interpolator - uses the name of the interpolator defined in tags, NOT scenario_interpolatorXX!
  - slug: interpolator_stop_all
    info:
      en: |-
        ```hsc
        (<void> interpolator_stop_all)
        ```
        stops all interpolators
  - slug: interpolator_dump
    info:
      en: |-
        ```hsc
        (<void> interpolator_dump <string_id>)
        ```
        <name> prints out the status of the specified interpolator
  - slug: interpolator_dump_all
    info:
      en: |-
        ```hsc
        (<void> interpolator_dump_all)
        ```
        prints out the status of all defined interpolators in the scenario
  - slug: set_pc_runtime_language
    info:
      en: |-
        ```hsc
        (<void> set_pc_runtime_language <string>)
        ```
        sets the pc language from a string
  - slug: animation_cache_stats_reset
    info:
      en: |-
        ```hsc
        (<void> animation_cache_stats_reset)
        ```
  - slug: cinematic_clone_players_weapon
    info:
      en: |-
        ```hsc
        (<void> cinematic_clone_players_weapon <object> <string_id> <string_id>)
        ```
        clone the first player's most reasonable weapon and attach it to the specified object's marker
  - slug: cinematic_move_attached_objects
    info:
      en: |-
        ```hsc
        (<void> cinematic_move_attached_objects <object> <string_id> <string_id> <string_id>)
        ```
        move the object's children attached to the first marker to the second marker
  - slug: vehicle_enable_ghost_effects
    info:
      en: |-
        ```hsc
        (<void> vehicle_enable_ghost_effects <boolean>)
        ```
  - slug: set_global_sound_environment
    info:
      en: |-
        ```hsc
        (<void> set_global_sound_environment <real> <real> <real> <real> <long> <real>)
        ```
        this is your brain on drugs
  - slug: game_save_cinematic_skip
    info:
      en: |-
        ```hsc
        (<void> game_save_cinematic_skip)
        ```
        don't use this, except in one place.
  - slug: cinematic_outro_start
    info:
      en: |-
        ```hsc
        (<void> cinematic_outro_start)
        ```
        flag this cutscene as an outro cutscene
  - slug: cinematic_enable_ambience_details
    info:
      en: |-
        ```hsc
        (<void> cinematic_enable_ambience_details <boolean>)
        ```
        enable/disable ambience details in cinematics
  - slug: cache_block_for_one_frame
    info:
      en: |-
        ```hsc
        (<void> cache_block_for_one_frame)
        ```
        call this to force texture and geometry cache to block until satiated
  - slug: sound_suppress_ambience_update_on_revert
    info:
      en: |-
        ```hsc
        (<void> sound_suppress_ambience_update_on_revert)
        ```
        call this when transitioning between two cinematics so ambience won't fade in between the skips
  - slug: render_autoexposure_enable
    info:
      en: |-
        ```hsc
        (<void> render_autoexposure_enable <boolean>)
        ```
        toggle autoexposure
  - slug: render_exposure_full
    info:
      en: |-
        ```hsc
        (<void> render_exposure_full <real> <real> <real> <real> <real>)
        ```
        animate exposure from <initial> to <final> stops using <initial> to <final> opacity in <seconds>
  - slug: render_exposure_fade_in
    info:
      en: |-
        ```hsc
        (<void> render_exposure_fade_in <real> <real>)
        ```
        fade to animated exposure <stops> in <seconds>
  - slug: render_exposure_fade_out
    info:
      en: |-
        ```hsc
        (<void> render_exposure_fade_out <real>)
        ```
        fade to default exposure settings in <seconds>
  - slug: render_exposure
    info:
      en: |-
        ```hsc
        (<void> render_exposure <real> <real>)
        ```
        fade to animated exposure <stops> in <seconds>
  - slug: render_autoexposure_instant
    info:
      en: |-
        ```hsc
        (<void> render_autoexposure_instant <long>)
        ```
        instantly adopt auto exposure values in the next N frames
  - slug: render_exposure_set_environment_darken
    info:
      en: |-
        ```hsc
        (<void> render_exposure_set_environment_darken <real>)
        ```
        set environmental darkening
  - slug: render_depth_of_field_enable
    info:
      en: |-
        ```hsc
        (<void> render_depth_of_field_enable <boolean>)
        ```
        turns depth of field on and off
  - slug: render_depth_of_field
    info:
      en: |-
        ```hsc
        (<void> render_depth_of_field <real> <real> <real> <real>)
        ```
        animate depth of field, in focus from <near> to <far>, with depth of field <depth>, in <ticks>
  - slug: render_dof_focus_depth
    info:
      en: |-
        ```hsc
        (<void> render_dof_focus_depth <real>)
        ```
        interpolate depth of field to <depth>
  - slug: render_dof_blur_animate
    info:
      en: |-
        ```hsc
        (<void> render_dof_blur_animate <real> <real>)
        ```
        interpolate depth of field maximum blur to <blur> in <ticks>
  - slug: render_debug_video_mode
    info:
      en: |-
        ```hsc
        (<void> render_debug_video_mode)
        ```
        displays the current video mode
  - slug: cinematic_lightmap_shadow_disable
    info:
      en: |-
        ```hsc
        (<void> cinematic_lightmap_shadow_disable)
        ```
        turn off lightmap shadow in cinematics
  - slug: cinematic_lightmap_shadow_enable
    info:
      en: |-
        ```hsc
        (<void> cinematic_lightmap_shadow_enable)
        ```
        turn on lightmap shadow in cinematics
  - slug: predict_animation
    info:
      en: |-
        ```hsc
        (<void> predict_animation <animation_graph> <string_id>)
        ```
        begin loading an animation for the graph provided
  - slug: mp_player_count_by_team
    info:
      en: |-
        ```hsc
        (<long> mp_player_count_by_team <mp_team>)
        ```
        given a team index, returns an object list containing all living player objects belonging to that team
  - slug: mp_players_by_team
    info:
      en: |-
        ```hsc
        (<object_list> mp_players_by_team <mp_team>)
        ```
        given a team index, returns an object list containing all living player objects belonging to that team
  - slug: mp_active_player_count_by_team
    info:
      en: |-
        ```hsc
        (<long> mp_active_player_count_by_team <mp_team>)
        ```
        given a team index, returns an object list containing all living player objects belonging to that team
  - slug: deterministic_end_game
    info:
      en: |-
        ```hsc
        (<void> deterministic_end_game)
        ```
        end game deterministically, by inserting a simulation queue event
  - slug: mp_game_won
    info:
      en: |-
        ```hsc
        (<void> mp_game_won <mp_team>)
        ```
        given a team index, declares the game a victory for that team and a loss for all others
  - slug: mp_respawn_override_timers
    info:
      en: |-
        ```hsc
        (<void> mp_respawn_override_timers <mp_team>)
        ```
        causes all players on the specified team waiting to respawn (due to timer) to respawn immediately
  - slug: mp_ai_allegiance
    info:
      en: |-
        ```hsc
        (<void> mp_ai_allegiance <team> <mp_team>)
        ```
        causes an allegiance to be formed between an AI squad team and a multiplayer team
  - slug: mp_allegiance
    info:
      en: |-
        ```hsc
        (<void> mp_allegiance <mp_team> <mp_team>)
        ```
        create an allegiance between two multiplayer teams
  - slug: mp_round_started
    info:
      en: |-
        ```hsc
        (<boolean> mp_round_started)
        ```
        used to determine if the mp game is in the active-round phase or not
  - slug: mp_round_end_with_winning_player
    info:
      en: |-
        ```hsc
        (<void> mp_round_end_with_winning_player <player>)
        ```
        ends the current round with a winning player
  - slug: mp_round_end_with_winning_team
    info:
      en: |-
        ```hsc
        (<void> mp_round_end_with_winning_team <mp_team>)
        ```
        ends the current round with a winning team
  - slug: mp_round_end
    info:
      en: |-
        ```hsc
        (<void> mp_round_end)
        ```
        ends the current round with no winning team
  - slug: mp_scripts_reset
    info:
      en: |-
        ```hsc
        (<void> mp_scripts_reset)
        ```
        on the host in a distributed game, resets the scripts (but not internal hs globals)
  - slug: tag_file_set_backend
    info:
      en: |-
        ```hsc
        (<void> tag_file_set_backend <string>)
        ```
        override the tag file system backend
  - slug: mp_debug_goal_object_boundary_geometry
    info:
      en: |-
        ```hsc
        (<void> mp_debug_goal_object_boundary_geometry <boolean>)
        ```
        toggle debug geometry for multiplayer goal objects
  - slug: mp_dump_candy_monitor_state
    info:
      en: |-
        ```hsc
        (<void> mp_dump_candy_monitor_state)
        ```
        dumps the current candy monitor state to a file on disk
  - slug: determinism_debug_manager_enable_logging
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_logging <boolean>)
        ```
        enable/disable determinism logging
  - slug: determinism_debug_manager_set_trace_flags
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_set_trace_flags <long>)
        ```
        set which determinism debugging traces should be turned on
  - slug: determinism_debug_manager_enable_game_state_checksum
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_game_state_checksum <boolean>)
        ```
        enable/disable determinism checkpoints
  - slug: determinism_debug_manager_enable_trace
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_trace <boolean>)
        ```
        enable determinism tracing
  - slug: determinism_debug_manager_set_consumer_sample_level
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_set_consumer_sample_level <string> <long>)
        ```
        sets sample level for a consumer
  - slug: determinism_log_compare_log_files
    info:
      en: |-
        ```hsc
        (<void> determinism_log_compare_log_files <string> <string>)
        ```
        comares determinism log files
  - slug: determinism_debug_manager_enable_log_file_comparision_on_oos
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_log_file_comparision_on_oos <boolean>)
        ```
        enables/disables determinism log file comparision on oos
  - slug: saved_film_play
    info:
      en: |-
        ```hsc
        (<void> saved_film_play <controller> <string>)
        ```
        plays a saved film for given controller
  - slug: saved_film_play_last
    info:
      en: |-
        ```hsc
        (<void> saved_film_play_last)
        ```
        play back last recorded saved film for given controller
  - slug: saved_film_disable_version_checking
    info:
      en: |-
        ```hsc
        (<void> saved_film_disable_version_checking <boolean>)
        ```
        disable saved film version checking
  - slug: saved_film_toggle_debug_saving
    info:
      en: |-
        ```hsc
        (<void> saved_film_toggle_debug_saving <boolean>)
        ```
        toggle saving of last film to the debug output directory automatically after each game level
  - slug: saved_films_show_timestamp
    info:
      en: |-
        ```hsc
        (<void> saved_films_show_timestamp <boolean>)
        ```
        toggle showing timestamp for saved film playback
  - slug: mover_set_program
    info:
      en: |-
        ```hsc
        (<boolean> mover_set_program <object> <short>)
        ```
        Set the motor program of the given mover object
  - slug: floating_point_exceptions_enable
    info:
      en: |-
        ```hsc
        (<void> floating_point_exceptions_enable <boolean>)
        ```
        enables/disables floating point exceptions
  - slug: tag_reload_force
    info:
      en: |-
        ```hsc
        (<void> tag_reload_force <string>)
        ```
        rather than force a painful xsync to test xsync, allow me to fake a tag_reload
  - slug: tag_unload_force
    info:
      en: |-
        ```hsc
        (<void> tag_unload_force <string>)
        ```
        call tag_unload
  - slug: tag_load_force
    info:
      en: |-
        ```hsc
        (<void> tag_load_force <string>)
        ```
        call tag_load
  - slug: predict_bink_movie
    info:
      en: |-
        ```hsc
        (<void> predict_bink_movie <string>)
        ```
        um2...
  - slug: predict_bink_movie_from_tag
    info:
      en: |-
        ```hsc
        (<void> predict_bink_movie_from_tag <bink_definition>)
        ```
        um2...
  - slug: profiler_dump_history
    info:
      en: |-
        ```hsc
        (<void> profiler_dump_history)
        ```
        dump profile history.
  - slug: camera_set_mode
    info:
      en: |-
        ```hsc
        (<void> camera_set_mode <unit> <long>)
        ```
        <unit_index> <mode_index> sets user's camera perspective
  - slug: camera_set_flying_cam_at_point
    info:
      en: |-
        ```hsc
        (<void> camera_set_flying_cam_at_point <unit> <cutscene_camera_point>)
        ```
        <unit_index> <camera_point> sets a flying camera perspective
  - slug: camera_set_target
    info:
      en: |-
        ```hsc
        (<void> camera_set_target <unit> <object>)
        ```
        <unit_index> <object_index> sets the current camera's target
  - slug: camera_set_orbiting_cam_at_target_relative_point
    info:
      en: |-
        ```hsc
        (<void> camera_set_orbiting_cam_at_target_relative_point <unit> <string_id> <real> <real> <real>)
        ```
        <unit_index> <target_marker_name> <relative_x_position> <relative_y_position> <relative_z_position> sets an orbiting camera pointing at a given marker from an object relative point 
  - slug: director_cycle_debug_camera
    info:
      en: |-
        ```hsc
        (<void> director_cycle_debug_camera <long>)
        ```
        <user index>
  - slug: game_coop_player_count
    info:
      en: |-
        ```hsc
        (<long> game_coop_player_count)
        ```
        returns the number of coop players active in game
  - slug: player_force_mode
    info:
      en: |-
        ```hsc
        (<void> player_force_mode <string_id>)
        ```
        force your will upon the player
  - slug: profiler_output_pulse
    info:
      en: |-
        ```hsc
        (<void> profiler_output_pulse)
        ```
        dump profile stats to telnet console.
  - slug: string_id_name
    info:
      en: |-
        ```hsc
        (<void> string_id_name <long>)
        ```
        prints the name of the string id to the console
  - slug: find
    info:
      en: |-
        ```hsc
        (<void> find <string>)
        ```
        prints any hs command matching the string passed in
  - slug: add_recycling_volume
    info:
      en: |-
        ```hsc
        (<void> add_recycling_volume <trigger_volume> <long> <long>)
        ```
        removes garbage in specified trigger volume to a max count over n seconds
  - slug: add_recycling_volume_by_type
    info:
      en: |-
        ```hsc
        (<void> add_recycling_volume_by_type <trigger_volume> <long> <long> <long>)
        ```
        removes garbage objects matching the type mask in the specified trigger volume to a max count over n seconds. 1=biped, 2=vehicle, 4=weapon, 8=equipment, and 1024=crate. Add values together for combos, zero means all types Syntax: <trigger_volume> <max_count> <time_to_collect> <type_mask> 
  - slug: tag_resources_set_per_frame_publish
    info:
      en: |-
        ```hsc
        (<void> tag_resources_set_per_frame_publish <boolean>)
        ```
        turns on/off per frame resource publish (stress testing)
  - slug: object_recycling_clear_history
    info:
      en: |-
        ```hsc
        (<void> object_recycling_clear_history)
        ```
        clear object recycling history
  - slug: dump_cinematics_script
    info:
      en: |-
        ```hsc
        (<void> dump_cinematics_script)
        ```
        dump the cinematic script to cinematic_dump.txt
  - slug: dump_tag_stats
    info:
      en: |-
        ```hsc
        (<void> dump_tag_stats)
        ```
        dump tag group memory usage stats into tag_groups_memory_usage_stats.txt
  - slug: global_preferences_clear
    info:
      en: |-
        ```hsc
        (<void> global_preferences_clear)
        ```
        clears all game preference information
  - slug: network_storage_set_storage_subdirectory
    info:
      en: |-
        ```hsc
        (<void> network_storage_set_storage_subdirectory <string>)
        ```
        <subdirectory> The default is the build number or 'untracked'
  - slug: network_storage_set_storage_user
    info:
      en: |-
        ```hsc
        (<void> network_storage_set_storage_user <string>)
        ```
        <user> Use the network file stored on untracked\<user>.
  - slug: network_storage_run_locally
    info:
      en: |-
        ```hsc
        (<void> network_storage_run_locally <boolean>)
        ```
        run off local storage files e:\reach\storage\title\<title_id>\...
  - slug: status_line_dump
    info:
      en: |-
        ```hsc
        (<void> status_line_dump)
        ```
        dumps active status_lines to system_log.txt
  - slug: game_tick_get
    info:
      en: |-
        ```hsc
        (<long> game_tick_get)
        ```
        returns current game tick
  - slug: loop_it
    info:
      en: |-
        ```hsc
        (<void> loop_it <string>)
        ```
        runs the expression at most once per tick
  - slug: loop_clear
    info:
      en: |-
        ```hsc
        (<void> loop_clear)
        ```
        runs the expression at most once per tick
  - slug: status_lines_enable
    info:
      en: |-
        ```hsc
        (<void> status_lines_enable <string>)
        ```
        enables status_lines that were initialized with identifiers that match the input substring
  - slug: status_lines_disable
    info:
      en: |-
        ```hsc
        (<void> status_lines_disable <string>)
        ```
        disables status_lines that were initialized with identifiers that match the input substring
  - slug: on_target_platform
    info:
      en: |-
        ```hsc
        (<boolean> on_target_platform)
        ```
        returns true if the game thinks it's running on the target platform
  - slug: f7_profiler_enable
    info:
      en: |-
        ```hsc
        (<void> f7_profiler_enable <boolean>)
        ```
        toggles the profile collection on/off - use to eliminate 95% of f7 profiler CPU overhead if desired for testing.
  - slug: f7_profiler_substring_activate
    info:
      en: |-
        ```hsc
        (<void> f7_profiler_substring_activate <string>)
        ```
        activates profile sections based on a substring. Supports * wildcard. Use profiler_activate "" to reset filtering.
  - slug: f7_profiler_substring_deactivate
    info:
      en: |-
        ```hsc
        (<void> f7_profiler_substring_deactivate <string>)
        ```
        deactivates profile sections based on a substring. Supports * wildcard. Use profiler_deactivate "" to reset filtering.
  - slug: net_game_set_player_standing
    info:
      en: |-
        ```hsc
        (<void> net_game_set_player_standing <string> <long>)
        ```
        set's a player's standing by gamertag
  - slug: net_get_game_id
    info:
      en: |-
        ```hsc
        (<void> net_get_game_id)
        ```
        prints the id of the game to the console
  - slug: generate_rsa_2048_key_pair
    info:
      en: |-
        ```hsc
        (<void> generate_rsa_2048_key_pair)
        ```
        generates an RSA key pair
  - slug: create_secure_test_file
    info:
      en: |-
        ```hsc
        (<void> create_secure_test_file)
        ```
        generates a compressed encrypted test file
  - slug: net_test_matchmaking_hopper_list
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_hopper_list)
        ```
        prints the hopper list
  - slug: net_test_matchmaking_hopper_game_list
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_hopper_game_list)
        ```
        prints games for the current hopper
  - slug: net_test_matchmaking_hopper_set_game
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_hopper_set_game <long>)
        ```
        sets the game vairant for the current hopper
  - slug: net_test_matchmaking_set_voting_system
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_set_voting_system <long>)
        ```
        sets the voting system for matchmaking
  - slug: net_test_matchmaking_set_arena_season
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_set_arena_season <long>)
        ```
        sets the arena season (NONE for default, 0 to disable, N for a season)
  - slug: net_test_matchmaking_suppress_arena_popup
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_suppress_arena_popup <boolean>)
        ```
        don't popup arena screens - for stress
  - slug: net_test_matchmaking_test_arena_screen
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_test_arena_screen <controller> <long> <long> <long>)
        ```
        pop an arena acreen for a controller (0..4) <day rating> <tier>
  - slug: net_test_matchmaking_set_arena_stats
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_set_arena_stats <controller> <long> <long>)
        ```
        sets the arena stats for a controller (<day rating> <tier>) NONE for no tier
  - slug: saved_film_set_playback_game_speed
    info:
      en: |-
        ```hsc
        (<void> saved_film_set_playback_game_speed <real>)
        ```
        set the saved film playback speed
  - slug: noguchis_mystery_tour
    info:
      en: |-
        ```hsc
        (<void> noguchis_mystery_tour <string>)
        ```
        set the additional music directory to dump into the cache file
  - slug: designer_zone_sync
    info:
      en: |-
        ```hsc
        (<void> designer_zone_sync)
        ```
        synchronizes global objects with loaded designer zones
  - slug: dump_designer_zone
    info:
      en: |-
        ```hsc
        (<void> dump_designer_zone <designer_zone>)
        ```
        dump interesting info about a designer zone
  - slug: designer_zone_activate
    info:
      en: |-
        ```hsc
        (<void> designer_zone_activate <designer_zone>)
        ```
        activate designer zone
  - slug: designer_zone_deactivate
    info:
      en: |-
        ```hsc
        (<void> designer_zone_deactivate <designer_zone>)
        ```
        deactivates designer zone, deletes objects that were part of that designer zone
  - slug: object_set_always_active
    info:
      en: |-
        ```hsc
        (<void> object_set_always_active <object> <boolean>)
        ```
        sets/unsets the object always active flag to ignore pvs changes
  - slug: saved_film_seek_to_film_tick
    info:
      en: |-
        ```hsc
        (<void> saved_film_seek_to_film_tick <long>)
        ```
        seeks to a film tick
  - slug: saved_film_seek_to_film_timestamp
    info:
      en: |-
        ```hsc
        (<void> saved_film_seek_to_film_timestamp <real>)
        ```
        seeks to a film time
  - slug: tag_is_active
    info:
      en: |-
        ```hsc
        (<boolean> tag_is_active <any_tag_not_resolving>)
        ```
        returns true/false if you can create this tag with the active zones
  - slug: tag_resources_set_incremental_publish
    info:
      en: |-
        ```hsc
        (<void> tag_resources_set_incremental_publish <boolean>)
        ```
        turns on/off incremental resource publish (prediction)
  - slug: tag_resources_enable_optional_caching
    info:
      en: |-
        ```hsc
        (<void> tag_resources_enable_optional_caching <boolean>)
        ```
        turns on/off optional resource prediction
  - slug: dump_active_resources
    info:
      en: |-
        ```hsc
        (<void> dump_active_resources)
        ```
        blah
  - slug: object_set_persistent
    info:
      en: |-
        ```hsc
        (<void> object_set_persistent <object> <boolean>)
        ```
        <object_index> <true/false> prevent this object from being garbage collected
  - slug: display_zone_size_estimates
    info:
      en: |-
        ```hsc
        (<void> display_zone_size_estimates <boolean>)
        ```
        display zone size estimates HUD
  - slug: report_zone_size_estimates
    info:
      en: |-
        ```hsc
        (<void> report_zone_size_estimates)
        ```
        dump zone size estimates to design report log
  - slug: net_test_disconnect_squad
    info:
      en: |-
        ```hsc
        (<void> net_test_disconnect_squad)
        ```
        disconnects the squad session
  - slug: net_test_disconnect_group
    info:
      en: |-
        ```hsc
        (<void> net_test_disconnect_group)
        ```
        disconnects the group session
  - slug: net_test_clear_squad_session_parameter
    info:
      en: |-
        ```hsc
        (<void> net_test_clear_squad_session_parameter <long>)
        ```
        clears a squad session parameter
  - slug: net_test_clear_group_session_parameter
    info:
      en: |-
        ```hsc
        (<void> net_test_clear_group_session_parameter <long>)
        ```
        clears a group session parameter
  - slug: net_test_life_cycle_pause
    info:
      en: |-
        ```hsc
        (<void> net_test_life_cycle_pause <string> <boolean>)
        ```
        pauses the life cycle in the specified state
  - slug: net_test_life_cycle_display_states
    info:
      en: |-
        ```hsc
        (<void> net_test_life_cycle_display_states)
        ```
        display the life cycle states
  - slug: net_test_life_cycle_abort_matchmaking
    info:
      en: |-
        ```hsc
        (<void> net_test_life_cycle_abort_matchmaking)
        ```
        backs out of matchmaking
  - slug: overlapped_display_task_descriptions
    info:
      en: |-
        ```hsc
        (<void> overlapped_display_task_descriptions)
        ```
        displays all tasks
  - slug: overlapped_task_inject_error
    info:
      en: |-
        ```hsc
        (<void> overlapped_task_inject_error <string> <boolean>)
        ```
        inject error for tasks
  - slug: net_leaderboard_clear_hopper_all_users
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_clear_hopper_all_users <string>)
        ```
        clears the hopper stats for the all user
  - slug: net_leaderboard_clear_global_unarbitrated_all_users
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_clear_global_unarbitrated_all_users <string>)
        ```
        clears the global unarbitrated stats for all user
  - slug: test_sapien_crash
    info:
      en: |-
        ```hsc
        (<void> test_sapien_crash)
        ```
  - slug: output_window_add_category
    info:
      en: |-
        ```hsc
        (<void> output_window_add_category <string>)
        ```
        Add an event category to be watched in the output window.
  - slug: output_window_remove_category
    info:
      en: |-
        ```hsc
        (<void> output_window_remove_category <string>)
        ```
        Remove an event category from being watched in the output window.
  - slug: output_window_list_categories
    info:
      en: |-
        ```hsc
        (<void> output_window_list_categories)
        ```
        List all the event categories being watched in the output window.
  - slug: decorators_split
    info:
      en: |-
        ```hsc
        (<void> decorators_split <long> <real>)
        ```
        duplicates decorator set <index> and moves <percentage> of the decorators into it
  - slug: bandwidth_profiler_enable
    info:
      en: |-
        ```hsc
        (<void> bandwidth_profiler_enable <boolean>)
        ```
        enables bandwidth profiler
  - slug: bandwidth_profiler_set_context
    info:
      en: |-
        ```hsc
        (<void> bandwidth_profiler_set_context <boolean>)
        ```
        sets bandwidth profiler context
  - slug: simulation_priority_display_set_enabled
    info:
      en: |-
        ```hsc
        (<void> simulation_priority_display_set_enabled <boolean>)
        ```
        enable/disable the priority display system
  - slug: simulation_priority_display_set_object_names
    info:
      en: |-
        ```hsc
        (<void> simulation_priority_display_set_object_names <boolean>)
        ```
        enable/disable object name display
  - slug: simulation_priority_display_set_machine_filter
    info:
      en: |-
        ```hsc
        (<void> simulation_priority_display_set_machine_filter)
        ```
        set machine filter to output user 0's currently watched player (selected via follow cam in film)
  - slug: simulation_priority_display_set_priority_scope_tick
    info:
      en: |-
        ```hsc
        (<void> simulation_priority_display_set_priority_scope_tick)
        ```
        coder feature
  - slug: simulation_priority_display_set_priority_scope_second_worst
    info:
      en: |-
        ```hsc
        (<void> simulation_priority_display_set_priority_scope_second_worst)
        ```
        coder feature
  - slug: simulation_priority_display_set_priority_scope_second_best
    info:
      en: |-
        ```hsc
        (<void> simulation_priority_display_set_priority_scope_second_best)
        ```
        coder feature
  - slug: simulation_priority_display_set_color_by_relevance
    info:
      en: |-
        ```hsc
        (<void> simulation_priority_display_set_color_by_relevance)
        ```
        coder feature
  - slug: simulation_priority_display_set_color_by_update_period
    info:
      en: |-
        ```hsc
        (<void> simulation_priority_display_set_color_by_update_period)
        ```
        coder feature
  - slug: simulation_priority_display_set_color_by_final_priority
    info:
      en: |-
        ```hsc
        (<void> simulation_priority_display_set_color_by_final_priority)
        ```
        coder feature
  - slug: overlapped_task_pause
    info:
      en: |-
        ```hsc
        (<void> overlapped_task_pause <string> <boolean>)
        ```
        pause tasks
  - slug: net_banhammer_set_controller_cheat_flags
    info:
      en: |-
        ```hsc
        (<void> net_banhammer_set_controller_cheat_flags <controller> <string> <boolean>)
        ```
        sets cheat flags
  - slug: net_banhammer_set_controller_ban_flags
    info:
      en: |-
        ```hsc
        (<void> net_banhammer_set_controller_ban_flags <controller> <string> <long> <boolean>)
        ```
        sets ban flags
  - slug: net_banhammer_dump_strings
    info:
      en: |-
        ```hsc
        (<void> net_banhammer_dump_strings)
        ```
        display cheat/ban strings
  - slug: net_banhammer_dump_repeated_play_list
    info:
      en: |-
        ```hsc
        (<void> net_banhammer_dump_repeated_play_list)
        ```
        display repeated play lists
  - slug: net_banhammer_set_locality_override
    info:
      en: |-
        ```hsc
        (<void> net_banhammer_set_locality_override <real> <real> <real> <boolean>)
        ```
        slam machine locality
  - slug: net_leaderboard_set_user_stats
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_set_user_stats <long> <real> <real> <long> <long> <long>)
        ```
        slams user leaderboard values locally
  - slug: net_leaderboard_set_user_game_stats
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_set_user_game_stats <long> <long> <long> <long> <long>)
        ```
        slams more user stats
  - slug: net_build_map_variant
    info:
      en: |-
        ```hsc
        (<void> net_build_map_variant <boolean> <string>)
        ```
        writes the current map variant to a file in .bin format (same as .mvar)
  - slug: net_verify_map_variant
    info:
      en: |-
        ```hsc
        (<void> net_verify_map_variant <string>)
        ```
        verifies the contents of a packed map variant file
  - slug: net_load_and_use_map_variant
    info:
      en: |-
        ```hsc
        (<void> net_load_and_use_map_variant <string>)
        ```
        reads a built map variant and slams it into the squad session.
  - slug: write_current_map_variant
    info:
      en: |-
        ```hsc
        (<void> write_current_map_variant <boolean> <string>)
        ```
        writes the current map variant to a file in .mvar format (same as .bin). See map_variants subdirectory on your devkit.
  - slug: read_map_variant_and_make_current
    info:
      en: |-
        ```hsc
        (<void> read_map_variant_and_make_current <string>)
        ```
        Reads a map variant from a .mvar file in the map_variants subdirectory and slams it into the squad session.  Can be executed in the lobby.
  - slug: async_set_thread_work_delay_milliseconds
    info:
      en: |-
        ```hsc
        (<void> async_set_thread_work_delay_milliseconds <long> <long>)
        ```
        set an artificial delay time for a specific async thread to test the performance of any asynchronous task work
  - slug: tag_resources_set_demand_throttle_to_io
    info:
      en: |-
        ```hsc
        (<void> tag_resources_set_demand_throttle_to_io <boolean>)
        ```
        turns on/off demand throttling based on io
  - slug: tag_resources_flush_optional
    info:
      en: |-
        ```hsc
        (<void> tag_resources_flush_optional)
        ```
        flushes optional resources
  - slug: set_performance_throttle
    info:
      en: |-
        ```hsc
        (<void> set_performance_throttle <string> <long> <real>)
        ```
        sets a default value for a performance throttle for a given number of players
  - slug: get_performance_throttle
    info:
      en: |-
        ```hsc
        (<real> get_performance_throttle <string> <long>)
        ```
        gets the value of a performance throttle for a given number of players
  - slug: cinematic_zone_activate
    info:
      en: |-
        ```hsc
        (<void> cinematic_zone_activate <long>)
        ```
        activates scenario cinematic zone (automatically generated script function!)
  - slug: cinematic_zone_deactivate
    info:
      en: |-
        ```hsc
        (<void> cinematic_zone_deactivate <long>)
        ```
        deactivates scenario cinematic zone (automatically generated script function!)
  - slug: cinematic_zone_activate_from_editor
    info:
      en: |-
        ```hsc
        (<void> cinematic_zone_activate_from_editor <any_tag>)
        ```
        activates cinematic zone from tag (automatically generated script function!)
  - slug: cinematic_zone_deactivate_from_editor
    info:
      en: |-
        ```hsc
        (<void> cinematic_zone_deactivate_from_editor <any_tag>)
        ```
        deactivates cinematic zone from tag (automatically generated script function!)
  - slug: tiling_current
    info:
      en: |-
        ```hsc
        (<long> tiling_current)
        ```
        returns the actual tiling configuration (could have been overridden from the requested configuration)
  - slug: unit_limit_lipsync_to_mouth_only
    info:
      en: |-
        ```hsc
        (<void> unit_limit_lipsync_to_mouth_only <unit> <boolean>)
        ```
        cinematic lipsync means you can't use all the facial bones, just the mouth
  - slug: dump_active_zone_tags
    info:
      en: |-
        ```hsc
        (<void> dump_active_zone_tags)
        ```
        blah
  - slug: tag_resources_enable_fast_prediction
    info:
      en: |-
        ```hsc
        (<void> tag_resources_enable_fast_prediction <boolean>)
        ```
        turns on/off faster prediction, in case I fucked up something
  - slug: unit_start_first_person_custom_animation
    info:
      en: |-
        ```hsc
        (<boolean> unit_start_first_person_custom_animation <unit> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on a unit (puts away weapon if last parameter is TRUE)
  - slug: unit_is_playing_custom_first_person_animation
    info:
      en: |-
        ```hsc
        (<boolean> unit_is_playing_custom_first_person_animation <unit>)
        ```
        returns TRUE if the given unit is still playing a custom animation in first person
  - slug: unit_stop_first_person_custom_animation
    info:
      en: |-
        ```hsc
        (<void> unit_stop_first_person_custom_animation <unit>)
        ```
        ends any custom first person animation running on the unit
  - slug: prepare_to_switch_to_zone_set
    tags:
      - zone_set
    info:
      en: |-
        ```hsc
        (<void> prepare_to_switch_to_zone_set <zone_set>)
        ```
        prepare for switch to zone set
  - slug: cinematic_zone_activate_for_debugging
    info:
      en: |-
        ```hsc
        (<void> cinematic_zone_activate_for_debugging <long>)
        ```
        activates scenario cinematic zone for debugging (automatically generated script function!)
  - slug: unit_play_random_ping
    info:
      en: |-
        ```hsc
        (<void> unit_play_random_ping <unit>)
        ```
        plays a random ping on the unit
  - slug: player_control_fade_out_all_input
    info:
      en: |-
        ```hsc
        (<void> player_control_fade_out_all_input <real>)
        ```
        fade out all play control over x seconds
  - slug: player_control_fade_in_all_input
    info:
      en: |-
        ```hsc
        (<void> player_control_fade_in_all_input <real>)
        ```
        fade in all play control over x seconds
  - slug: player_control_lock_gaze
    info:
      en: |-
        ```hsc
        (<void> player_control_lock_gaze <player> <point_reference> <real>)
        ```
        player turn to face point with max velocity degrees/second
  - slug: player_control_unlock_gaze
    info:
      en: |-
        ```hsc
        (<void> player_control_unlock_gaze <player>)
        ```
        unlock player from any gaze point
  - slug: player_control_scale_all_input
    info:
      en: |-
        ```hsc
        (<void> player_control_scale_all_input <real> <real>)
        ```
        scale input to x strength over y seconds
  - slug: profiler_auto_core_save
    info:
      en: |-
        ```hsc
        (<void> profiler_auto_core_save <boolean>)
        ```
        profiler dumps a core for each encounter
  - slug: cinematic_tag_reference_get_bink
    info:
      en: |-
        ```hsc
        (<bink_definition> cinematic_tag_reference_get_bink <long>)
        ```
        Retrieve the bink tag from the cinematic system
  - slug: voice_set_force_match_configurations
    info:
      en: |-
        ```hsc
        (<void> voice_set_force_match_configurations <long> <long> <long> <boolean>)
        ```
        sets matchmaking voice options
  - slug: voice_set_force_hud
    info:
      en: |-
        ```hsc
        (<void> voice_set_force_hud <long> <long>)
        ```
        sets matchmaking voice hud
  - slug: object_set_custom_animation_speed
    info:
      en: |-
        ```hsc
        (<void> object_set_custom_animation_speed <object> <real>)
        ```
        if the object is playing a custom animation, scale it to n playback speed
  - slug: scenery_animation_start_at_frame_loop
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_at_frame_loop <scenery> <animation_graph> <string_id> <short>)
        ```
        starts a custom animation playing on a piece of scenery at a specific frame and then loops
  - slug: saved_film_set_repro_mode
    info:
      en: |-
        ```hsc
        (<void> saved_film_set_repro_mode <boolean>)
        ```
        set the saved film into repro mode (splitscreen users are created based on the number of splitscreen players that recorded the film)
  - slug: font_set_emergency
    info:
      en: |-
        ```hsc
        (<void> font_set_emergency)
        ```
        sets the font system into emergency mode
  - slug: biped_force_ground_fitting_on
    info:
      en: |-
        ```hsc
        (<void> biped_force_ground_fitting_on <unit> <boolean>)
        ```
        force ground fitting on, even during custom animations or movement
  - slug: cinematic_set_chud_objective
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_chud_objective <cutscene_title>)
        ```
        activates the chapter title
  - slug: chud_show_cinematic_title
    info:
      en: |-
        ```hsc
        (<void> chud_show_cinematic_title <player> <cutscene_title>)
        ```
        activates the chapter title
  - slug: unit_get_primary_weapon
    info:
      en: |-
        ```hsc
        (<weapon> unit_get_primary_weapon <unit>)
        ```
        return the primary weapon of the specified unit
  - slug: budget_resource_get_animation_graph
    info:
      en: |-
        ```hsc
        (<animation_graph> budget_resource_get_animation_graph <animation_budget_reference>)
        ```
        Get a non resolving reference to a model animation graph budget reference
  - slug: budget_resource_get_looping_sound
    info:
      en: |-
        ```hsc
        (<looping_sound> budget_resource_get_looping_sound <looping_sound_budget_reference>)
        ```
        Get a non resolving reference to a looping sound budget reference
  - slug: game_safe_to_respawn
    info:
      en: |-
        ```hsc
        (<void> game_safe_to_respawn <boolean>)
        ```
  - slug: game_safe_to_respawn
    info:
      en: |-
        ```hsc
        (<void> game_safe_to_respawn <boolean> <player>)
        ```
  - slug: test_create_content_item_slayer
    info:
      en: |-
        ```hsc
        (<void> test_create_content_item_slayer)
        ```
        creates a slayer variant
  - slug: test_create_content_item_screenshot
    info:
      en: |-
        ```hsc
        (<void> test_create_content_item_screenshot)
        ```
        creates a screenshot (which isn't actually viewable)
  - slug: test_create_content_blf_screenshot
    info:
      en: |-
        ```hsc
        (<void> test_create_content_blf_screenshot <string> <string>)
        ```
        create a screenshot BLF file
  - slug: test_create_content_blf_film
    info:
      en: |-
        ```hsc
        (<void> test_create_content_blf_film <string> <string>)
        ```
        create a film BLF file
  - slug: test_create_content_blf_film_clip
    info:
      en: |-
        ```hsc
        (<void> test_create_content_blf_film_clip <string> <string>)
        ```
        create a film clip BLF file
  - slug: test_create_content_blf_game_variant
    info:
      en: |-
        ```hsc
        (<void> test_create_content_blf_game_variant <string> <string>)
        ```
        create a game variant BLF file
  - slug: test_create_content_blf_map_variant
    info:
      en: |-
        ```hsc
        (<void> test_create_content_blf_map_variant <string> <string>)
        ```
        create a map variant BLF file
  - slug: ai_migrate_infanty
    info:
      en: |-
        ```hsc
        (<void> ai_migrate_infanty <ai> <ai>)
        ```
        migrates the infantry in an encounter into a different squad.
  - slug: render_cinematic_motion_blur
    info:
      en: |-
        ```hsc
        (<void> render_cinematic_motion_blur <boolean>)
        ```
        enable/disable cinematic motion blur
  - slug: ai_dont_do_avoidance
    info:
      en: |-
        ```hsc
        (<void> ai_dont_do_avoidance <ai> <boolean>)
        ```
        set the AI to not do any vector avoidance when flying
  - slug: cinematic_scripting_clean_up
    info:
      en: |-
        ```hsc
        (<void> cinematic_scripting_clean_up <long>)
        ```
        Unload the scenario cinematic zone
  - slug: ai_erase_inactive
    info:
      en: |-
        ```hsc
        (<void> ai_erase_inactive <ai> <short>)
        ```
        Erase inactive actors in the given ai index, and any of those actors who become inactive within the next designated ticks
  - slug: ai_survival_cleanup
    info:
      en: |-
        ```hsc
        (<void> ai_survival_cleanup <ai> <boolean> <boolean>)
        ```
        Activate cure isolation death for the given AI, and optionally delete inactive actors in that group too (ai, on/off, kill inactive)
  - slug: ai_enable_stuck_flying_kill
    info:
      en: |-
        ```hsc
        (<void> ai_enable_stuck_flying_kill <ai> <boolean>)
        ```
        Enable/disable suicide condition for flying vehicles who are 'stuck'
  - slug: ai_set_stuck_velocity_threshold
    info:
      en: |-
        ```hsc
        (<void> ai_set_stuck_velocity_threshold <ai> <real>)
        ```
        Change the velocity threshold at which we will detect 'stuck' directional flying movement
  - slug: stop_bink_movie
    info:
      en: |-
        ```hsc
        (<void> stop_bink_movie)
        ```
        Stops all bink movie playback
  - slug: play_credits_unskippable
    info:
      en: |-
        ```hsc
        (<void> play_credits_unskippable)
        ```
        plays credits movie, no button press detection (you can still use cinematic skipping around this)
  - slug: budget_resource_get_sound
    info:
      en: |-
        ```hsc
        (<sound> budget_resource_get_sound <sound_budget_reference>)
        ```
        Get a non resolving reference to a looping sound budget reference
  - slug: controller_set_single_player_level_unlocked
    info:
      en: |-
        ```hsc
        (<void> controller_set_single_player_level_unlocked <controller> <short> <boolean>)
        ```
        <controller> <level index> <bool locked> set single player level locked state for specified controller
  - slug: physical_memory_dump
    info:
      en: |-
        ```hsc
        (<void> physical_memory_dump)
        ```
        dumps a record of all physical memory allocations
  - slug: tag_resources_validate_all_pages
    info:
      en: |-
        ```hsc
        (<void> tag_resources_validate_all_pages <boolean>)
        ```
        resource validation every main_loop_body call
  - slug: cinematic_set_debug_mode
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_debug_mode <boolean>)
        ```
        Puts all cinematic playback into debug mode (automatically generated script function!)
  - slug: cinematic_scripting_get_object
    info:
      en: |-
        ```hsc
        (<object> cinematic_scripting_get_object <long> <long>)
        ```
        Get an object used in a cinematic
  - slug: player_override_team
    info:
      en: |-
        ```hsc
        (<void> player_override_team <long> <team>)
        ```
        sets the team for a specified player
  - slug: unit_set_stance
    info:
      en: |-
        ```hsc
        (<void> unit_set_stance <unit> <string_id>)
        ```
        Specify the desired stance for this unit
  - slug: player_set_stance
    info:
      en: |-
        ```hsc
        (<void> player_set_stance <string_id>)
        ```
        Specify the stance for all players currently in the game
  - slug: sound_impulse_start_editor
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_editor <sound> <object> <real>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale.
  - slug: sound_impulse_start_effect_editor
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_effect_editor <sound> <object> <real> <string_id>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale and effect.
  - slug: sound_impulse_start_3d_editor
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_3d_editor <sound> <real> <real>)
        ```
        <sound> <azimuth> <scale> at the sound's minimum distance
  - slug: sound_looping_start_editor
    info:
      en: |-
        ```hsc
        (<void> sound_looping_start_editor <looping_sound> <object> <real>)
        ```
        plays a looping sound from the specified source object (or "none"), with the specified scale.
  - slug: debug_sound_channels_log_start
    info:
      en: |-
        ```hsc
        (<void> debug_sound_channels_log_start)
        ```
        starts the sound channel debugger log
  - slug: debug_sound_channels_log_start_named
    info:
      en: |-
        ```hsc
        (<void> debug_sound_channels_log_start_named <string>)
        ```
        starts the sound channel debugger log with the specified file name
  - slug: debug_sound_channels_log_stop
    info:
      en: |-
        ```hsc
        (<void> debug_sound_channels_log_stop)
        ```
        stops the sound channel debugger log
  - slug: simulation_profiler_enable
    info:
      en: |-
        ```hsc
        (<void> simulation_profiler_enable)
        ```
        Turns on the simulation/bandwidth profiler and configures it for high level use (similar to the old screen-text-based bandwidth profiler).
  - slug: saved_film_insert_marker
    info:
      en: |-
        ```hsc
        (<void> saved_film_insert_marker <string>)
        ```
        Inserts a film marker.
  - slug: saved_film_seek_to_marker
    info:
      en: |-
        ```hsc
        (<void> saved_film_seek_to_marker <long>)
        ```
        Seeks to a film marker.
  - slug: game_currency_issue_award_to_team
    info:
      en: |-
        ```hsc
        (<void> game_currency_issue_award_to_team <long> <long>)
        ```
        Awards the latter amount of money to the former team index.  Use 0 or 1 for team index.  Host only!
  - slug: net_simulation_set_stream_bandwidth
    info:
      en: |-
        ```hsc
        (<void> net_simulation_set_stream_bandwidth <long>)
        ```
        Adjusts the per-stream bandwidth cap and forces all streams to limit themselves to that cap immediately.
  - slug: debug_sound_fadeout_time
    info:
      en: |-
        ```hsc
        (<void> debug_sound_fadeout_time <real>)
        ```
        set fadeout time for sound channel debugger
  - slug: render_model_marker_name_filter
    info:
      en: |-
        ```hsc
        (<void> render_model_marker_name_filter <string>)
        ```
        sets a substring to search for when rendering model markers
  - slug: skull_enable
    info:
      en: |-
        ```hsc
        (<void> skull_enable <skull> <boolean>)
        ```
        enable/disable the given skull
  - slug: allow_object_to_be_lased
    info:
      en: |-
        ```hsc
        (<void> allow_object_to_be_lased <object> <boolean>)
        ```
        enable/disable object laser designation for prototyping purposes.
  - slug: is_object_being_lased
    info:
      en: |-
        ```hsc
        (<boolean> is_object_being_lased <object>)
        ```
        Check whether an object is being lased by a player.
  - slug: simulation_profiler_detail_level
    info:
      en: |-
        ```hsc
        (<long> simulation_profiler_detail_level <long>)
        ```
        set detail level of simulation profiler capture on the host (affects perf & saved film size).  0-9 are valid, else clamped.
  - slug: simulation_profiler_enable_downstream_processing
    info:
      en: |-
        ```hsc
        (<boolean> simulation_profiler_enable_downstream_processing <boolean>)
        ```
        enable/disable the processing of downstream data by the simulation profiler database (default is disabled, so if you want to examine downstream, you need to turn this on at display time.  Does not affect recording!)
  - slug: campaign_metagame_get_player_score
    info:
      en: |-
        ```hsc
        (<long> campaign_metagame_get_player_score <player>)
        ```
        Calculates the score for an individual player
  - slug: collision_debug_lightmaps_print
    info:
      en: |-
        ```hsc
        (<void> collision_debug_lightmaps_print)
        ```
        Prints the collision_debug_lightmaps text to the console
  - slug: load_binary_game_engine
    info:
      en: |-
        ```hsc
        (<void> load_binary_game_engine <string>)
        ```
        load a compiled megalo engine
  - slug: network_storage_files_display_file_names
    info:
      en: |-
        ```hsc
        (<void> network_storage_files_display_file_names)
        ```
        displays files network storage is tracking
  - slug: network_storage_files_force_download
    info:
      en: |-
        ```hsc
        (<void> network_storage_files_force_download <string>)
        ```
        forces the download of a network file
  - slug: debug_lightmap_inspect
    info:
      en: |-
        ```hsc
        (<void> debug_lightmap_inspect)
        ```
        show the lightmap status
  - slug: render_debug_colorbars
    info:
      en: |-
        ```hsc
        (<void> render_debug_colorbars <long>)
        ```
        show the lightmap status
  - slug: voice_force_global_repeater_use
    info:
      en: |-
        ```hsc
        (<void> voice_force_global_repeater_use <boolean>)
        ```
        Forces maximum repeater use, with randomly shuffling repeater assignments every few seconds.
  - slug: levels_add_campaign_map_with_id
    info:
      en: |-
        ```hsc
        (<void> levels_add_campaign_map_with_id <long> <string>)
        ```
        <map id> <scenario> add scenario to levels array
  - slug: levels_add_campaign_map
    info:
      en: |-
        ```hsc
        (<void> levels_add_campaign_map <string>)
        ```
        <scenario> add a single scenario to levels array
  - slug: levels_add_multiplayer_map
    info:
      en: |-
        ```hsc
        (<void> levels_add_multiplayer_map <string>)
        ```
        <scenario> add a single scenario to mp level datum array
  - slug: clear_map_slot
    info:
      en: |-
        ```hsc
        (<void> clear_map_slot <long>)
        ```
        nuke cache<number>.map
  - slug: clear_map_type
    info:
      en: |-
        ```hsc
        (<void> clear_map_type <long>)
        ```
        nuke all maps corresponding to specified type: 0 = mainmenu, 1 = multiplayer shared, 2 = campaign shared, 3 = multiplayer, 4 = campaign
  - slug: network_team_picker_unit_test
    info:
      en: |-
        ```hsc
        (<void> network_team_picker_unit_test)
        ```
        run team picker unit tests
  - slug: debug_objects_unit_seats_filter
    info:
      en: |-
        ```hsc
        (<void> debug_objects_unit_seats_filter <string>)
        ```
        set the filter for unit seat debugging.  Set to empty string to clear
  - slug: debug_lock_enforcement
    info:
      en: |-
        ```hsc
        (<void> debug_lock_enforcement <boolean>)
        ```
        enable or disable assertions in the synchronization manager lock hierarchy
  - slug: lsp_presence_dump_blfs
    info:
      en: |-
        ```hsc
        (<void> lsp_presence_dump_blfs <boolean>)
        ```
        write lsp presence BLFs to disk
  - slug: lsp_leaderboard_dump_blfs
    info:
      en: |-
        ```hsc
        (<void> lsp_leaderboard_dump_blfs <boolean>)
        ```
        write lsp leaderboard BLFs to disk
  - slug: rewards_flush
    info:
      en: |-
        ```hsc
        (<void> rewards_flush)
        ```
        flush current player rewards state to all persistent systems (profile + LSP)
  - slug: rewards_profile_write
    info:
      en: |-
        ```hsc
        (<void> rewards_profile_write)
        ```
        kick off an write of player rewards state (cookies & etc) to the profile
  - slug: rewards_lsp_sync
    info:
      en: |-
        ```hsc
        (<void> rewards_lsp_sync)
        ```
        kick off an LSP sync of player rewards state (cookies & etc)
  - slug: rewards_force_unlock_all_purchasable_items
    info:
      en: |-
        ```hsc
        (<void> rewards_force_unlock_all_purchasable_items)
        ```
        Forcibly grants all prerequisites to all items.  Will allow you to buy anything that you have sufficient cookies for.
  - slug: rewards_cookies_grant_to_controller
    info:
      en: |-
        ```hsc
        (<void> rewards_cookies_grant_to_controller <controller> <long>)
        ```
        grant N cookies to the specified local controller
  - slug: rewards_cookies_grant_to_player
    info:
      en: |-
        ```hsc
        (<void> rewards_cookies_grant_to_player <player> <long>)
        ```
        grant a cookie to the specified in-game player.  No network synchronization (fake an incident if you need that).
  - slug: rewards_commendation_increment_for_controller
    info:
      en: |-
        ```hsc
        (<void> rewards_commendation_increment_for_controller <controller> <string_id>)
        ```
        increment a commendation (by string id) on the specified local controller
  - slug: rewards_commendation_increment_for_player
    info:
      en: |-
        ```hsc
        (<void> rewards_commendation_increment_for_player <player> <string_id>)
        ```
        increment a commendation (by string id) on the specified in-game player
  - slug: rewards_commendation_set_for_controller
    info:
      en: |-
        ```hsc
        (<void> rewards_commendation_set_for_controller <controller> <string_id> <long>)
        ```
        Set a commendation (by string id) to a specific value on the specified local controller
  - slug: rewards_purchase
    info:
      en: |-
        ```hsc
        (<void> rewards_purchase <controller> <long> <long> <long>)
        ```
        try to buy an item for the specified local controller.  will only succeed if you have sufficient cookies.  The three paramters are category index, family index, and item index (from the purchasable items globals tag).
  - slug: rewards_set_player_appearance_from_purchase
    info:
      en: |-
        ```hsc
        (<void> rewards_set_player_appearance_from_purchase <controller> <long> <long> <long>)
        ```
        Set the player's appearance to reflect the selection of the specified purchasable item. Will "succeed" even 
  - slug: rewards_dump
    info:
      en: |-
        ```hsc
        (<void> rewards_dump)
        ```
        dump the current reward state to logs as _event_warnings
  - slug: rewards_reinitialize_from_storage
    info:
      en: |-
        ```hsc
        (<void> rewards_reinitialize_from_storage <controller>)
        ```
        reinitialize the in-memory reward state of the specified controller, pretending it just signed in (causing resyncs w/ profile and LSP).
  - slug: rewards_reset_to_default_state
    info:
      en: |-
        ```hsc
        (<void> rewards_reset_to_default_state <controller>)
        ```
        reset the player's reward state, push it out to the profile, & the LSP.  This should nuke your progression and make you a level 1 peon.
  - slug: rewards_get_cookie_total
    info:
      en: |-
        ```hsc
        (<long> rewards_get_cookie_total <controller>)
        ```
        Fetches the specified controller's lifetime cookie earn total (not his currently available cookies!)
  - slug: rewards_set_purchase_state
    info:
      en: |-
        ```hsc
        (<void> rewards_set_purchase_state <controller> <long> <long>)
        ```
        Set a particular purchase for a particular controller to the specified purchase state (0-32, interpreted as a binary set of purchase flags, in decimal).
  - slug: challenges_enable_lsp_synchronization
    info:
      en: |-
        ```hsc
        (<void> challenges_enable_lsp_synchronization <boolean>)
        ```
        Turn on/off lsp synchronization (useful to disable to keep LSP syncs from overriding your other script overrides).  LSP syncs are enabled by default.  Put this in your init to ensure that no challenges will be active by default.
  - slug: challenges_clear
    info:
      en: |-
        ```hsc
        (<void> challenges_clear)
        ```
        Clear all current active challenges.  Useful as a prelude to injecting challenges manually with challenges_activate_challenge.
  - slug: challenges_activate_challenge
    info:
      en: |-
        ```hsc
        (<void> challenges_activate_challenge <long> <long> <long>)
        ```
        activate the specified challenge. params are challenge set (0=daily, 1=weekly), challenge category index (from tag), challenge index in category (from tag).
  - slug: challenges_list_active_challenges_for_controller
    info:
      en: |-
        ```hsc
        (<void> challenges_list_active_challenges_for_controller <controller>)
        ```
        lists the active challenges for a controller
  - slug: challenge_advance_for_controller
    info:
      en: |-
        ```hsc
        (<void> challenge_advance_for_controller <controller> <string_id> <boolean>)
        ```
        gives one credit towards a challenge by name.
  - slug: challenge_complete_for_controller
    info:
      en: |-
        ```hsc
        (<void> challenge_complete_for_controller <controller> <string_id> <boolean>)
        ```
        gives challenge credits until it is completed, if possible.
  - slug: challenge_advance_for_controller_by_indices
    info:
      en: |-
        ```hsc
        (<void> challenge_advance_for_controller_by_indices <controller> <long> <long> <boolean>)
        ```
        progress a challenge by one.  challenge is identified by category index and challenge index within that category.
  - slug: challenge_complete_for_controller_by_indices
    info:
      en: |-
        ```hsc
        (<void> challenge_complete_for_controller_by_indices <controller> <long> <long> <boolean>)
        ```
        gives challenge credits until it is completed, if possible.  challenge is identified by category index and challenge index within that category.
  - slug: cui_set_screen_name_override_prefix
    info:
      en: |-
        ```hsc
        (<void> cui_set_screen_name_override_prefix <string>)
        ```
        set prefix for cui screen name overrides
  - slug: cui_load_screen
    info:
      en: |-
        ```hsc
        (<void> cui_load_screen <cui_screen_definition>)
        ```
        loads a cui screen from a definition tag
  - slug: cui_load_themed_screen
    info:
      en: |-
        ```hsc
        (<void> cui_load_themed_screen <cui_screen_definition> <string_id>)
        ```
        loads a cui screen from a definition tag
  - slug: rewards_get_grade
    info:
      en: |-
        ```hsc
        (<long> rewards_get_grade <controller>)
        ```
        get player grade for specific controller
  - slug: rewards_get_sub_grade
    info:
      en: |-
        ```hsc
        (<long> rewards_get_sub_grade <controller>)
        ```
        get player subgrade for specific controller
  - slug: exit_experience_set_params
    info:
      en: |-
        ```hsc
        (<void> exit_experience_set_params <string_id> <string> <long> <long> <long> <long> <long>)
        ```
        sets test parameters to show on the exit experience screen. parameters are: game mode (matchmaking, campaign, survival, custom_game, survival_matchmaking), score bitfield (eg. 10111111111), commendation count, count, challenge count, achievements count, cookies before, cookies after
  - slug: player_profile_clear_to_default_values
    info:
      en: |-
        ```hsc
        (<void> player_profile_clear_to_default_values <controller>)
        ```
        Slam the specified controller to default profile values.
  - slug: submit_incident
    info:
      en: |-
        ```hsc
        (<void> submit_incident <string_id>)
        ```
        Fire a global incident for all players
  - slug: submit_incident_with_cause_player
    info:
      en: |-
        ```hsc
        (<void> submit_incident_with_cause_player <string_id> <player>)
        ```
        Fire an incident for a player
  - slug: submit_incident_with_cause_team
    info:
      en: |-
        ```hsc
        (<void> submit_incident_with_cause_team <string_id> <mp_team>)
        ```
        Fire an incident for a team
  - slug: submit_incident_with_cause_player_and_effect_player
    info:
      en: |-
        ```hsc
        (<void> submit_incident_with_cause_player_and_effect_player <string_id> <player> <player>)
        ```
        Fire an incident
  - slug: submit_incident_with_cause_player_and_effect_team
    info:
      en: |-
        ```hsc
        (<void> submit_incident_with_cause_player_and_effect_team <string_id> <player> <mp_team>)
        ```
        Fire an incident
  - slug: submit_incident_with_cause_team_and_effect_player
    info:
      en: |-
        ```hsc
        (<void> submit_incident_with_cause_team_and_effect_player <string_id> <mp_team> <player>)
        ```
        Fire an incident
  - slug: submit_incident_with_cause_team_and_effect_team
    info:
      en: |-
        ```hsc
        (<void> submit_incident_with_cause_team_and_effect_team <string_id> <mp_team> <mp_team>)
        ```
        Fire an incident
  - slug: submit_incident_with_cause_campaign_team
    info:
      en: |-
        ```hsc
        (<void> submit_incident_with_cause_campaign_team <string_id> <team>)
        ```
        Loops over all players on the campaign team and calls submit_incident_with_cause_player
  - slug: net_set_campaign_insertion_point
    info:
      en: |-
        ```hsc
        (<void> net_set_campaign_insertion_point <short>)
        ```
        set the campaign insertion point squad session parameter
  - slug: hs_make_interactive_scripts_deterministic
    info:
      en: |-
        ```hsc
        (<void> hs_make_interactive_scripts_deterministic <boolean>)
        ```
        Enable or disable the routing of interactive script execution through the simulation system for determinism.  You can also use "determinize <normal script call>" to determinize a single script call.
  - slug: threadlib_runtests
    info:
      en: |-
        ```hsc
        (<void> threadlib_runtests)
        ```
        runs the unit tests for threadlib
  - slug: player_set_respawn_vehicle
    info:
      en: |-
        ```hsc
        (<void> player_set_respawn_vehicle <player> <object_definition>)
        ```
        sets a vehicle definition for a player to spawn in - the player will continue to spawn in this vehicle until you set it to none
  - slug: teleport_players_into_vehicle
    info:
      en: |-
        ```hsc
        (<boolean> teleport_players_into_vehicle <unit>)
        ```
        tries to teleport all alive players into the specified vehicle, returns true if all players ended up in the vehicle.
  - slug: content_test_set_active
    info:
      en: |-
        ```hsc
        (<void> content_test_set_active <long>)
        ```
        enable or disable the test harness for the content system (which will run through a bunch of operations and spew any errors encountered).
  - slug: content_test_set_active_test_pass
    info:
      en: |-
        ```hsc
        (<void> content_test_set_active_test_pass <string> <long>)
        ```
        Enable a specific test pass for the content system (e.g. standard, create).
  - slug: command_buffer_cache_playback_enable
    info:
      en: |-
        ```hsc
        (<void> command_buffer_cache_playback_enable <boolean>)
        ```
        Enable/disable command buffer playback
  - slug: player_set_spartan_loadout
    info:
      en: |-
        ```hsc
        (<void> player_set_spartan_loadout <player>)
        ```
        Set player loadout palette to spartan
  - slug: player_set_elite_loadout
    info:
      en: |-
        ```hsc
        (<void> player_set_elite_loadout <player>)
        ```
        Set player loadout palette to elite
  - slug: auto_graph
    info:
      en: |-
        ```hsc
        (<void> auto_graph <string>)
        ```
        Toggle graphing of some string quantity (ask a coder to graph the stuff and give you the strings).
  - slug: auto_graph_reset
    info:
      en: |-
        ```hsc
        (<void> auto_graph_reset)
        ```
        Turn off all graphs.
  - slug: auto_graph_enable_list
    info:
      en: |-
        ```hsc
        (<void> auto_graph_enable_list <boolean>)
        ```
        Start tracking available graphs.
  - slug: auto_graph_filter_list
    info:
      en: |-
        ```hsc
        (<void> auto_graph_filter_list <string>)
        ```
        Set a substring filter for available graph tracking.
  - slug: auto_graph_list
    info:
      en: |-
        ```hsc
        (<void> auto_graph_list)
        ```
        Display the current set of (filtered) available graphs.
  - slug: auto_graph_hide
    info:
      en: |-
        ```hsc
        (<void> auto_graph_hide)
        ```
        Hide all graphs temporarily (without losing the active set or disabling the graphing behind the scenes).  Just to see past them.
  - slug: location_names_print
    info:
      en: |-
        ```hsc
        (<void> location_names_print)
        ```
        Print all valid location names for the current scenario.
  - slug: net_force_host
    info:
      en: |-
        ```hsc
        (<void> net_force_host <string>)
        ```
        Force a particular box (by machine name) to be host whenever possible.  
  - slug: net_force_host_squad
    info:
      en: |-
        ```hsc
        (<void> net_force_host_squad <string>)
        ```
        Force a particular box (by machine name) to be host whenever possible.  
  - slug: net_force_host_posse
    info:
      en: |-
        ```hsc
        (<void> net_force_host_posse <string>)
        ```
        Force a particular box (by machine name) to be host whenever possible.  
  - slug: net_force_host_group
    info:
      en: |-
        ```hsc
        (<void> net_force_host_group <string>)
        ```
        Force a particular box (by machine name) to be host whenever possible.  
  - slug: sandbox_load_label_strings
    info:
      en: |-
        ```hsc
        (<void> sandbox_load_label_strings <string>)
        ```
        loads the label strings from the given .mglo file.  Only useable in the forge lobby
  - slug: net_dump_network_statistics
    info:
      en: |-
        ```hsc
        (<void> net_dump_network_statistics)
        ```
        Dump the current local network statistics structure to a file (same blob that is uploaded to MachineUpdateNetworkStats.ashx).
  - slug: net_enable_block_detection
    info:
      en: |-
        ```hsc
        (<void> net_enable_block_detection <long>)
        ```
        If non-zero, turns on network block detection w/ the provided ms threshold.
  - slug: main_enable_block_detection
    info:
      en: |-
        ```hsc
        (<void> main_enable_block_detection <long>)
        ```
        If non-zero, turns on main loop block detection w/ the provided ms threshold.
  - slug: main_synchronous_networking_request_vblank_slip
    info:
      en: |-
        ```hsc
        (<void> main_synchronous_networking_request_vblank_slip)
        ```
        Force the main loop to slip an extra vblank during its next sleep to try to get to a more stable place relative to the incoming game tick stream.
  - slug: debug_button_action_mapping_set
    info:
      en: |-
        ```hsc
        (<void> debug_button_action_mapping_set <long> <long>)
        ```
        Allows remapping of individual actions in custom button preset, contact a programmer for a list of what each parameter corresponds to
  - slug: player_appearance_force_model_area
    info:
      en: |-
        ```hsc
        (<void> player_appearance_force_model_area <long> <string_id>)
        ```
        Force every player to spawn with a particular selection for a particular area
  - slug: player_appearance_force_model_area_disable
    info:
      en: |-
        ```hsc
        (<void> player_appearance_force_model_area_disable <long>)
        ```
        Disable forcing every player to spawn with a particular selection for a particular area
  - slug: debug_instanced_geometry_names_filter
    info:
      en: |-
        ```hsc
        (<void> debug_instanced_geometry_names_filter <string>)
        ```
        filters instance debugging by name (substring included, set to emptry string to clear)
  - slug: stream_manager_load_core
    info:
      en: |-
        ```hsc
        (<void> stream_manager_load_core <string>)
        ```
        slam the network stream manager state with a saved core
  - slug: stream_manager_save_cores
    info:
      en: |-
        ```hsc
        (<void> stream_manager_save_cores <long>)
        ```
        begin dumping cores every X seconds
  - slug: controller_set_waypoint_flags
    info:
      en: |-
        ```hsc
        (<void> controller_set_waypoint_flags <controller> <long> <boolean>)
        ```
        Set a waypoint flag in the profile (outgoing to waypoint)
  - slug: waypoint_set_unlock_flag
    info:
      en: |-
        ```hsc
        (<void> waypoint_set_unlock_flag <controller> <long> <boolean>)
        ```
        Set a waypoint flag in the profile (incoming from waypoint)
  - slug: async_test_hang
    info:
      en: |-
        ```hsc
        (<void> async_test_hang <real> <long> <long>)
        ```
        Create and async task that hangs for the specified number of seconds with the specified async category and priority.
  - slug: incidents_force_campaign
    info:
      en: |-
        ```hsc
        (<void> incidents_force_campaign)
        ```
        Force all incidents to report as campaign
  - slug: incidents_force_firefight
    info:
      en: |-
        ```hsc
        (<void> incidents_force_firefight)
        ```
        Force all incidents to report as firefight
  - slug: incidents_force_multiplayer
    info:
      en: |-
        ```hsc
        (<void> incidents_force_multiplayer)
        ```
        Force all incidents to report as multiplayer
  - slug: incidents_force_matchmaking
    info:
      en: |-
        ```hsc
        (<void> incidents_force_matchmaking)
        ```
        Force all incidents to report as matchmaking
  - slug: incidents_force_custom_games
    info:
      en: |-
        ```hsc
        (<void> incidents_force_custom_games)
        ```
        Force all incidents to report as custom games
  - slug: incidents_force_solo
    info:
      en: |-
        ```hsc
        (<void> incidents_force_solo)
        ```
        Force all incidents to report as solo
  - slug: incidents_force_coop
    info:
      en: |-
        ```hsc
        (<void> incidents_force_coop)
        ```
        Force all incidents to report as coop
  - slug: incidents_force_four_player_coop
    info:
      en: |-
        ```hsc
        (<void> incidents_force_four_player_coop)
        ```
        Force all incidents to report as 4 player coop
  - slug: game_sound_stress_test_message_queue
    info:
      en: |-
        ```hsc
        (<void> game_sound_stress_test_message_queue)
        ```
        Generate a bunch of messages to fill up the message queue.
  - slug: net_log_channel_message_queue_state
    info:
      en: |-
        ```hsc
        (<void> net_log_channel_message_queue_state <long> <boolean>)
        ```
        Turn on/off logging of message queue state every time a message is sent for the specified channel index.
  - slug: global_preferences_set_campaign_state
    info:
      en: |-
        ```hsc
        (<void> global_preferences_set_campaign_state <long>)
        ```
        sets the global preferences campaign state
  - slug: net_load_machine_file
    info:
      en: |-
        ```hsc
        (<void> net_load_machine_file <string>)
        ```
        load a machine file blf (pulled via gameadmin) directly.  Be sure to turn off banhammer lsp syncs to avoid getting your handiwork overwritten.
  - slug: lightmap_memory_inspect
    info:
      en: |-
        ```hsc
        (<void> lightmap_memory_inspect)
        ```
        output the lightmap memory
  - slug: game_set_random_holiday
    info:
      en: |-
        ```hsc
        (<void> game_set_random_holiday)
        ```
        Set the game to a random holiday (used by stress to verify that setting boxes to random holidays on boot doesn't cause films to go out of sync).
  - slug: airstrike_enable
    info:
      en: |-
        ```hsc
        (<void> airstrike_enable <boolean>)
        ```
        enable/disable airstrikes
  - slug: airstrike_weapons_exist
    info:
      en: |-
        ```hsc
        (<boolean> airstrike_weapons_exist)
        ```
        returns whether there is a player enable/disable airstrikes.
  - slug: airstrike_set_launches
    info:
      en: |-
        ```hsc
        (<void> airstrike_set_launches <long>)
        ```
        sets the number of available airstrikes.
  - slug: cui_debug_add_global_property_watch
    info:
      en: |-
        ```hsc
        (<void> cui_debug_add_global_property_watch <string>)
        ```
        add global property watch
  - slug: cui_debug_add_property_watch
    info:
      en: |-
        ```hsc
        (<void> cui_debug_add_property_watch <string>)
        ```
        add property watch for active screen
  - slug: cui_debug_remove_global_property_watch
    info:
      en: |-
        ```hsc
        (<void> cui_debug_remove_global_property_watch <string>)
        ```
        remove global property watch
  - slug: cui_debug_remove_property_watch
    info:
      en: |-
        ```hsc
        (<void> cui_debug_remove_property_watch <string>)
        ```
        remove property watch for active screen
  - slug: cui_debug_clear_global_property_watches
    info:
      en: |-
        ```hsc
        (<void> cui_debug_clear_global_property_watches)
        ```
        remove all global property watches
  - slug: cui_debug_clear_property_watches
    info:
      en: |-
        ```hsc
        (<void> cui_debug_clear_property_watches)
        ```
        remove all property watches for active screen
  - slug: cui_debug_add_global_binding_watch
    info:
      en: |-
        ```hsc
        (<void> cui_debug_add_global_binding_watch <string>)
        ```
        add global binding watch
  - slug: cui_debug_add_binding_watch
    info:
      en: |-
        ```hsc
        (<void> cui_debug_add_binding_watch <string>)
        ```
        add binding watch for active screen
  - slug: cui_debug_remove_global_binding_watch
    info:
      en: |-
        ```hsc
        (<void> cui_debug_remove_global_binding_watch <string>)
        ```
        remove global binding watch
  - slug: cui_debug_remove_binding_watch
    info:
      en: |-
        ```hsc
        (<void> cui_debug_remove_binding_watch <string>)
        ```
        remove binding watch for active screen
  - slug: cui_debug_clear_global_binding_watches
    info:
      en: |-
        ```hsc
        (<void> cui_debug_clear_global_binding_watches)
        ```
        remove all global binding watches
  - slug: cui_debug_clear_binding_watches
    info:
      en: |-
        ```hsc
        (<void> cui_debug_clear_binding_watches)
        ```
        remove all binding watches for active screen
  - slug: cui_debug_clear_global
    info:
      en: |-
        ```hsc
        (<void> cui_debug_clear_global)
        ```
        clear all global state
  - slug: cui_debug_clear
    info:
      en: |-
        ```hsc
        (<void> cui_debug_clear)
        ```
        clear all state for active screen
  - slug: game_grief_record_custom_penalty
    info:
      en: |-
        ```hsc
        (<void> game_grief_record_custom_penalty <player> <real>)
        ```
        Add griefing points to a player
  - slug: game_grief_reset
    info:
      en: |-
        ```hsc
        (<void> game_grief_reset)
        ```
        Reset griefing system for xbox
  - slug: game_grief_force_social_matchmaking
    info:
      en: |-
        ```hsc
        (<void> game_grief_force_social_matchmaking)
        ```
        Force the griefing system to believe that it is social matchmaking
  - slug: game_grief_force_ranked_matchmaking
    info:
      en: |-
        ```hsc
        (<void> game_grief_force_ranked_matchmaking)
        ```
        Force the griefing system to believe that it is ranked matchmaking
  - slug: game_grief_set_ranked_matchmaking_multiplier
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_ranked_matchmaking_multiplier <real>)
        ```
        Set the ranked matchmaking multiplier
  - slug: game_grief_set_social_matchmaking_multiplier
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_social_matchmaking_multiplier <real>)
        ```
        Set the ranked matchmaking multiplier
  - slug: game_grief_set_custom_game_multiplier
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_custom_game_multiplier <real>)
        ```
        Force the griefing system to believe it is a custom game
  - slug: game_grief_set_objects_in_sphere_radius
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_objects_in_sphere_radius <real>)
        ```
        Set the maximum distance for nearby enemey players/ai
  - slug: game_grief_set_ai_multiplier
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_ai_multiplier <real>)
        ```
        Set the multiplier for ai
  - slug: game_grief_set_enemy_ai_nearby_multiplier
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_enemy_ai_nearby_multiplier <real>)
        ```
        Set the multiplier when an enemy ai is nearby the betrayed
  - slug: game_grief_set_enemy_player_nearby_multiplier
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_enemy_player_nearby_multiplier <real>)
        ```
        Set the multiplier when an enemy player is nearby the betrayed
  - slug: game_grief_set_same_squad_multiplier
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_same_squad_multiplier <real>)
        ```
        Set the multiplier when both the betrayed and betrayer are in the same matchmaking party
  - slug: game_grief_set_shield_damage_base_penalty
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_shield_damage_base_penalty <real>)
        ```
        Set the shield damage base penalty
  - slug: game_grief_set_body_damage_base_penalty
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_body_damage_base_penalty <real>)
        ```
        Set the body damage base penalty
  - slug: game_grief_set_betrayal_base_penalty
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_betrayal_base_penalty <real>)
        ```
        Set the betrayal base penalty
  - slug: game_grief_set_betrayal_boot_cutoff
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_betrayal_boot_cutoff <real>)
        ```
        Set the betrayal boot cutoff
  - slug: game_grief_set_ejection_cutoff
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_ejection_cutoff <real>)
        ```
        Set the ejection cutoff
  - slug: game_grief_set_betrayal_decay_seconds
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_betrayal_decay_seconds <real>)
        ```
        Set the seconds it takes to decay a griefing point
  - slug: game_grief_set_eject_decay_seconds
    info:
      en: |-
        ```hsc
        (<void> game_grief_set_eject_decay_seconds <real>)
        ```
        Set the seconds it takes to decay an ejection point
  - slug: net_disconnect_and_reconnect_all_channels
    info:
      en: |-
        ```hsc
        (<void> net_disconnect_and_reconnect_all_channels)
        ```
        for reproing omaha bug 26715, allows you to instantly unilaterally reset a machine's network message queues, bringing a danger of misinterpreting incoming fragments.
  - slug: player_set_profile
    info:
      en: |-
        ```hsc
        (<void> player_set_profile <starting_profile>)
        ```
        sets the profile for all players to spawn/respawn with.
  - slug: player_set_profile
    info:
      en: |-
        ```hsc
        (<void> player_set_profile <starting_profile> <player>)
        ```
        sets the profile for this player to spawn/respawn with.
  - slug: security_run_unit_tests
    info:
      en: |-
        ```hsc
        (<void> security_run_unit_tests)
        ```
        runs a batch of security related unit tests
  - slug: network_session_security_set_challenge_response
    info:
      en: |-
        ```hsc
        (<void> network_session_security_set_challenge_response <string> <boolean> <long>)
        ```
        change challenge responses
  - slug: network_session_security_set_challenge_failure_on_timeout
    info:
      en: |-
        ```hsc
        (<void> network_session_security_set_challenge_failure_on_timeout <boolean>)
        ```
        enable/disable failures on timeouts
  - slug: network_session_security_set_challenge_force_fail
    info:
      en: |-
        ```hsc
        (<void> network_session_security_set_challenge_force_fail <boolean>)
        ```
        force challenge response failures
  - slug: network_session_security_disable_challenges
    info:
      en: |-
        ```hsc
        (<void> network_session_security_disable_challenges <boolean>)
        ```
        disables security challenges
  - slug: test_player_appearance_encode_for_sneakernet
    info:
      en: |-
        ```hsc
        (<void> test_player_appearance_encode_for_sneakernet)
        ```
        creates an encoded player appearance suitable for sneakernet from the first signed in controller
  - slug: test_player_appearance_decode_from_sneakernet
    info:
      en: |-
        ```hsc
        (<void> test_player_appearance_decode_from_sneakernet <string>)
        ```
        applies a sneakernet encoded player appearance to the first signed in controller
  - slug: ui_content_resize_cache
    info:
      en: |-
        ```hsc
        (<void> ui_content_resize_cache <long>)
        ```
        set UI content cache size
  - slug: motl_dump_bitvector_for_scenario
    info:
      en: |-
        ```hsc
        (<void> motl_dump_bitvector_for_scenario)
        ```
        dumps the multiplayer object type bitvector for the current loaded scenario
  - slug: motl_verify_mapinfo_for_scenario
    info:
      en: |-
        ```hsc
        (<void> motl_verify_mapinfo_for_scenario)
        ```
        checks the current level's mapinfo motl bitvector against what is actually loaded
  - slug: TestPrintBool
    info:
      en: |-
        ```hsc
        (<void> TestPrintBool <string> <boolean>)
        ```
        Prints the specified boolean with the format '<string> = '<boolean>' to the Shell.
  - slug: TestPrintReal
    info:
      en: |-
        ```hsc
        (<void> TestPrintReal <string> <real>)
        ```
        Prints the specified real with the format '<string> = '<real>' to the Shell.
  - slug: EnableWeaponTTEDebug
    info:
      en: |-
        ```hsc
        (<void> EnableWeaponTTEDebug <boolean>)
        ```
        enable/disable player weapon fire rate debug info
  - slug: ForceFullAutoMagnum
    info:
      en: |-
        ```hsc
        (<void> ForceFullAutoMagnum <boolean>)
        ```
        force magnum into full auto mode?
  - slug: ForceAllFullAuto
    info:
      en: |-
        ```hsc
        (<void> ForceAllFullAuto <boolean>)
        ```
        force all weapons into full auto mode?
  - slug: DisablePauseOnDefocus
    info:
      en: |-
        ```hsc
        (<void> DisablePauseOnDefocus <boolean>)
        ```
        disable the pause on defocus behaviour - can be used to speed up tag load whilst doing other work
  - slug: EnablePlayerBarrelStateDebug
    info:
      en: |-
        ```hsc
        (<void> EnablePlayerBarrelStateDebug <boolean>)
        ```
        enable/disable player weapon barrel state debug info
  - slug: DisableWeaponTimingFeatures
    info:
      en: |-
        ```hsc
        (<void> DisableWeaponTimingFeatures)
        ```
        Disable all weapon debug features
  - slug: unit_action_test_secondary_trigger
    info:
      en: |-
        ```hsc
        (<boolean> unit_action_test_secondary_trigger <player>)
        ```
        returns true if any player has used weapon secondary trigger since the last call to (player_action_test_reset).
  - slug: player_action_test_secondary_trigger
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_secondary_trigger)
        ```
        returns true if any player has used secondary trigger since the last call to (player_action_test_reset).
  - slug: debug_key_evaluate
    info:
      en: |-
        ```hsc
        (<void> debug_key_evaluate <string> <boolean>)
        ```
        toggles the rendering of the first active user's weapon debugging
  - slug: player_machinima_camera_enable_toggle
    info:
      en: |-
        ```hsc
        (<boolean> player_machinima_camera_enable_toggle)
        ```
        Returns true if it is now enabled or not
  - slug: debug_menu_rebuild
    info:
      en: |-
        ```hsc
        (<void> debug_menu_rebuild)
        ```
        Reparses the debug menu from the text file.
