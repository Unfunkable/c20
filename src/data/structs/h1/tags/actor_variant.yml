entry_type: ActorVariant
imports:
  h1/tags/common:
    - TagDependency
    - Angle
    - Vector3D
    - GrenadeType
    - Fraction
    - Index
    - Block
    - ColorRGB
  h1/tags/unit:
    - MCCMetagameType
    - MCCMetagameClass
type_defs:
  ActorVariantFlags:
    class: bitfield
    size: 4
    bits:
      - name: can_shoot_while_flying
        comments:
          en: >
            Also allows grounded AIs to shoot while jumping or falling.
      - name: interpolate_color_in_hsv
        comments:
          en: >
            Determines if [change colors](#tag-field-change-colors) upper and
            lower bounds are interpolated in
            [HSV](https://en.wikipedia.org/wiki/HSL_and_HSV) space as opposed to
            RGB.
      - name: has_unlimited_grenades
        comments:
          en: Gives the actor an unlimited supply of grenades to throw.
      - name: moveswitch_stay_w_friends
      - name: active_camouflage
        comments:
          en: 'Gives the actor permanent active camouflage, e.g. stealth Elites.'
      - name: super_active_camouflage
        comments:
          en: >
            When enabled, makes the active camouflage the _hyper stealth_
            variant from [globals](~), which can have a different appearance.
      - name: cannot_use_ranged_weapons
        comments:
          en: >
            Disables ranged combat settings (beginning at the _weapon_
            reference). Even if the AI is holding a weapon, it will not fire it.
      - name: prefer_passenger_seat
        comments:
          en: >
            The actor will prefer to enter a vehicle's passenger seat over a
            gunner seat, as determined by the [unit's _seat_
            flags](~unit#tag-field-seats).
  ActorVariantMovementType:
    class: enum
    size: 2
    options:
      - name: always_run
      - name: always_crouch
      - name: switch_types
  ActorVariantSpecialFireMode:
    class: enum
    size: 2
    options:
      - name: none
        comments:
          en: No special fire will be used.
      - name: overcharge
        comments:
          en: >
            The actor will hold down the primary trigger for an overcharged
            shot. Jackals use this with the plasma pistol.
      - name: secondary_trigger
        comments:
          en: >-
            The actor will fire the weapon's secondary
            [trigger](~weapon#tag-field-triggers).
  ActorVariantSpecialFireSituation:
    class: enum
    size: 2
    options:
      - name: never
        comments:
          en: The actor will never special fire their weapon.
      - name: enemy_visible
        comments:
          en: Special fire happens only when the target is visible.
      - name: enemy_out_of_sight
        comments:
          en: Special fire happens only when the target is behind cover.
      - name: strafing
  ActorVariantTrajectoryType:
    class: enum
    size: 2
    options:
      - name: toss
      - name: lob
      - name: bounce
  ActorVariantGrenadeStimulus:
    class: enum
    size: 2
    options:
      - name: never
        comments:
          en: The actor never throws grenades.
      - name: visible_target
      - name: seek_cover
  ActorVariantChangeColors:
    class: struct
    assert_size: 32
    fields:
      - name: color_lower_bound
        type: ColorRGB
      - name: color_upper_bound
        type: ColorRGB
      - type: pad
        size: 8
  ActorVariant:
    class: struct
    meta:
      tag_id: actv
      post_cache_deformat: true
      post_compile: true
    comments:
      en: >
        Specializes an [actor](~) by defining their use of weapons, grenades,
        their health, their color, and what equipment they drop.
    assert_size: 568
    fields:
      - name: flags
        type: ActorVariantFlags
      - name: actor_definition
        type: TagDependency
        meta:
          tag_classes:
            - actor
      - name: unit
        type: TagDependency
        meta:
          tag_classes:
            - unit
        comments:
          en: 'Specifies which [biped](~) this variant will spawn as.'
      - name: major_variant
        type: TagDependency
        meta:
          tag_classes:
            - actor_variant
        comments:
          en: >
            Specifies the next highest "rank" of this actor variant. This allows
            enemies to "upgrade" in higher difficulties, with the chance being
            controlled by both the per-difficulty _major upgrade_ [globals](~)
            multipliers and the _major upgrade_ squad setting in the
            [scenario](~).
      - name: metagame_type
        type: MCCMetagameType
        meta:
          h1a_only: true
        comments:
          en: >
            Used for kill scoring and achievements in MCC. Since this field was
            padding in pre-MCC editions, maps compiled for MCC should use
            MCC-native _actor\_variant_ tags or set these fields, or else
            enemies may be scored as Brutes or other unexpected types due to
            having zeroed-out or garbage data.
      - name: metagame_class
        type: MCCMetagameClass
        meta:
          h1a_only: true
        comments:
          en: >
            Used for kill scoring and achievements in MCC.
      - type: pad
        size: 20
      - name: movement_type
        type: ActorVariantMovementType
      - type: pad
        size: 2
      - name: initial_crouch_chance
        type: float
        meta:
          min: 0
          max: 1
      - name: crouch_time
        type: Bounds
        meta:
          unit: seconds
        type_args:
          T: float
      - name: run_time
        type: Bounds
        meta:
          unit: seconds
        type_args:
          T: float
      - name: weapon
        type: TagDependency
        meta:
          tag_classes:
            - weapon
        comments:
          en: The _weapon_ that the actor spawns with.
      - name: maximum_firing_distance
        type: float
        meta:
          unit: world units
        comments:
          en: >-
            The maximum range, in world units, where the unit can fire at a
            target.
      - name: rate_of_fire
        type: float
        comments:
          en: >
            This lets you pick the firing rate for this actor. Which affects
            firing behavior in the following ways:

            - Any above `0` rate of fire is limited by the referenced _weapon's_
              minimum _rounds per second_ as the actor will only tap the trigger
              not hold, not causing the firing speed to climb.

            - When set to `0`, the actor will hold the trigger causing it to use
            the
              weapon's windup behavior and allows it to reach the weapon's max firing rate.

            - If `0` and the weapon is a charging weapon the actor will hold the
            charge until
              the burst ends or the weapon's [overcharged action behavior](weapon#tag-field-triggers-charging-time) kicks in.

            - If not `0` charging the weapon will fire their uncharged
            projectiles if they have them.

            - Setting a number higher than the weapon's minimum rate of fire can
            prompt
              the actor to fire their gun slower than the weapon's minimum because it will
              try to tap fire at every `1/rate_of_fire` causing it to not be able to fire
              again immediately after the firing delay.
      - name: projectile_error
        type: Angle
        comments:
          en: >-
            Adds error on top of the weapon's own error. This makes actors fire
            inaccurately.
      - name: first_burst_delay_time
        type: Bounds
        meta:
          unit: seconds
        type_args:
          T: float
        comments:
          en: >-
            The delay in seconds before the actor starts its first burst on a
            new target.
      - name: new_target_firing_pattern_time
        type: float
        meta:
          unit: seconds
        comments:
          en: >
            How long this AI follows "New target" firing modifiers when first
            engaging a target.
      - name: surprise_delay_time
        type: float
        meta:
          unit: seconds
      - name: surprise_fire_wildly_time
        type: float
        meta:
          unit: seconds
      - name: death_fire_wildly_chance
        type: float
        meta:
          min: 0
          max: 1
        comments:
          en: Sets the chance that the actor will fire their weapon while dying.
      - name: death_fire_wildly_time
        type: float
        meta:
          unit: seconds
        comments:
          en: Controls how long the actor will continue firing after death.
      - name: desired_combat_range
        type: Bounds
        meta:
          unit: world units
        type_args:
          T: float
        comments:
          en: >
            The distance in world units the actor will try to be in to attack;
            lower bounds is the minimum range and upper is the maximum. The
            actor may still fire outside this range, but will [move to attain
            it](~ai#firing-positions).
      - name: custom_stand_gun_offset
        type: Vector3D
      - name: custom_crouch_gun_offset
        type: Vector3D
      - name: target_tracking
        type: float
        meta:
          min: 0
          max: 1
        comments:
          en: >
            Determines how closely the actor will follow moving targets when
            firing. bursts. A value of `0` means only firing at the target's
            location at the start of the burst, while while `1` means following
            the target perfectly. with each shot. A value in-between can be
            provided.
      - name: target_leading
        type: float
        meta:
          min: 0
          max: 1
        comments:
          en: >
            Determines how accurately to predict lead on moving targets. A value
            of `0` means not leading at all and shooting directly at the target,
            while `1` means perfectly predicting how far in front of the target
            to lead based on [projectile](~) speed and distance. A value
            in-between can be provided.
      - name: weapon_damage_modifier
        type: float
        comments:
          en: >
            Allows weapon damage to be buffed or nerfed for this actor variant.
            A value of 0 disables this modifier.
      - name: damage_per_second
        type: float
        comments:
          en: Overrides weapon damage if set and _weapon damage modifier_ is 0.
      - name: burst_origin_radius
        type: float
        meta:
          unit: world units
        comments:
          en: >-
            The starting point of the burst, randomly to the left or right of
            the target in world units.
      - name: burst_origin_angle
        type: Angle
        comments:
          en: >
            Controls the maximum angle from horizontal that the orgin can be,
            from the point of view of the actor. For example, a value of `0`
            indicates the origin will alway be directly to the left or right of
            the target, while `90` would allow the origin to be above or below
            the target as well.
      - name: burst_return_length
        type: Bounds
        meta:
          unit: world units
        type_args:
          T: float
        comments:
          en: >
            How far the burst point moves back towards the target. This can be
            negative to make the burst lead _away_ from the target.
      - name: burst_return_angle
        type: Angle
        comments:
          en: Controls how close to horizontal the return motion can be.
      - name: burst_duration
        type: Bounds
        meta:
          unit: seconds
        type_args:
          T: float
        comments:
          en: 'Cotrols the length of burst, during which multiple shots are fired.'
      - name: burst_separation
        type: Bounds
        meta:
          unit: seconds
        type_args:
          T: float
        comments:
          en: Controls how long to wait between bursts.
      - name: burst_angular_velocity
        type: Angle
        meta:
          unit: degrees per second
        comments:
          en: >
            Sets the maximum rotational rate that the burst can sweep. A value
            of `0` means unlimited. For example, if the _burst origin radius_ is
            large and the _burst duration_ is short, the return burst will cover
            a large area in a short amount of time unless limited by this
            angular velocity.
      - type: pad
        size: 4
      - name: special_damage_modifier
        type: float
        meta:
          min: 0
          max: 1
        comments:
          en: >
            A damage modifier for special weapon fire (e.g. overcharged shots
            and secondary triggers), applied in addition to the normal damage
            modifier. No effect if `0`.
      - name: special_projectile_error
        type: Angle
        comments:
          en: >
            An error angle, applied in addition to normal error, for special
            fire.
      - name: new_target_burst_duration
        type: float
        comments:
          en: >-
            Multiplier for _burst duration_ in the new target state. No effect
            if `0`.
      - name: new_target_burst_separation
        type: float
        comments:
          en: >-
            Multiplier for _burst separation_ in the new target state. No effect
            if `0`.
      - name: new_target_rate_of_fire
        type: float
        comments:
          en: >-
            Multiplier for _rate of fire_ in the new target state. No effect if
            `0`.
      - name: new_target_projectile_error
        type: float
        comments:
          en: >-
            Multiplier for _projectile error_ in the new target state. No effect
            if `0`.
      - type: pad
        size: 8
      - name: moving_burst_duration
        type: float
        comments:
          en: >-
            Multiplier for _burst duration_ in the moving state. No effect if
            `0`.
      - name: moving_burst_separation
        type: float
        comments:
          en: >-
            Multiplier for _burst separation_ in the moving state. No effect if
            `0`.
      - name: moving_rate_of_fire
        type: float
        comments:
          en: Multiplier for _rate of fire_ in the moving state. No effect if `0`.
      - name: moving_projectile_error
        type: float
        comments:
          en: >-
            Multiplier for _projectile error_ in the moving state. No effect if
            `0`.
      - type: pad
        size: 8
      - name: berserk_burst_duration
        type: float
        comments:
          en: >-
            Multiplier for _burst duration_ in the berserk state. No effect if
            `0`.
      - name: berserk_burst_separation
        type: float
        comments:
          en: >-
            Multiplier for _burst separation_ in the berserk state. No effect if
            `0`.
      - name: berserk_rate_of_fire
        type: float
        comments:
          en: >-
            Multiplier for _rate of fire_ in the berserk state. No effect if
            `0`.
      - name: berserk_projectile_error
        type: float
        comments:
          en: >-
            Multiplier for _projectile error_ in the berserk state. No effect if
            `0`.
      - type: pad
        size: 8
      - name: super_ballistic_range
        type: float
      - name: bombardment_range
        type: float
        comments:
          en: >
            When non-zero, causes the burst target to be offset by a random
            distance in this range when the enemy is _not visible_.
      - name: modified_vision_range
        type: float
        comments:
          en: >
            Overrides the [actor's vision
            range](~actor#tag-field-max-vision-distance). Normal if `0`.
      - name: special_fire_mode
        type: ActorVariantSpecialFireMode
        comments:
          en: 'If set, allows the actor to use their weapon in alternate ways.'
      - name: special_fire_situation
        type: ActorVariantSpecialFireSituation
        comments:
          en: >-
            Determines the situation in which the actor has a chance of using
            special fire.
      - name: special_fire_chance
        type: float
        meta:
          min: 0
          max: 1
        comments:
          en: >
            How likely the actor will use their weapon's special fire mode.
            Setting this to `0` is equivalent to using the _never_ situation.
      - name: special_fire_delay
        type: float
        meta:
          unit: seconds
        comments:
          en: How long the actor must wait between uses of special fire mode.
      - name: melee_range
        type: float
        meta:
          unit: world units
        comments:
          en: >-
            Sets how close an enemy must get to trigger a melee charge by the
            actor.
      - name: melee_abort_range
        type: float
        meta:
          unit: world units
        comments:
          en: >-
            The actor will stop trying to melee the enemy goes outside this
            range.
      - name: berserk_firing_ranges
        type: Bounds
        meta:
          unit: world units
        type_args:
          T: float
        comments:
          en: >
            When berserking and outside the maximum range, the actor will
            advance towards the target and stop at the minimum range.
      - name: berserk_melee_range
        type: float
        meta:
          unit: world units
        comments:
          en: 'Similar to _melee range_, but used when the actor is berserking.'
      - name: berserk_melee_abort_range
        type: float
        meta:
          unit: world units
        comments:
          en: >-
            Similar to _melee abort range_, but used when the actor is
            berserking.
      - type: pad
        size: 8
      - name: grenade_type
        type: GrenadeType
        comments:
          en: >
            Sets which type of grenade the actor throws, assuming _grenade
            stimulus_ is not _never_.
      - name: trajectory_type
        type: ActorVariantTrajectoryType
      - name: grenade_stimulus
        type: ActorVariantGrenadeStimulus
        comments:
          en: >
            What causes the actor to consider throwing a grenade. It is still
            dependent upon _grenade chance_.
      - name: minimum_enemy_count
        type: uint16
        comments:
          en: >
            How many enemies must be within the grenade's radius before the
            actor considers throwing there.
      - name: enemy_radius
        type: float
        meta:
          unit: world units
        comments:
          en: >
            Only enemies within this radius of the actor are considered when
            choosing where to throw a grenade.
      - type: pad
        size: 4
      - name: grenade_velocity
        type: float
        meta:
          unit: world units per second
        comments:
          en: >
            This is responsibile for giving the grenade it's thrown velocity,
            rather than the [projectile _initial
            velocity_](~projectile#tag-field-initial-velocity) or the [unit
            _grenade velocity_](~unit#tag-field-grenade-velocity).
      - name: grenade_ranges
        type: Bounds
        meta:
          unit: world units
        type_args:
          T: float
        comments:
          en: >
            The minimum and maximum ranges that the actor will consider throwing
            a grenade.
      - name: collateral_damage_radius
        type: float
        meta:
          unit: world units
        comments:
          en: >
            If there are friendlies within this radius of the target, grenades
            will not be thrown.
      - name: grenade_chance
        type: Fraction
        meta:
          min: 0
          max: 1
        comments:
          en: >-
            How likely the actor is to throw a grenade when a _grenade stimulus_
            applies.
      - name: grenade_check_time
        type: float
        meta:
          unit: seconds
        comments:
          en: >
            How often to consider throwing a grenade while a continuous _grenade
            stimulus_, like _visible target_, applies.
      - name: encounter_grenade_timeout
        type: float
        meta:
          unit: seconds
        comments:
          en: >
            The AI will not throw a grenade if another AI in the
            [encounter](~scenario#encounters) threw one within this timeout. This
            prevents AI from all throwing grenades at the same time.
      - type: pad
        size: 20
      - name: equipment
        type: TagDependency
        meta:
          tag_classes:
            - equipment
        comments:
          en: >
            References equipment that the actor will drop on death. Note that
            their weapon will already be dropped and does not need to be
            repeated here.
      - name: grenade_count
        type: Bounds
        type_args:
          T: uint16
        comments:
          en: >
            Determines how many grenades the actor spawns with, with the type
            determined by the _grenade type_ field. The actor will use up these
            grenades unless _has unlimited grenades_ is true. On death, the
            grenades are dropped.
      - name: don't_drop_grenades_chance
        type: float
        meta:
          min: 0
          max: 1
        comments:
          en: >-
            The chance that the actor drops no grenades on death, even if they
            have some.
      - name: drop_weapon_loaded
        type: Bounds
        meta:
          unit: fractions of a clip
          min: 0
          max: 1
        type_args:
          T: float
        comments:
          en: >
            A random range for how loaded the dropped weapon is, as a fraction
            of its magazine size or charge. Plasma weapons are dropped at 100%
            charge no matter this field's value under special circumstances: *
            If a model region was destroyed and that region's [_forces drop
            weapon_
            flag](~model_collision_geometry#tag-field-regions-forces-drop-weapon)
            is enabled, such as shooting the arm off a Flood actor. * If the
            actor has a chance of [feigning death](~unit#feigning-death) and
            reviving, but not if the damage exceeds the _hard death threshold_.
            ---
      - name: drop_weapon_ammo
        type: Bounds
        meta:
          unit: rounds
        type_args:
          T: uint16
        comments:
          en: >
            The total number of reserve ammo rounds included with the dropped
            weapon. Ignored for energy weapons.
      - type: pad
        size: 12
      - type: pad
        size: 16
      - name: body_vitality
        type: float
        comments:
          en: >
            Overrides the biped's [collision geometry _maximum body
            vitality_](~model_collision_geometry#tag-field-maximum-body-vitality)
            for a different amount of health.
      - name: shield_vitality
        type: float
        comments:
          en: >
            Overrides the biped's [collision geometry _maximum shield
            vitality_](~model_collision_geometry#tag-field-maximum-body-vitality)
            for a different amount of shields.
      - name: shield_sapping_radius
        type: float
        meta:
          unit: world units
      - name: forced_shader_permutation
        type: Index
        comments:
          en: >
            If non-zero, forces the bitmap index for any shader the biped uses.
            For example, the Elite major uses the value `1` which forces its
            shaders to use the second (red) cubemap in
            `characters\elite\bitmaps\cubemaps.bitmap`. [Bitmap tags](~bitmap)
            which do not have a bitmap for this index will instead use the first
            map (index `0`).
      - type: pad
        size: 2
      - type: pad
        size: 16
      - type: pad
        size: 12
      - name: change_colors
        type: Block
        type_args:
          T: ActorVariantChangeColors
        meta:
          hek_max_count: 4
        comments:
          en: Overrides the bipeds color change permutations.
